/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ansi-html/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ansi-html/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),

/***/ "./node_modules/core-js/fn/set-immediate.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/fn/set-immediate.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/web.immediate */ "./node_modules/core-js/modules/web.immediate.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/modules/_core.js").setImmediate;


/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.2' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_invoke.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_invoke.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var SRC = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),

/***/ "./node_modules/core-js/modules/_task.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_task.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");
var cel = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "./node_modules/core-js/modules/web.immediate.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/web.immediate.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js");
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),

/***/ "./node_modules/html-entities/index.js":
/*!*********************************************!*\
  !*** ./node_modules/html-entities/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  XmlEntities: __webpack_require__(/*! ./lib/xml-entities.js */ "./node_modules/html-entities/lib/xml-entities.js"),
  Html4Entities: __webpack_require__(/*! ./lib/html4-entities.js */ "./node_modules/html-entities/lib/html4-entities.js"),
  Html5Entities: __webpack_require__(/*! ./lib/html5-entities.js */ "./node_modules/html-entities/lib/html5-entities.js"),
  AllHtmlEntities: __webpack_require__(/*! ./lib/html5-entities.js */ "./node_modules/html-entities/lib/html5-entities.js")
};


/***/ }),

/***/ "./node_modules/html-entities/lib/html4-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html4-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];

var alphaIndex = {};
var numIndex = {};

var i = 0;
var length = HTML_ALPHA.length;
while (i < length) {
    var a = HTML_ALPHA[i];
    var c = HTML_CODES[i];
    alphaIndex[a] = String.fromCharCode(c);
    numIndex[c] = a;
    i++;
}

/**
 * @constructor
 */
function Html4Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1).toLowerCase() === 'x' ?
                parseInt(entity.substr(2), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.decode = function(str) {
    return new Html4Entities().decode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var alpha = numIndex[str.charCodeAt(i)];
        result += alpha ? "&" + alpha + ";" : str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encode = function(str) {
    return new Html4Entities().encode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var cc = str.charCodeAt(i);
        var alpha = numIndex[cc];
        if (alpha) {
            result += "&" + alpha + ";";
        } else if (cc < 32 || cc > 126) {
            result += "&#" + cc + ";";
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonUTF = function(str) {
    return new Html4Entities().encodeNonUTF(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonASCII = function(str) {
    return new Html4Entities().encodeNonASCII(str);
};

module.exports = Html4Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/html5-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html5-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];

var alphaIndex = {};
var charIndex = {};

createIndexes(alphaIndex, charIndex);

/**
 * @constructor
 */
function Html5Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1) === 'x' ?
                parseInt(entity.substr(2).toLowerCase(), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.decode = function(str) {
    return new Html5Entities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var charInfo = charIndex[str.charCodeAt(i)];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        result += str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encode = function(str) {
    return new Html5Entities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var charInfo = charIndex[c];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonUTF = function(str) {
    return new Html5Entities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonASCII = function(str) {
    return new Html5Entities().encodeNonASCII(str);
 };

/**
 * @param {Object} alphaIndex Passed by reference.
 * @param {Object} charIndex Passed by reference.
 */
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    var _results = [];
    while (i--) {
        var e = ENTITIES[i];
        var alpha = e[0];
        var chars = e[1];
        var chr = chars[0];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chars[1]) {
            var chr2 = chars[1];
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            _results.push(addChar && (charInfo[chr2] = alpha));
        } else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            _results.push(addChar && (charInfo[''] = alpha));
        }
    }
}

module.exports = Html5Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/xml-entities.js":
/*!********************************************************!*\
  !*** ./node_modules/html-entities/lib/xml-entities.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};

var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};

var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};

/**
 * @constructor
 */
function XmlEntities() {}

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/<|>|"|'|&/g, function(s) {
        return CHAR_S_INDEX[s];
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encode = function(str) {
    return new XmlEntities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {
        if (s.charAt(1) === '#') {
            var code = s.charAt(2).toLowerCase() === 'x' ?
                parseInt(s.substr(3), 16) :
                parseInt(s.substr(2));

            if (isNaN(code) || code < -32768 || code > 65535) {
                return '';
            }
            return String.fromCharCode(code);
        }
        return ALPHA_INDEX[s] || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.decode = function(str) {
    return new XmlEntities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var alpha = CHAR_INDEX[c];
        if (alpha) {
            result += "&" + alpha + ";";
            i++;
            continue;
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonUTF = function(str) {
    return new XmlEntities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLenght = str.length;
    var result = '';
    var i = 0;
    while (i < strLenght) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonASCII = function(str) {
    return new XmlEntities().encodeNonASCII(str);
 };

module.exports = XmlEntities;


/***/ }),

/***/ "./node_modules/image-q/dist/esm/basicAPI.js":
/*!***************************************************!*\
  !*** ./node_modules/image-q/dist/esm/basicAPI.js ***!
  \***************************************************/
/*! exports provided: buildPaletteSync, buildPalette, applyPaletteSync, applyPalette */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildPaletteSync", function() { return buildPaletteSync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildPalette", function() { return buildPalette; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPaletteSync", function() { return applyPaletteSync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPalette", function() { return applyPalette; });
/* harmony import */ var core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/fn/set-immediate */ "./node_modules/core-js/fn/set-immediate.js");
/* harmony import */ var core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./distance */ "./node_modules/image-q/dist/esm/distance/index.js");
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./image */ "./node_modules/image-q/dist/esm/image/index.js");
/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./palette */ "./node_modules/image-q/dist/esm/palette/index.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * helper.ts - part of Image Quantization Library
 */




function buildPaletteSync(images, { colorDistanceFormula, paletteQuantization, colors } = {}) {
    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);
    const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);
    images.forEach(image => paletteQuantizer.sample(image));
    return paletteQuantizer.quantizeSync();
}
async function buildPalette(images, { colorDistanceFormula, paletteQuantization, colors, onProgress } = {}) {
    return new Promise((resolve, reject) => {
        const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);
        const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);
        images.forEach(image => paletteQuantizer.sample(image));
        let palette;
        let timerId;
        const iterator = paletteQuantizer.quantize();
        const next = () => {
            try {
                const result = iterator.next();
                if (result.done) {
                    resolve(palette);
                }
                else {
                    if (result.value.palette)
                        palette = result.value.palette;
                    if (onProgress)
                        onProgress(result.value.progress);
                    timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);
                }
            }
            catch (error) {
                clearTimeout(timerId);
                reject(error);
            }
        };
        timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);
    });
}
function applyPaletteSync(image, palette, { colorDistanceFormula, imageQuantization } = {}) {
    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);
    const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);
    return imageQuantizer.quantizeSync(image, palette);
}
async function applyPalette(image, palette, { colorDistanceFormula, imageQuantization, onProgress } = {}) {
    return new Promise((resolve, reject) => {
        const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);
        const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);
        let outPointContainer;
        let timerId;
        const iterator = imageQuantizer.quantize(image, palette);
        const next = () => {
            try {
                const result = iterator.next();
                if (result.done) {
                    resolve(outPointContainer);
                }
                else {
                    if (result.value.pointContainer)
                        outPointContainer = result.value.pointContainer;
                    if (onProgress)
                        onProgress(result.value.progress);
                    timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);
                }
            }
            catch (error) {
                clearTimeout(timerId);
                reject(error);
            }
        };
        timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);
    });
}
function colorDistanceFormulaToColorDistance(colorDistanceFormula = 'euclidean-bt709') {
    switch (colorDistanceFormula) {
        case 'cie94-graphic-arts': return new _distance__WEBPACK_IMPORTED_MODULE_1__["CIE94GraphicArts"]();
        case 'cie94-textiles': return new _distance__WEBPACK_IMPORTED_MODULE_1__["CIE94Textiles"]();
        case 'ciede2000': return new _distance__WEBPACK_IMPORTED_MODULE_1__["CIEDE2000"]();
        case 'color-metric': return new _distance__WEBPACK_IMPORTED_MODULE_1__["CMetric"]();
        case 'euclidean': return new _distance__WEBPACK_IMPORTED_MODULE_1__["Euclidean"]();
        case 'euclidean-bt709': return new _distance__WEBPACK_IMPORTED_MODULE_1__["EuclideanBT709"]();
        case 'euclidean-bt709-noalpha': return new _distance__WEBPACK_IMPORTED_MODULE_1__["EuclideanBT709NoAlpha"]();
        case 'manhattan': return new _distance__WEBPACK_IMPORTED_MODULE_1__["Manhattan"]();
        case 'manhattan-bt709': return new _distance__WEBPACK_IMPORTED_MODULE_1__["ManhattanBT709"]();
        case 'manhattan-nommyde': return new _distance__WEBPACK_IMPORTED_MODULE_1__["ManhattanNommyde"]();
        case 'pngquant': return new _distance__WEBPACK_IMPORTED_MODULE_1__["PNGQuant"]();
        default: throw new Error(`Unknown colorDistanceFormula ${colorDistanceFormula}`);
    }
}
function imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization = 'floyd-steinberg') {
    switch (imageQuantization) {
        case 'nearest': return new _image__WEBPACK_IMPORTED_MODULE_2__["NearestColor"](distanceCalculator);
        case 'riemersma': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionRiemersma"](distanceCalculator);
        case 'floyd-steinberg': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"].FloydSteinberg);
        case 'false-floyd-steinberg': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"].FalseFloydSteinberg);
        case 'stucki': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"].Stucki);
        case 'atkinson': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"].Atkinson);
        case 'jarvis': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"].Jarvis);
        case 'burkes': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"].Burkes);
        case 'sierra': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"].Sierra);
        case 'two-sierra': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"].TwoSierra);
        case 'sierra-lite': return new _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"].SierraLite);
        default: throw new Error(`Unknown imageQuantization ${imageQuantization}`);
    }
}
function paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization = 'wuquant', colors = 256) {
    switch (paletteQuantization) {
        case 'neuquant': return new _palette__WEBPACK_IMPORTED_MODULE_3__["NeuQuant"](distanceCalculator, colors);
        case 'rgbquant': return new _palette__WEBPACK_IMPORTED_MODULE_3__["RGBQuant"](distanceCalculator, colors);
        case 'wuquant': return new _palette__WEBPACK_IMPORTED_MODULE_3__["WuQuant"](distanceCalculator, colors);
        case 'neuquant-float': return new _palette__WEBPACK_IMPORTED_MODULE_3__["NeuQuantFloat"](distanceCalculator, colors);
        default: throw new Error(`Unknown paletteQuantization ${paletteQuantization}`);
    }
}
//# sourceMappingURL=basicAPI.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/constants/bt709.js":
/*!**********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/constants/bt709.js ***!
  \**********************************************************/
/*! exports provided: Y, x, y */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y", function() { return Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return x; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return y; });
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * constants.ts - part of Image Quantization Library
 */
/**
 * sRGB (based on ITU-R Recommendation BT.709)
 * http://en.wikipedia.org/wiki/SRGB
 */
var Y;
(function (Y) {
    Y[Y["RED"] = 0.2126] = "RED";
    Y[Y["GREEN"] = 0.7152] = "GREEN";
    Y[Y["BLUE"] = 0.0722] = "BLUE";
    Y[Y["WHITE"] = 1] = "WHITE";
})(Y || (Y = {}));
// tslint:disable-next-line:naming-convention
var x;
(function (x) {
    x[x["RED"] = 0.64] = "RED";
    x[x["GREEN"] = 0.3] = "GREEN";
    x[x["BLUE"] = 0.15] = "BLUE";
    x[x["WHITE"] = 0.3127] = "WHITE";
})(x || (x = {}));
// tslint:disable-next-line:naming-convention
var y;
(function (y) {
    y[y["RED"] = 0.33] = "RED";
    y[y["GREEN"] = 0.6] = "GREEN";
    y[y["BLUE"] = 0.06] = "BLUE";
    y[y["WHITE"] = 0.329] = "WHITE";
})(y || (y = {}));
//# sourceMappingURL=bt709.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/constants/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/constants/index.js ***!
  \**********************************************************/
/*! exports provided: bt709 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _bt709__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bt709 */ "./node_modules/image-q/dist/esm/constants/bt709.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "bt709", function() { return _bt709__WEBPACK_IMPORTED_MODULE_0__; });
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * constants.ts - part of Image Quantization Library
 */


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/conversion/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/conversion/index.js ***!
  \***********************************************************/
/*! exports provided: rgb2xyz, rgb2hsl, rgb2lab, lab2xyz, lab2rgb, xyz2lab, xyz2rgb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rgb2xyz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rgb2xyz */ "./node_modules/image-q/dist/esm/conversion/rgb2xyz.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rgb2xyz", function() { return _rgb2xyz__WEBPACK_IMPORTED_MODULE_0__["rgb2xyz"]; });

/* harmony import */ var _rgb2hsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rgb2hsl */ "./node_modules/image-q/dist/esm/conversion/rgb2hsl.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rgb2hsl", function() { return _rgb2hsl__WEBPACK_IMPORTED_MODULE_1__["rgb2hsl"]; });

/* harmony import */ var _rgb2lab__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rgb2lab */ "./node_modules/image-q/dist/esm/conversion/rgb2lab.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rgb2lab", function() { return _rgb2lab__WEBPACK_IMPORTED_MODULE_2__["rgb2lab"]; });

/* harmony import */ var _lab2xyz__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lab2xyz */ "./node_modules/image-q/dist/esm/conversion/lab2xyz.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lab2xyz", function() { return _lab2xyz__WEBPACK_IMPORTED_MODULE_3__["lab2xyz"]; });

/* harmony import */ var _lab2rgb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lab2rgb */ "./node_modules/image-q/dist/esm/conversion/lab2rgb.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lab2rgb", function() { return _lab2rgb__WEBPACK_IMPORTED_MODULE_4__["lab2rgb"]; });

/* harmony import */ var _xyz2lab__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./xyz2lab */ "./node_modules/image-q/dist/esm/conversion/xyz2lab.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "xyz2lab", function() { return _xyz2lab__WEBPACK_IMPORTED_MODULE_5__["xyz2lab"]; });

/* harmony import */ var _xyz2rgb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./xyz2rgb */ "./node_modules/image-q/dist/esm/conversion/xyz2rgb.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "xyz2rgb", function() { return _xyz2rgb__WEBPACK_IMPORTED_MODULE_6__["xyz2rgb"]; });

/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * iq.ts - Image Quantization Library
 */







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/conversion/lab2rgb.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/conversion/lab2rgb.js ***!
  \*************************************************************/
/*! exports provided: lab2rgb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lab2rgb", function() { return lab2rgb; });
/* harmony import */ var _lab2xyz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lab2xyz */ "./node_modules/image-q/dist/esm/conversion/lab2xyz.js");
/* harmony import */ var _xyz2rgb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xyz2rgb */ "./node_modules/image-q/dist/esm/conversion/xyz2rgb.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * lab2rgb.ts - part of Image Quantization Library
 */


// tslint:disable-next-line:naming-convention
function lab2rgb(L, a, b) {
    const xyz = Object(_lab2xyz__WEBPACK_IMPORTED_MODULE_0__["lab2xyz"])(L, a, b);
    return Object(_xyz2rgb__WEBPACK_IMPORTED_MODULE_1__["xyz2rgb"])(xyz.x, xyz.y, xyz.z);
}
//# sourceMappingURL=lab2rgb.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/conversion/lab2xyz.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/conversion/lab2xyz.js ***!
  \*************************************************************/
/*! exports provided: lab2xyz */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lab2xyz", function() { return lab2xyz; });
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * lab2xyz.ts - part of Image Quantization Library
 */
const refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant = D65
const refY = 1.00000; // ref_Y = 100.000
const refZ = 1.08883; // ref_Z = 108.883
function pivot(n) {
    return n > 0.206893034 ? Math.pow(n, 3) : (n - 16 / 116) / 7.787;
}
// tslint:disable-next-line:naming-convention
function lab2xyz(L, a, b) {
    const y = (L + 16) / 116;
    const x = a / 500 + y;
    const z = y - b / 200;
    return {
        x: refX * pivot(x),
        y: refY * pivot(y),
        z: refZ * pivot(z),
    };
}
//# sourceMappingURL=lab2xyz.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/conversion/rgb2hsl.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/conversion/rgb2hsl.js ***!
  \*************************************************************/
/*! exports provided: rgb2hsl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgb2hsl", function() { return rgb2hsl; });
/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arithmetic */ "./node_modules/image-q/dist/esm/utils/arithmetic.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * rgb2hsl.ts - part of Image Quantization Library
 */

/**
 * Calculate HSL from RGB
 * Hue is in degrees [0..360]
 * Lightness: [0..1]
 * Saturation: [0..1]
 * http://web.archive.org/web/20060914040436/http://local.wasp.uwa.edu.au/~pbourke/colour/hsl/
 */
function rgb2hsl(r, g, b) {
    const min = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__["min3"])(r, g, b);
    const max = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__["max3"])(r, g, b);
    const delta = max - min;
    const l = (min + max) / 510;
    let s = 0;
    if (l > 0 && l < 1)
        s = delta / (l < 0.5 ? (max + min) : (510 - max - min));
    let h = 0;
    if (delta > 0) {
        if (max === r) {
            h = (g - b) / delta;
        }
        else if (max === g) {
            h = (2 + (b - r) / delta);
        }
        else {
            h = (4 + (r - g) / delta);
        }
        h *= 60;
        if (h < 0)
            h += 360;
    }
    return { h, s, l };
}
//# sourceMappingURL=rgb2hsl.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/conversion/rgb2lab.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/conversion/rgb2lab.js ***!
  \*************************************************************/
/*! exports provided: rgb2lab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgb2lab", function() { return rgb2lab; });
/* harmony import */ var _rgb2xyz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rgb2xyz */ "./node_modules/image-q/dist/esm/conversion/rgb2xyz.js");
/* harmony import */ var _xyz2lab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xyz2lab */ "./node_modules/image-q/dist/esm/conversion/xyz2lab.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * rgb2lab.ts - part of Image Quantization Library
 */


function rgb2lab(r, g, b) {
    const xyz = Object(_rgb2xyz__WEBPACK_IMPORTED_MODULE_0__["rgb2xyz"])(r, g, b);
    return Object(_xyz2lab__WEBPACK_IMPORTED_MODULE_1__["xyz2lab"])(xyz.x, xyz.y, xyz.z);
}
//# sourceMappingURL=rgb2lab.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/conversion/rgb2xyz.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/conversion/rgb2xyz.js ***!
  \*************************************************************/
/*! exports provided: rgb2xyz */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgb2xyz", function() { return rgb2xyz; });
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * rgb2xyz.ts - part of Image Quantization Library
 */
function correctGamma(n) {
    return n > 0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92;
}
function rgb2xyz(r, g, b) {
    // gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation
    r = correctGamma(r / 255);
    g = correctGamma(g / 255);
    b = correctGamma(b / 255);
    // Observer. = 2°, Illuminant = D65
    return {
        x: r * 0.4124 + g * 0.3576 + b * 0.1805,
        y: r * 0.2126 + g * 0.7152 + b * 0.0722,
        z: r * 0.0193 + g * 0.1192 + b * 0.9505,
    };
}
//# sourceMappingURL=rgb2xyz.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/conversion/xyz2lab.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/conversion/xyz2lab.js ***!
  \*************************************************************/
/*! exports provided: xyz2lab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xyz2lab", function() { return xyz2lab; });
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * xyz2lab.ts - part of Image Quantization Library
 */
const refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant= D65
const refY = 1.00000; // ref_Y = 100.000
const refZ = 1.08883; // ref_Z = 108.883
function pivot(n) {
    return n > 0.008856 ? Math.pow(n, 1 / 3) : (7.787 * n + 16 / 116);
}
function xyz2lab(x, y, z) {
    x = pivot(x / refX);
    y = pivot(y / refY);
    z = pivot(z / refZ);
    if ((116 * y) - 16 < 0)
        throw new Error('xxx');
    return {
        L: Math.max(0, (116 * y) - 16),
        a: 500 * (x - y),
        b: 200 * (y - z),
    };
}
//# sourceMappingURL=xyz2lab.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/conversion/xyz2rgb.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/conversion/xyz2rgb.js ***!
  \*************************************************************/
/*! exports provided: xyz2rgb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xyz2rgb", function() { return xyz2rgb; });
/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arithmetic */ "./node_modules/image-q/dist/esm/utils/arithmetic.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * xyz2rgb.ts - part of Image Quantization Library
 */

// gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation
function correctGamma(n) {
    return n > 0.0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - 0.055 : 12.92 * n;
}
function xyz2rgb(x, y, z) {
    // Observer. = 2°, Illuminant = D65
    const r = correctGamma(x * 3.2406 + y * -1.5372 + z * -0.4986);
    const g = correctGamma(x * -0.9689 + y * 1.8758 + z * 0.0415);
    const b = correctGamma(x * 0.0557 + y * -0.2040 + z * 1.0570);
    return {
        r: Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__["inRange0to255Rounded"])(r * 255),
        g: Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__["inRange0to255Rounded"])(g * 255),
        b: Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__["inRange0to255Rounded"])(b * 255),
    };
}
//# sourceMappingURL=xyz2rgb.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/distance/cie94.js":
/*!*********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/distance/cie94.js ***!
  \*********************************************************/
/*! exports provided: AbstractCIE94, CIE94Textiles, CIE94GraphicArts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractCIE94", function() { return AbstractCIE94; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CIE94Textiles", function() { return CIE94Textiles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CIE94GraphicArts", function() { return CIE94GraphicArts; });
/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ "./node_modules/image-q/dist/esm/distance/distanceCalculator.js");
/* harmony import */ var _conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conversion/rgb2lab */ "./node_modules/image-q/dist/esm/conversion/rgb2lab.js");
/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arithmetic */ "./node_modules/image-q/dist/esm/utils/arithmetic.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * cie94.ts - part of Image Quantization Library
 */



/**
 * CIE94 method of delta-e
 * http://en.wikipedia.org/wiki/Color_difference#CIE94
 */
class AbstractCIE94 extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__["AbstractDistanceCalculator"] {
    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {
        const lab1 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__["rgb2lab"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(r1 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(g1 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(b1 * this._whitePoint.b));
        const lab2 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__["rgb2lab"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(r2 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(g2 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(b2 * this._whitePoint.b));
        const dL = lab1.L - lab2.L;
        const dA = lab1.a - lab2.a;
        const dB = lab1.b - lab2.b;
        const c1 = Math.sqrt(lab1.a * lab1.a + lab1.b * lab1.b);
        const c2 = Math.sqrt(lab2.a * lab2.a + lab2.b * lab2.b);
        const dC = c1 - c2;
        let deltaH = dA * dA + dB * dB - dC * dC;
        deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);
        const dAlpha = (a2 - a1) * this._whitePoint.a * this._kA;
        // TODO: add alpha channel support
        return Math.sqrt(Math.pow(dL / this._Kl, 2) +
            Math.pow(dC / (1.0 + this._K1 * c1), 2) +
            Math.pow(deltaH / (1.0 + this._K2 * c1), 2) +
            Math.pow(dAlpha, 2));
    }
}
class CIE94Textiles extends AbstractCIE94 {
    _setDefaults() {
        this._Kl = 2.0;
        this._K1 = 0.048;
        this._K2 = 0.014;
        this._kA = 0.25 * 50 / 255;
    }
}
class CIE94GraphicArts extends AbstractCIE94 {
    _setDefaults() {
        this._Kl = 1.0;
        this._K1 = 0.045;
        this._K2 = 0.015;
        this._kA = 0.25 * 100 / 255;
    }
}
//# sourceMappingURL=cie94.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/distance/ciede2000.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/distance/ciede2000.js ***!
  \*************************************************************/
/*! exports provided: CIEDE2000 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CIEDE2000", function() { return CIEDE2000; });
/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ "./node_modules/image-q/dist/esm/distance/distanceCalculator.js");
/* harmony import */ var _conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conversion/rgb2lab */ "./node_modules/image-q/dist/esm/conversion/rgb2lab.js");
/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arithmetic */ "./node_modules/image-q/dist/esm/utils/arithmetic.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * ciede2000.ts - part of Image Quantization Library
 */



// tslint:disable:variable-name
// tslint:disable:naming-convention
/**
 * CIEDE2000 algorithm - Adapted from Sharma et al's MATLAB implementation at
 * http://www.ece.rochester.edu/~gsharma/ciede2000/
 */
class CIEDE2000 extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__["AbstractDistanceCalculator"] {
    _setDefaults() { }
    static _calculatehp(b, ap) {
        const hp = Math.atan2(b, ap);
        if (hp >= 0)
            return hp;
        return hp + CIEDE2000._deg360InRad;
    }
    static _calculateRT(ahp, aCp) {
        const aCp_to_7 = Math.pow(aCp, 7.0);
        const R_C = 2.0 * Math.sqrt(aCp_to_7 / (aCp_to_7 + CIEDE2000._pow25to7)); // 25^7
        const delta_theta = CIEDE2000._deg30InRad * Math.exp(-Math.pow((ahp - CIEDE2000._deg275InRad) / CIEDE2000._deg25InRad, 2.0));
        return -Math.sin(2.0 * delta_theta) * R_C;
    }
    static _calculateT(ahp) {
        return 1.0 - .17 * Math.cos(ahp - CIEDE2000._deg30InRad) + .24 * Math.cos(ahp * 2.0) + .32 * Math.cos(ahp * 3.0 + CIEDE2000._deg6InRad) - .2 * Math.cos(ahp * 4.0 - CIEDE2000._deg63InRad);
    }
    static _calculate_ahp(C1pC2p, h_bar, h1p, h2p) {
        const hpSum = h1p + h2p;
        if (C1pC2p === 0)
            return hpSum;
        if (h_bar <= CIEDE2000._deg180InRad)
            return hpSum / 2.0;
        if (hpSum < CIEDE2000._deg360InRad)
            return (hpSum + CIEDE2000._deg360InRad) / 2.0;
        return (hpSum - CIEDE2000._deg360InRad) / 2.0;
    }
    static _calculate_dHp(C1pC2p, h_bar, h2p, h1p) {
        let dhp;
        if (C1pC2p === 0) {
            dhp = 0;
        }
        else if (h_bar <= CIEDE2000._deg180InRad) {
            dhp = h2p - h1p;
        }
        else if (h2p <= h1p) {
            dhp = h2p - h1p + CIEDE2000._deg360InRad;
        }
        else {
            dhp = h2p - h1p - CIEDE2000._deg360InRad;
        }
        return 2.0 * Math.sqrt(C1pC2p) * Math.sin(dhp / 2.0);
    }
    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {
        const lab1 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__["rgb2lab"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(r1 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(g1 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(b1 * this._whitePoint.b));
        const lab2 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__["rgb2lab"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(r2 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(g2 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255"])(b2 * this._whitePoint.b));
        const dA = (a2 - a1) * this._whitePoint.a * CIEDE2000._kA;
        const dE2 = this.calculateRawInLab(lab1, lab2);
        return Math.sqrt(dE2 + dA * dA);
    }
    calculateRawInLab(Lab1, Lab2) {
        // Get L,a,b values for color 1
        const L1 = Lab1.L;
        const a1 = Lab1.a;
        const b1 = Lab1.b;
        // Get L,a,b values for color 2
        const L2 = Lab2.L;
        const a2 = Lab2.a;
        const b2 = Lab2.b;
        // Calculate Cprime1, Cprime2, Cabbar
        const C1 = Math.sqrt(a1 * a1 + b1 * b1);
        const C2 = Math.sqrt(a2 * a2 + b2 * b2);
        const pow_a_C1_C2_to_7 = Math.pow((C1 + C2) / 2.0, 7.0);
        const G = 0.5 * (1.0 - Math.sqrt(pow_a_C1_C2_to_7 / (pow_a_C1_C2_to_7 + CIEDE2000._pow25to7))); // 25^7
        const a1p = (1.0 + G) * a1;
        const a2p = (1.0 + G) * a2;
        const C1p = Math.sqrt(a1p * a1p + b1 * b1);
        const C2p = Math.sqrt(a2p * a2p + b2 * b2);
        const C1pC2p = C1p * C2p;
        // Angles in Degree.
        const h1p = CIEDE2000._calculatehp(b1, a1p);
        const h2p = CIEDE2000._calculatehp(b2, a2p);
        const h_bar = Math.abs(h1p - h2p);
        const dLp = L2 - L1;
        const dCp = C2p - C1p;
        const dHp = CIEDE2000._calculate_dHp(C1pC2p, h_bar, h2p, h1p);
        const ahp = CIEDE2000._calculate_ahp(C1pC2p, h_bar, h1p, h2p);
        const T = CIEDE2000._calculateT(ahp);
        const aCp = (C1p + C2p) / 2.0;
        const aLp_minus_50_square = Math.pow((L1 + L2) / 2.0 - 50.0, 2.0);
        const S_L = 1.0 + (.015 * aLp_minus_50_square) / Math.sqrt(20.0 + aLp_minus_50_square);
        const S_C = 1.0 + .045 * aCp;
        const S_H = 1.0 + .015 * T * aCp;
        const R_T = CIEDE2000._calculateRT(ahp, aCp);
        const dLpSL = dLp / S_L; // S_L * kL, where kL is 1.0
        const dCpSC = dCp / S_C; // S_C * kC, where kC is 1.0
        const dHpSH = dHp / S_H; // S_H * kH, where kH is 1.0
        return Math.pow(dLpSL, 2) + Math.pow(dCpSC, 2) + Math.pow(dHpSH, 2) + R_T * dCpSC * dHpSH;
    }
}
/**
 * Weight in distance: 0.25
 * Max DeltaE: 100
 * Max DeltaA: 255
 */
CIEDE2000._kA = 0.25 * 100 / 255;
CIEDE2000._pow25to7 = Math.pow(25, 7);
CIEDE2000._deg360InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["degrees2radians"])(360);
CIEDE2000._deg180InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["degrees2radians"])(180);
CIEDE2000._deg30InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["degrees2radians"])(30);
CIEDE2000._deg6InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["degrees2radians"])(6);
CIEDE2000._deg63InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["degrees2radians"])(63);
CIEDE2000._deg275InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["degrees2radians"])(275);
CIEDE2000._deg25InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["degrees2radians"])(25);
//# sourceMappingURL=ciede2000.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/distance/cmetric.js":
/*!***********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/distance/cmetric.js ***!
  \***********************************************************/
/*! exports provided: CMetric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CMetric", function() { return CMetric; });
/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ "./node_modules/image-q/dist/esm/distance/distanceCalculator.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * cmetric.ts - part of Image Quantization Library
 */

/**
 * TODO: Name it: http://www.compuphase.com/cmetric.htm
 */
class CMetric extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__["AbstractDistanceCalculator"] {
    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {
        const rmean = (r1 + r2) / 2 * this._whitePoint.r;
        const r = (r1 - r2) * this._whitePoint.r;
        const g = (g1 - g2) * this._whitePoint.g;
        const b = (b1 - b2) * this._whitePoint.b;
        const dE = ((((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8));
        const dA = (a2 - a1) * this._whitePoint.a;
        return Math.sqrt(dE + dA * dA);
    }
    _setDefaults() { }
}
//# sourceMappingURL=cmetric.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/distance/distanceCalculator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/distance/distanceCalculator.js ***!
  \**********************************************************************/
/*! exports provided: AbstractDistanceCalculator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractDistanceCalculator", function() { return AbstractDistanceCalculator; });
class AbstractDistanceCalculator {
    constructor() {
        this._setDefaults();
        // set default maximal color component deltas (255 - 0 = 255)
        this.setWhitePoint(255, 255, 255, 255);
    }
    setWhitePoint(r, g, b, a) {
        this._whitePoint = {
            r: (r > 0) ? 255 / r : 0,
            g: (g > 0) ? 255 / g : 0,
            b: (b > 0) ? 255 / b : 0,
            a: (a > 0) ? 255 / a : 0,
        };
        this._maxDistance = this.calculateRaw(r, g, b, a, 0, 0, 0, 0);
    }
    calculateNormalized(colorA, colorB) {
        return this.calculateRaw(colorA.r, colorA.g, colorA.b, colorA.a, colorB.r, colorB.g, colorB.b, colorB.a) / this._maxDistance;
    }
}
//# sourceMappingURL=distanceCalculator.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/distance/euclidean.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/distance/euclidean.js ***!
  \*************************************************************/
/*! exports provided: AbstractEuclidean, Euclidean, EuclideanBT709, EuclideanBT709NoAlpha */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractEuclidean", function() { return AbstractEuclidean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Euclidean", function() { return Euclidean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EuclideanBT709", function() { return EuclideanBT709; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EuclideanBT709NoAlpha", function() { return EuclideanBT709NoAlpha; });
/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ "./node_modules/image-q/dist/esm/distance/distanceCalculator.js");
/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/bt709 */ "./node_modules/image-q/dist/esm/constants/bt709.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * euclidean.ts - part of Image Quantization Library
 */


/**
 * Euclidean color distance
 */
class AbstractEuclidean extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__["AbstractDistanceCalculator"] {
    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {
        const dR = r2 - r1;
        const dG = g2 - g1;
        const dB = b2 - b1;
        const dA = a2 - a1;
        return Math.sqrt(this._kR * dR * dR + this._kG * dG * dG + this._kB * dB * dB + this._kA * dA * dA);
    }
}
class Euclidean extends AbstractEuclidean {
    _setDefaults() {
        this._kR = 1;
        this._kG = 1;
        this._kB = 1;
        this._kA = 1;
    }
}
/**
 * Euclidean color distance (RGBQuant modification w Alpha)
 */
class EuclideanBT709 extends AbstractEuclidean {
    _setDefaults() {
        this._kR = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__["Y"].RED;
        this._kG = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__["Y"].GREEN;
        this._kB = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__["Y"].BLUE;
        // TODO: what is the best coefficient below?
        this._kA = 1;
    }
}
/**
 * Euclidean color distance (RGBQuant modification w/o Alpha)
 */
class EuclideanBT709NoAlpha extends AbstractEuclidean {
    _setDefaults() {
        this._kR = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__["Y"].RED;
        this._kG = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__["Y"].GREEN;
        this._kB = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__["Y"].BLUE;
        this._kA = 0;
    }
}
//# sourceMappingURL=euclidean.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/distance/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/distance/index.js ***!
  \*********************************************************/
/*! exports provided: AbstractDistanceCalculator, CIE94Textiles, CIE94GraphicArts, CIEDE2000, CMetric, AbstractEuclidean, Euclidean, EuclideanBT709NoAlpha, EuclideanBT709, AbstractManhattan, Manhattan, ManhattanBT709, ManhattanNommyde, PNGQuant */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ "./node_modules/image-q/dist/esm/distance/distanceCalculator.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AbstractDistanceCalculator", function() { return _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__["AbstractDistanceCalculator"]; });

/* harmony import */ var _cie94__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cie94 */ "./node_modules/image-q/dist/esm/distance/cie94.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CIE94Textiles", function() { return _cie94__WEBPACK_IMPORTED_MODULE_1__["CIE94Textiles"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CIE94GraphicArts", function() { return _cie94__WEBPACK_IMPORTED_MODULE_1__["CIE94GraphicArts"]; });

/* harmony import */ var _ciede2000__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ciede2000 */ "./node_modules/image-q/dist/esm/distance/ciede2000.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CIEDE2000", function() { return _ciede2000__WEBPACK_IMPORTED_MODULE_2__["CIEDE2000"]; });

/* harmony import */ var _cmetric__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cmetric */ "./node_modules/image-q/dist/esm/distance/cmetric.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CMetric", function() { return _cmetric__WEBPACK_IMPORTED_MODULE_3__["CMetric"]; });

/* harmony import */ var _euclidean__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./euclidean */ "./node_modules/image-q/dist/esm/distance/euclidean.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AbstractEuclidean", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__["AbstractEuclidean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Euclidean", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__["Euclidean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EuclideanBT709NoAlpha", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__["EuclideanBT709NoAlpha"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EuclideanBT709", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__["EuclideanBT709"]; });

/* harmony import */ var _manhattan__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./manhattan */ "./node_modules/image-q/dist/esm/distance/manhattan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AbstractManhattan", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__["AbstractManhattan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Manhattan", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__["Manhattan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ManhattanBT709", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__["ManhattanBT709"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ManhattanNommyde", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__["ManhattanNommyde"]; });

/* harmony import */ var _pngQuant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pngQuant */ "./node_modules/image-q/dist/esm/distance/pngQuant.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PNGQuant", function() { return _pngQuant__WEBPACK_IMPORTED_MODULE_6__["PNGQuant"]; });

/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * iq.ts - Image Quantization Library
 */







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/distance/manhattan.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/distance/manhattan.js ***!
  \*************************************************************/
/*! exports provided: AbstractManhattan, Manhattan, ManhattanNommyde, ManhattanBT709 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractManhattan", function() { return AbstractManhattan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Manhattan", function() { return Manhattan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManhattanNommyde", function() { return ManhattanNommyde; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManhattanBT709", function() { return ManhattanBT709; });
/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ "./node_modules/image-q/dist/esm/distance/distanceCalculator.js");
/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/bt709 */ "./node_modules/image-q/dist/esm/constants/bt709.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * manhattanNeuQuant.ts - part of Image Quantization Library
 */


/**
 * Manhattan distance (NeuQuant modification) - w/o sRGB coefficients
 */
class AbstractManhattan extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__["AbstractDistanceCalculator"] {
    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {
        let dR = r2 - r1;
        let dG = g2 - g1;
        let dB = b2 - b1;
        let dA = a2 - a1;
        if (dR < 0)
            dR = 0 - dR;
        if (dG < 0)
            dG = 0 - dG;
        if (dB < 0)
            dB = 0 - dB;
        if (dA < 0)
            dA = 0 - dA;
        return this._kR * dR + this._kG * dG + this._kB * dB + this._kA * dA;
    }
}
class Manhattan extends AbstractManhattan {
    _setDefaults() {
        this._kR = 1;
        this._kG = 1;
        this._kB = 1;
        this._kA = 1;
    }
}
/**
 * Manhattan distance (Nommyde modification)
 * https://github.com/igor-bezkrovny/image-quantization/issues/4#issuecomment-235155320
 */
class ManhattanNommyde extends AbstractManhattan {
    _setDefaults() {
        this._kR = 0.4984;
        this._kG = 0.8625;
        this._kB = 0.2979;
        // TODO: what is the best coefficient below?
        this._kA = 1;
    }
}
/**
 * Manhattan distance (sRGB coefficients)
 */
class ManhattanBT709 extends AbstractManhattan {
    _setDefaults() {
        this._kR = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__["Y"].RED;
        this._kG = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__["Y"].GREEN;
        this._kB = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__["Y"].BLUE;
        // TODO: what is the best coefficient below?
        this._kA = 1;
    }
}
//# sourceMappingURL=manhattan.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/distance/pngQuant.js":
/*!************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/distance/pngQuant.js ***!
  \************************************************************/
/*! exports provided: PNGQuant */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PNGQuant", function() { return PNGQuant; });
/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ "./node_modules/image-q/dist/esm/distance/distanceCalculator.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * pngQuant.ts - part of Image Quantization Library
 */

/**
 * TODO: check quality of this distance equation
 * TODO: ask author for usage rights
 * taken from:
 * {@link http://stackoverflow.com/questions/4754506/color-similarity-distance-in-rgba-color-space/8796867#8796867}
 * {@link https://github.com/pornel/pngquant/blob/cc39b47799a7ff2ef17b529f9415ff6e6b213b8f/lib/pam.h#L148}
 */
class PNGQuant extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__["AbstractDistanceCalculator"] {
    /**
     * Author's comments
     * px_b.rgb = px.rgb + 0*(1-px.a) // blend px on black
     * px_b.a   = px.a   + 1*(1-px.a)
     * px_w.rgb = px.rgb + 1*(1-px.a) // blend px on white
     * px_w.a   = px.a   + 1*(1-px.a)
     *
     * px_b.rgb = px.rgb              // difference same as in opaque RGB
     * px_b.a   = 1
     * px_w.rgb = px.rgb - px.a       // difference simplifies to formula below
     * px_w.a   = 1
     *
     * (px.rgb - px.a) - (py.rgb - py.a)
     * (px.rgb - py.rgb) + (py.a - px.a)
     *
     */
    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {
        const alphas = (a2 - a1) * this._whitePoint.a;
        return this._colordifferenceCh(r1 * this._whitePoint.r, r2 * this._whitePoint.r, alphas) +
            this._colordifferenceCh(g1 * this._whitePoint.g, g2 * this._whitePoint.g, alphas) +
            this._colordifferenceCh(b1 * this._whitePoint.b, b2 * this._whitePoint.b, alphas);
    }
    _colordifferenceCh(x, y, alphas) {
        // maximum of channel blended on white, and blended on black
        // premultiplied alpha and backgrounds 0/1 shorten the formula
        const black = x - y;
        const white = black + alphas;
        return black * black + white * white;
    }
    _setDefaults() { }
}
//# sourceMappingURL=pngQuant.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/image-q.js":
/*!**************************************************!*\
  !*** ./node_modules/image-q/dist/esm/image-q.js ***!
  \**************************************************/
/*! exports provided: buildPalette, buildPaletteSync, applyPalette, applyPaletteSync, constants, conversion, distance, palette, image, quality, utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/image-q/dist/esm/constants/index.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "constants", function() { return _constants__WEBPACK_IMPORTED_MODULE_0__; });
/* harmony import */ var _conversion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conversion */ "./node_modules/image-q/dist/esm/conversion/index.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "conversion", function() { return _conversion__WEBPACK_IMPORTED_MODULE_1__; });
/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./distance */ "./node_modules/image-q/dist/esm/distance/index.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return _distance__WEBPACK_IMPORTED_MODULE_2__; });
/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./palette */ "./node_modules/image-q/dist/esm/palette/index.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "palette", function() { return _palette__WEBPACK_IMPORTED_MODULE_3__; });
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./image */ "./node_modules/image-q/dist/esm/image/index.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "image", function() { return _image__WEBPACK_IMPORTED_MODULE_4__; });
/* harmony import */ var _quality__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./quality */ "./node_modules/image-q/dist/esm/quality/index.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "quality", function() { return _quality__WEBPACK_IMPORTED_MODULE_5__; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ "./node_modules/image-q/dist/esm/utils/index.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "utils", function() { return _utils__WEBPACK_IMPORTED_MODULE_6__; });
/* harmony import */ var _basicAPI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./basicAPI */ "./node_modules/image-q/dist/esm/basicAPI.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buildPalette", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__["buildPalette"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buildPaletteSync", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__["buildPaletteSync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyPalette", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__["applyPalette"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyPaletteSync", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__["applyPaletteSync"]; });

/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * iq.ts - Image Quantization Library
 */









//# sourceMappingURL=image-q.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/image/array.js":
/*!******************************************************!*\
  !*** ./node_modules/image-q/dist/esm/image/array.js ***!
  \******************************************************/
/*! exports provided: ErrorDiffusionArrayKernel, ErrorDiffusionArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorDiffusionArrayKernel", function() { return ErrorDiffusionArrayKernel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorDiffusionArray", function() { return ErrorDiffusionArray; });
/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ "./node_modules/image-q/dist/esm/image/imageQuantizer.js");
/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/point */ "./node_modules/image-q/dist/esm/utils/point.js");
/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arithmetic */ "./node_modules/image-q/dist/esm/utils/arithmetic.js");
/* harmony import */ var _utils_progressTracker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/progressTracker */ "./node_modules/image-q/dist/esm/utils/progressTracker.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * ditherErrorDiffusionArray.ts - part of Image Quantization Library
 */




// TODO: is it the best name for this enum "kernel"?
var ErrorDiffusionArrayKernel;
(function (ErrorDiffusionArrayKernel) {
    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel["FloydSteinberg"] = 0] = "FloydSteinberg";
    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel["FalseFloydSteinberg"] = 1] = "FalseFloydSteinberg";
    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel["Stucki"] = 2] = "Stucki";
    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel["Atkinson"] = 3] = "Atkinson";
    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel["Jarvis"] = 4] = "Jarvis";
    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel["Burkes"] = 5] = "Burkes";
    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel["Sierra"] = 6] = "Sierra";
    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel["TwoSierra"] = 7] = "TwoSierra";
    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel["SierraLite"] = 8] = "SierraLite";
})(ErrorDiffusionArrayKernel || (ErrorDiffusionArrayKernel = {}));
// http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/
class ErrorDiffusionArray extends _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__["AbstractImageQuantizer"] {
    constructor(colorDistanceCalculator, kernel, serpentine = true, minimumColorDistanceToDither = 0, calculateErrorLikeGIMP = false) {
        super();
        this._setKernel(kernel);
        this._distance = colorDistanceCalculator;
        this._minColorDistance = minimumColorDistanceToDither;
        this._serpentine = serpentine;
        this._calculateErrorLikeGIMP = calculateErrorLikeGIMP;
    }
    /**
     * adapted from http://jsbin.com/iXofIji/2/edit by PAEz
     * fixed version. it doesn't use image pixels as error storage, also it doesn't have 0.3 + 0.3 + 0.3 + 0.3 = 0 error
     * Mutates pointContainer
     */
    *quantize(pointContainer, palette) {
        const pointArray = pointContainer.getPointArray();
        const originalPoint = new _utils_point__WEBPACK_IMPORTED_MODULE_1__["Point"]();
        const width = pointContainer.getWidth();
        const height = pointContainer.getHeight();
        const errorLines = [];
        let dir = 1;
        let maxErrorLines = 1;
        // initial error lines (number is taken from dithering kernel)
        for (const kernel of this._kernel) {
            const kernelErrorLines = kernel[2] + 1;
            if (maxErrorLines < kernelErrorLines)
                maxErrorLines = kernelErrorLines;
        }
        for (let i = 0; i < maxErrorLines; i++) {
            this._fillErrorLine(errorLines[i] = [], width);
        }
        const tracker = new _utils_progressTracker__WEBPACK_IMPORTED_MODULE_3__["ProgressTracker"](height, 99);
        for (let y = 0; y < height; y++) {
            if (tracker.shouldNotify(y)) {
                yield {
                    progress: tracker.progress,
                };
            }
            // always serpentine
            if (this._serpentine)
                dir = dir * -1;
            const lni = y * width;
            const xStart = dir === 1 ? 0 : width - 1;
            const xEnd = dir === 1 ? width : -1;
            // cyclic shift with erasing
            this._fillErrorLine(errorLines[0], width);
            // TODO: why it is needed to cast types here?
            errorLines.push(errorLines.shift());
            const errorLine = errorLines[0];
            for (let x = xStart, idx = lni + xStart; x !== xEnd; x += dir, idx += dir) {
                // Image pixel
                const point = pointArray[idx];
                // originalPoint = new Utils.Point(),
                const error = errorLine[x];
                originalPoint.from(point);
                const correctedPoint = _utils_point__WEBPACK_IMPORTED_MODULE_1__["Point"].createByRGBA(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255Rounded"])(point.r + error[0]), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255Rounded"])(point.g + error[1]), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255Rounded"])(point.b + error[2]), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__["inRange0to255Rounded"])(point.a + error[3]));
                // Reduced pixel
                const palettePoint = palette.getNearestColor(this._distance, correctedPoint);
                point.from(palettePoint);
                // dithering strength
                if (this._minColorDistance) {
                    const dist = this._distance.calculateNormalized(point, palettePoint);
                    if (dist < this._minColorDistance)
                        continue;
                }
                // Component distance
                let er;
                let eg;
                let eb;
                let ea;
                if (this._calculateErrorLikeGIMP) {
                    er = correctedPoint.r - palettePoint.r;
                    eg = correctedPoint.g - palettePoint.g;
                    eb = correctedPoint.b - palettePoint.b;
                    ea = correctedPoint.a - palettePoint.a;
                }
                else {
                    er = originalPoint.r - palettePoint.r;
                    eg = originalPoint.g - palettePoint.g;
                    eb = originalPoint.b - palettePoint.b;
                    ea = originalPoint.a - palettePoint.a;
                }
                const dStart = dir === 1 ? 0 : this._kernel.length - 1;
                const dEnd = dir === 1 ? this._kernel.length : -1;
                for (let i = dStart; i !== dEnd; i += dir) {
                    const x1 = this._kernel[i][1] * dir;
                    const y1 = this._kernel[i][2];
                    if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {
                        const d = this._kernel[i][0];
                        const e = errorLines[y1][x1 + x];
                        e[0] = e[0] + er * d;
                        e[1] = e[1] + eg * d;
                        e[2] = e[2] + eb * d;
                        e[3] = e[3] + ea * d;
                    }
                }
            }
        }
        yield {
            pointContainer,
            progress: 100,
        };
    }
    _fillErrorLine(errorLine, width) {
        // shrink
        if (errorLine.length > width) {
            errorLine.length = width;
        }
        // reuse existing arrays
        const l = errorLine.length;
        for (let i = 0; i < l; i++) {
            const error = errorLine[i];
            error[0] = error[1] = error[2] = error[3] = 0;
        }
        // create missing arrays
        for (let i = l; i < width; i++) {
            errorLine[i] = [0.0, 0.0, 0.0, 0.0];
        }
    }
    _setKernel(kernel) {
        switch (kernel) {
            case ErrorDiffusionArrayKernel.FloydSteinberg:
                this._kernel = [
                    [7 / 16, 1, 0],
                    [3 / 16, -1, 1],
                    [5 / 16, 0, 1],
                    [1 / 16, 1, 1],
                ];
                break;
            case ErrorDiffusionArrayKernel.FalseFloydSteinberg:
                this._kernel = [
                    [3 / 8, 1, 0],
                    [3 / 8, 0, 1],
                    [2 / 8, 1, 1],
                ];
                break;
            case ErrorDiffusionArrayKernel.Stucki:
                this._kernel = [
                    [8 / 42, 1, 0],
                    [4 / 42, 2, 0],
                    [2 / 42, -2, 1],
                    [4 / 42, -1, 1],
                    [8 / 42, 0, 1],
                    [4 / 42, 1, 1],
                    [2 / 42, 2, 1],
                    [1 / 42, -2, 2],
                    [2 / 42, -1, 2],
                    [4 / 42, 0, 2],
                    [2 / 42, 1, 2],
                    [1 / 42, 2, 2],
                ];
                break;
            case ErrorDiffusionArrayKernel.Atkinson:
                this._kernel = [
                    [1 / 8, 1, 0],
                    [1 / 8, 2, 0],
                    [1 / 8, -1, 1],
                    [1 / 8, 0, 1],
                    [1 / 8, 1, 1],
                    [1 / 8, 0, 2],
                ];
                break;
            case ErrorDiffusionArrayKernel.Jarvis:
                this._kernel = [
                    [7 / 48, 1, 0],
                    [5 / 48, 2, 0],
                    [3 / 48, -2, 1],
                    [5 / 48, -1, 1],
                    [7 / 48, 0, 1],
                    [5 / 48, 1, 1],
                    [3 / 48, 2, 1],
                    [1 / 48, -2, 2],
                    [3 / 48, -1, 2],
                    [5 / 48, 0, 2],
                    [3 / 48, 1, 2],
                    [1 / 48, 2, 2],
                ];
                break;
            case ErrorDiffusionArrayKernel.Burkes:
                this._kernel = [
                    [8 / 32, 1, 0],
                    [4 / 32, 2, 0],
                    [2 / 32, -2, 1],
                    [4 / 32, -1, 1],
                    [8 / 32, 0, 1],
                    [4 / 32, 1, 1],
                    [2 / 32, 2, 1],
                ];
                break;
            case ErrorDiffusionArrayKernel.Sierra:
                this._kernel = [
                    [5 / 32, 1, 0],
                    [3 / 32, 2, 0],
                    [2 / 32, -2, 1],
                    [4 / 32, -1, 1],
                    [5 / 32, 0, 1],
                    [4 / 32, 1, 1],
                    [2 / 32, 2, 1],
                    [2 / 32, -1, 2],
                    [3 / 32, 0, 2],
                    [2 / 32, 1, 2],
                ];
                break;
            case ErrorDiffusionArrayKernel.TwoSierra:
                this._kernel = [
                    [4 / 16, 1, 0],
                    [3 / 16, 2, 0],
                    [1 / 16, -2, 1],
                    [2 / 16, -1, 1],
                    [3 / 16, 0, 1],
                    [2 / 16, 1, 1],
                    [1 / 16, 2, 1],
                ];
                break;
            case ErrorDiffusionArrayKernel.SierraLite:
                this._kernel = [
                    [2 / 4, 1, 0],
                    [1 / 4, -1, 1],
                    [1 / 4, 0, 1],
                ];
                break;
            default:
                throw new Error('ErrorDiffusionArray: unknown kernel = ' + kernel);
        }
    }
}
//# sourceMappingURL=array.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/image/imageQuantizer.js":
/*!***************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/image/imageQuantizer.js ***!
  \***************************************************************/
/*! exports provided: AbstractImageQuantizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractImageQuantizer", function() { return AbstractImageQuantizer; });
class AbstractImageQuantizer {
    quantizeSync(pointContainer, palette) {
        for (const value of this.quantize(pointContainer, palette)) {
            if (value.pointContainer) {
                return value.pointContainer;
            }
        }
        throw new Error('unreachable');
    }
}
//# sourceMappingURL=imageQuantizer.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/image/index.js":
/*!******************************************************!*\
  !*** ./node_modules/image-q/dist/esm/image/index.js ***!
  \******************************************************/
/*! exports provided: AbstractImageQuantizer, NearestColor, ErrorDiffusionArray, ErrorDiffusionArrayKernel, ErrorDiffusionRiemersma */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ "./node_modules/image-q/dist/esm/image/imageQuantizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AbstractImageQuantizer", function() { return _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__["AbstractImageQuantizer"]; });

/* harmony import */ var _nearestColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nearestColor */ "./node_modules/image-q/dist/esm/image/nearestColor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NearestColor", function() { return _nearestColor__WEBPACK_IMPORTED_MODULE_1__["NearestColor"]; });

/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./array */ "./node_modules/image-q/dist/esm/image/array.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorDiffusionArray", function() { return _array__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorDiffusionArrayKernel", function() { return _array__WEBPACK_IMPORTED_MODULE_2__["ErrorDiffusionArrayKernel"]; });

/* harmony import */ var _riemersma__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./riemersma */ "./node_modules/image-q/dist/esm/image/riemersma.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorDiffusionRiemersma", function() { return _riemersma__WEBPACK_IMPORTED_MODULE_3__["ErrorDiffusionRiemersma"]; });

/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * iq.ts - Image Quantization Library
 */




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/image/nearestColor.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/image/nearestColor.js ***!
  \*************************************************************/
/*! exports provided: NearestColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestColor", function() { return NearestColor; });
/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ "./node_modules/image-q/dist/esm/image/imageQuantizer.js");
/* harmony import */ var _utils_progressTracker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/progressTracker */ "./node_modules/image-q/dist/esm/utils/progressTracker.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * nearestColor.ts - part of Image Quantization Library
 */


class NearestColor extends _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__["AbstractImageQuantizer"] {
    constructor(colorDistanceCalculator) {
        super();
        this._distance = colorDistanceCalculator;
    }
    /**
     * Mutates pointContainer
     */
    *quantize(pointContainer, palette) {
        const pointArray = pointContainer.getPointArray();
        const width = pointContainer.getWidth();
        const height = pointContainer.getHeight();
        const tracker = new _utils_progressTracker__WEBPACK_IMPORTED_MODULE_1__["ProgressTracker"](height, 99);
        for (let y = 0; y < height; y++) {
            if (tracker.shouldNotify(y)) {
                yield {
                    progress: tracker.progress,
                };
            }
            for (let x = 0, idx = y * width; x < width; x++, idx++) {
                // Image pixel
                const point = pointArray[idx];
                // Reduced pixel
                point.from(palette.getNearestColor(this._distance, point));
            }
        }
        yield {
            pointContainer,
            progress: 100,
        };
    }
}
//# sourceMappingURL=nearestColor.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/image/riemersma.js":
/*!**********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/image/riemersma.js ***!
  \**********************************************************/
/*! exports provided: ErrorDiffusionRiemersma */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorDiffusionRiemersma", function() { return ErrorDiffusionRiemersma; });
/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ "./node_modules/image-q/dist/esm/image/imageQuantizer.js");
/* harmony import */ var _spaceFillingCurves_hilbertCurve__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spaceFillingCurves/hilbertCurve */ "./node_modules/image-q/dist/esm/image/spaceFillingCurves/hilbertCurve.js");
/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/point */ "./node_modules/image-q/dist/esm/utils/point.js");
/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/arithmetic */ "./node_modules/image-q/dist/esm/utils/arithmetic.js");
/**
 * @preserve
 * MIT License
 *
 * Copyright 2015-2018 Igor Bezkrovnyi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * riemersma.ts - part of Image Quantization Library
 */




class ErrorDiffusionRiemersma extends _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__["AbstractImageQuantizer"] {
    constructor(colorDistanceCalculator, errorQueueSize = 16, errorPropagation = 1) {
        super();
        this._distance = colorDistanceCalculator;
        this._errorQueueSize = errorQueueSize;
        this._weights = ErrorDiffusionRiemersma._createWeights(errorPropagation, errorQueueSize);
    }
    /**
     * Mutates pointContainer
     */
    *quantize(pointContainer, palette) {
        const pointArray = pointContainer.getPointArray();
        const width = pointContainer.getWidth();
        const height = pointContainer.getHeight();
        const errorQueue = [];
        let head = 0;
        for (let i = 0; i < this._errorQueueSize; i++) {
            errorQueue[i] = { r: 0, g: 0, b: 0, a: 0 };
        }
        yield* Object(_spaceFillingCurves_hilbertCurve__WEBPACK_IMPORTED_MODULE_1__["hilbertCurve"])(width, height, (x, y) => {
            const p = pointArray[x + y * width];
            let r = p.r;
            let g = p.g;
            let b = p.b;
            let a = p.a;
            for (let i = 0; i < this._errorQueueSize; i++) {
                const weight = this._weights[i];
                const e = errorQueue[(i + head) % this._errorQueueSize];
                r += e.r * weight;
                g += e.g * weight;
                b += e.b * weight;
                a += e.a * weight;
            }
            const correctedPoint = _utils_point__WEBPACK_IMPORTED_MODULE_2__["Point"].createByRGBA(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__["inRange0to255Rounded"])(r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__["inRange0to255Rounded"])(g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__["inRange0to255Rounded"])(b), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__["inRange0to255Rounded"])(a));
            const quantizedPoint = palette.getNearestColor(this._distance, correctedPoint);
            // update head and calculate tail
            head = (head + 1) % this._errorQueueSize;
            const tail = (head + this._errorQueueSize - 1) % this._errorQueueSize;
            // update error with new value
            errorQueue[tail].r = p.r - quantizedPoint.r;
            errorQueue[tail].g = p.g - quantizedPoint.g;
            errorQueue[tail].b = p.b - quantizedPoint.b;
            errorQueue[tail].a = p.a - quantizedPoint.a;
            // update point
            p.from(quantizedPoint);
        });
        yield {
            pointContainer,
            progress: 100,
        };
    }
    static _createWeights(errorPropagation, errorQueueSize) {
        const weights = [];
        const multiplier = Math.exp(Math.log(errorQueueSize) / (errorQueueSize - 1));
        for (let i = 0, next = 1; i < errorQueueSize; i++) {
            weights[i] = (((next + 0.5) | 0) / errorQueueSize) * errorPropagation;
            next *= multiplier;
        }
        return weights;
    }
}
//# sourceMappingURL=riemersma.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/image/spaceFillingCurves/hilbertCurve.js":
/*!********************************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/image/spaceFillingCurves/hilbertCurve.js ***!
  \********************************************************************************/
/*! exports provided: hilbertCurve */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hilbertCurve", function() { return hilbertCurve; });
/* harmony import */ var _utils_progressTracker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/progressTracker */ "./node_modules/image-q/dist/esm/utils/progressTracker.js");

var Direction;
(function (Direction) {
    Direction[Direction["NONE"] = 0] = "NONE";
    Direction[Direction["UP"] = 1] = "UP";
    Direction[Direction["LEFT"] = 2] = "LEFT";
    Direction[Direction["RIGHT"] = 3] = "RIGHT";
    Direction[Direction["DOWN"] = 4] = "DOWN";
})(Direction || (Direction = {}));
function* hilbertCurve(width, height, callback) {
    const maxBound = Math.max(width, height);
    const level = Math.floor(Math.log(maxBound) / Math.log(2) + 1);
    const tracker = new _utils_progressTracker__WEBPACK_IMPORTED_MODULE_0__["ProgressTracker"](width * height, 99);
    const data = {
        width,
        height,
        level,
        callback,
        tracker,
        index: 0,
        x: 0,
        y: 0,
    };
    yield* walkHilbert(data, Direction.UP);
    visit(data, Direction.NONE);
}
function* walkHilbert(data, direction) {
    if (data.level < 1)
        return;
    if (data.tracker.shouldNotify(data.index))
        yield { progress: data.tracker.progress };
    data.level--;
    switch (direction) {
        case Direction.LEFT:
            yield* walkHilbert(data, Direction.UP);
            visit(data, Direction.RIGHT);
            yield* walkHilbert(data, Direction.LEFT);
            visit(data, Direction.DOWN);
            yield* walkHilbert(data, Direction.LEFT);
            visit(data, Direction.LEFT);
            yield* walkHilbert(data, Direction.DOWN);
            break;
        case Direction.RIGHT:
            yield* walkHilbert(data, Direction.DOWN);
            visit(data, Direction.LEFT);
            yield* walkHilbert(data, Direction.RIGHT);
            visit(data, Direction.UP);
            yield* walkHilbert(data, Direction.RIGHT);
            visit(data, Direction.RIGHT);
            yield* walkHilbert(data, Direction.UP);
            break;
        case Direction.UP:
            yield* walkHilbert(data, Direction.LEFT);
            visit(data, Direction.DOWN);
            yield* walkHilbert(data, Direction.UP);
            visit(data, Direction.RIGHT);
            yield* walkHilbert(data, Direction.UP);
            visit(data, Direction.UP);
            yield* walkHilbert(data, Direction.RIGHT);
            break;
        case Direction.DOWN:
            yield* walkHilbert(data, Direction.RIGHT);
            visit(data, Direction.UP);
            yield* walkHilbert(data, Direction.DOWN);
            visit(data, Direction.LEFT);
            yield* walkHilbert(data, Direction.DOWN);
            visit(data, Direction.DOWN);
            yield* walkHilbert(data, Direction.LEFT);
            break;
        default:
            break;
    }
    data.level++;
}
function visit(data, direction) {
    if (data.x >= 0 && data.x < data.width && data.y >= 0 && data.y < data.height) {
        data.callback(data.x, data.y);
        data.index++;
    }
    switch (direction) {
        case Direction.LEFT:
            data.x--;
            break;
        case Direction.RIGHT:
            data.x++;
            break;
        case Direction.UP:
            data.y--;
            break;
        case Direction.DOWN:
            data.y++;
            break;
    }
}
//# sourceMappingURL=hilbertCurve.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/palette/index.js":
/*!********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/palette/index.js ***!
  \********************************************************/
/*! exports provided: AbstractPaletteQuantizer, NeuQuant, NeuQuantFloat, RGBQuant, ColorHistogram, WuQuant, WuColorCube */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paletteQuantizer */ "./node_modules/image-q/dist/esm/palette/paletteQuantizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AbstractPaletteQuantizer", function() { return _paletteQuantizer__WEBPACK_IMPORTED_MODULE_0__["AbstractPaletteQuantizer"]; });

/* harmony import */ var _neuquant_neuquant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./neuquant/neuquant */ "./node_modules/image-q/dist/esm/palette/neuquant/neuquant.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NeuQuant", function() { return _neuquant_neuquant__WEBPACK_IMPORTED_MODULE_1__["NeuQuant"]; });

/* harmony import */ var _neuquant_neuquantFloat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./neuquant/neuquantFloat */ "./node_modules/image-q/dist/esm/palette/neuquant/neuquantFloat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NeuQuantFloat", function() { return _neuquant_neuquantFloat__WEBPACK_IMPORTED_MODULE_2__["NeuQuantFloat"]; });

/* harmony import */ var _rgbquant_rgbquant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rgbquant/rgbquant */ "./node_modules/image-q/dist/esm/palette/rgbquant/rgbquant.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RGBQuant", function() { return _rgbquant_rgbquant__WEBPACK_IMPORTED_MODULE_3__["RGBQuant"]; });

/* harmony import */ var _rgbquant_colorHistogram__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rgbquant/colorHistogram */ "./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorHistogram", function() { return _rgbquant_colorHistogram__WEBPACK_IMPORTED_MODULE_4__["ColorHistogram"]; });

/* harmony import */ var _wu_wuQuant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wu/wuQuant */ "./node_modules/image-q/dist/esm/palette/wu/wuQuant.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WuQuant", function() { return _wu_wuQuant__WEBPACK_IMPORTED_MODULE_5__["WuQuant"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WuColorCube", function() { return _wu_wuQuant__WEBPACK_IMPORTED_MODULE_5__["WuColorCube"]; });

/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * iq.ts - Image Quantization Library
 */






//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/palette/neuquant/neuquant.js":
/*!********************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/palette/neuquant/neuquant.js ***!
  \********************************************************************/
/*! exports provided: NeuQuant */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeuQuant", function() { return NeuQuant; });
/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ "./node_modules/image-q/dist/esm/utils/palette.js");
/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ "./node_modules/image-q/dist/esm/utils/point.js");
/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../paletteQuantizer */ "./node_modules/image-q/dist/esm/palette/paletteQuantizer.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ "./node_modules/image-q/dist/esm/utils/index.js");
/*
 * NeuQuant Neural-Net Quantization Algorithm
 * ------------------------------------------
 *
 * Copyright (c) 1994 Anthony Dekker
 *
 * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See
 * "Kohonen neural networks for optimal colour quantization" in "Network:
 * Computation in Neural Systems" Vol. 5 (1994) pp 351-367. for a discussion of
 * the algorithm.
 *
 * Any party obtaining a copy of these files from the author, directly or
 * indirectly, is granted, free of charge, a full and unrestricted irrevocable,
 * world-wide, paid up, royalty-free, nonexclusive right and license to deal in
 * this software and documentation files (the "Software"), including without
 * limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons who
 * receive copies from any such party to do so, with the only requirement being
 * that this copyright notice remain intact.
 */
/**
 * @preserve TypeScript port:
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * neuquant.ts - part of Image Quantization Library
 */




// bias for colour values
const networkBiasShift = 3;
class Neuron {
    constructor(defaultValue) {
        this.r = this.g = this.b = this.a = defaultValue;
    }
    /**
     * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)
     * @example
     * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);
     */
    toPoint() {
        return _utils_point__WEBPACK_IMPORTED_MODULE_1__["Point"].createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);
    }
    subtract(r, g, b, a) {
        this.r -= r | 0;
        this.g -= g | 0;
        this.b -= b | 0;
        this.a -= a | 0;
    }
}
class NeuQuant extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__["AbstractPaletteQuantizer"] {
    constructor(colorDistanceCalculator, colors = 256) {
        super();
        this._distance = colorDistanceCalculator;
        this._pointArray = [];
        this._sampleFactor = 1;
        this._networkSize = colors;
        this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);
    }
    sample(pointContainer) {
        this._pointArray = this._pointArray.concat(pointContainer.getPointArray());
    }
    *quantize() {
        this._init();
        yield* this._learn();
        yield {
            palette: this._buildPalette(),
            progress: 100,
        };
    }
    _init() {
        this._freq = [];
        this._bias = [];
        this._radPower = [];
        this._network = [];
        for (let i = 0; i < this._networkSize; i++) {
            this._network[i] = new Neuron((i << (networkBiasShift + 8)) / this._networkSize | 0);
            // 1/this._networkSize
            this._freq[i] = NeuQuant._initialBias / this._networkSize | 0;
            this._bias[i] = 0;
        }
    }
    /**
     * Main Learning Loop
     */
    *_learn() {
        let sampleFactor = this._sampleFactor;
        const pointsNumber = this._pointArray.length;
        if (pointsNumber < NeuQuant._minpicturebytes)
            sampleFactor = 1;
        const alphadec = 30 + (sampleFactor - 1) / 3 | 0;
        const pointsToSample = pointsNumber / sampleFactor | 0;
        let delta = pointsToSample / NeuQuant._nCycles | 0;
        let alpha = NeuQuant._initAlpha;
        let radius = (this._networkSize >> 3) * NeuQuant._radiusBias;
        let rad = radius >> NeuQuant._radiusBiasShift;
        if (rad <= 1)
            rad = 0;
        for (let i = 0; i < rad; i++) {
            this._radPower[i] = alpha * (((rad * rad - i * i) * NeuQuant._radBias) / (rad * rad)) >>> 0;
        }
        let step;
        if (pointsNumber < NeuQuant._minpicturebytes) {
            step = 1;
        }
        else if (pointsNumber % NeuQuant._prime1 !== 0) {
            step = NeuQuant._prime1;
        }
        else if ((pointsNumber % NeuQuant._prime2) !== 0) {
            step = NeuQuant._prime2;
        }
        else if ((pointsNumber % NeuQuant._prime3) !== 0) {
            step = NeuQuant._prime3;
        }
        else {
            step = NeuQuant._prime4;
        }
        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_3__["ProgressTracker"](pointsToSample, 99);
        for (let i = 0, pointIndex = 0; i < pointsToSample;) {
            if (tracker.shouldNotify(i)) {
                yield {
                    progress: tracker.progress,
                };
            }
            const point = this._pointArray[pointIndex];
            const b = point.b << networkBiasShift;
            const g = point.g << networkBiasShift;
            const r = point.r << networkBiasShift;
            const a = point.a << networkBiasShift;
            const neuronIndex = this._contest(b, g, r, a);
            this._alterSingle(alpha, neuronIndex, b, g, r, a);
            if (rad !== 0)
                this._alterNeighbour(rad, neuronIndex, b, g, r, a);
            /* alter neighbours */
            pointIndex += step;
            if (pointIndex >= pointsNumber)
                pointIndex -= pointsNumber;
            i++;
            if (delta === 0)
                delta = 1;
            if (i % delta === 0) {
                alpha -= (alpha / alphadec) | 0;
                radius -= (radius / NeuQuant._radiusDecrease) | 0;
                rad = radius >> NeuQuant._radiusBiasShift;
                if (rad <= 1)
                    rad = 0;
                for (let j = 0; j < rad; j++)
                    this._radPower[j] = alpha * (((rad * rad - j * j) * NeuQuant._radBias) / (rad * rad)) >>> 0;
            }
        }
    }
    _buildPalette() {
        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__["Palette"]();
        this._network.forEach(neuron => {
            palette.add(neuron.toPoint());
        });
        palette.sort();
        return palette;
    }
    /**
     * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]
     */
    _alterNeighbour(rad, i, b, g, r, al) {
        let lo = i - rad;
        if (lo < -1)
            lo = -1;
        let hi = i + rad;
        if (hi > this._networkSize)
            hi = this._networkSize;
        let j = i + 1;
        let k = i - 1;
        let m = 1;
        while (j < hi || k > lo) {
            const a = this._radPower[m++] / NeuQuant._alphaRadBias;
            if (j < hi) {
                const p = this._network[j++];
                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));
            }
            if (k > lo) {
                const p = this._network[k--];
                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));
            }
        }
    }
    /**
     * Move neuron i towards biased (b,g,r) by factor alpha
     */
    _alterSingle(alpha, i, b, g, r, a) {
        alpha /= NeuQuant._initAlpha;
        /* alter hit neuron */
        const n = this._network[i];
        n.subtract(alpha * (n.r - r), alpha * (n.g - g), alpha * (n.b - b), alpha * (n.a - a));
    }
    /**
     * Search for biased BGR values
     * description:
     *    finds closest neuron (min dist) and updates freq
     *    finds best neuron (min dist-bias) and returns position
     *    for frequently chosen neurons, freq[i] is high and bias[i] is negative
     *    bias[i] = _gamma*((1/this._networkSize)-freq[i])
     *
     * Original distance equation:
     *        dist = abs(dR) + abs(dG) + abs(dB)
     */
    _contest(b, g, r, a) {
        const multiplier = (255 * 4) << networkBiasShift;
        let bestd = ~(1 << 31);
        let bestbiasd = bestd;
        let bestpos = -1;
        let bestbiaspos = bestpos;
        for (let i = 0; i < this._networkSize; i++) {
            const n = this._network[i];
            const dist = this._distance.calculateNormalized(n, { r, g, b, a }) * multiplier | 0;
            if (dist < bestd) {
                bestd = dist;
                bestpos = i;
            }
            const biasdist = dist - ((this._bias[i]) >> (NeuQuant._initialBiasShift - networkBiasShift));
            if (biasdist < bestbiasd) {
                bestbiasd = biasdist;
                bestbiaspos = i;
            }
            const betafreq = (this._freq[i] >> NeuQuant._betaShift);
            this._freq[i] -= betafreq;
            this._bias[i] += (betafreq << NeuQuant._gammaShift);
        }
        this._freq[bestpos] += NeuQuant._beta;
        this._bias[bestpos] -= NeuQuant._betaGamma;
        return bestbiaspos;
    }
}
/*
 four primes near 500 - assume no image has a length so large
 that it is divisible by all four primes
 */
NeuQuant._prime1 = 499;
NeuQuant._prime2 = 491;
NeuQuant._prime3 = 487;
NeuQuant._prime4 = 503;
NeuQuant._minpicturebytes = NeuQuant._prime4;
// no. of learning cycles
NeuQuant._nCycles = 100;
// defs for freq and bias
NeuQuant._initialBiasShift = 16;
// bias for fractions
NeuQuant._initialBias = (1 << NeuQuant._initialBiasShift);
NeuQuant._gammaShift = 10;
// gamma = 1024
// TODO: why gamma is never used?
// private static _gamma : number     = (1 << NeuQuant._gammaShift);
NeuQuant._betaShift = 10;
NeuQuant._beta = (NeuQuant._initialBias >> NeuQuant._betaShift);
// beta = 1/1024
NeuQuant._betaGamma = (NeuQuant._initialBias << (NeuQuant._gammaShift - NeuQuant._betaShift));
/*
 * for 256 cols, radius starts
 */
NeuQuant._radiusBiasShift = 6;
// at 32.0 biased by 6 bits
NeuQuant._radiusBias = 1 << NeuQuant._radiusBiasShift;
// and decreases by a factor of 1/30 each cycle
NeuQuant._radiusDecrease = 30;
/* defs for decreasing alpha factor */
// alpha starts at 1.0
NeuQuant._alphaBiasShift = 10;
// biased by 10 bits
NeuQuant._initAlpha = (1 << NeuQuant._alphaBiasShift);
/* radBias and alphaRadBias used for radpower calculation */
NeuQuant._radBiasShift = 8;
NeuQuant._radBias = 1 << NeuQuant._radBiasShift;
NeuQuant._alphaRadBiasShift = NeuQuant._alphaBiasShift + NeuQuant._radBiasShift;
NeuQuant._alphaRadBias = 1 << NeuQuant._alphaRadBiasShift;
//# sourceMappingURL=neuquant.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/palette/neuquant/neuquantFloat.js":
/*!*************************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/palette/neuquant/neuquantFloat.js ***!
  \*************************************************************************/
/*! exports provided: NeuQuantFloat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeuQuantFloat", function() { return NeuQuantFloat; });
/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ "./node_modules/image-q/dist/esm/utils/palette.js");
/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ "./node_modules/image-q/dist/esm/utils/point.js");
/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../paletteQuantizer */ "./node_modules/image-q/dist/esm/palette/paletteQuantizer.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ "./node_modules/image-q/dist/esm/utils/index.js");
/*
 * NeuQuantFloat Neural-Net Quantization Algorithm
 * ------------------------------------------
 *
 * Copyright (c) 1994 Anthony Dekker
 *
 * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See
 * "Kohonen neural networks for optimal colour quantization" in "Network:
 * Computation in Neural Systems" Vol. 5 (1994) pp 351-367. for a discussion of
 * the algorithm.
 *
 * Any party obtaining a copy of these files from the author, directly or
 * indirectly, is granted, free of charge, a full and unrestricted irrevocable,
 * world-wide, paid up, royalty-free, nonexclusive right and license to deal in
 * this software and documentation files (the "Software"), including without
 * limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons who
 * receive copies from any such party to do so, with the only requirement being
 * that this copyright notice remain intact.
 */
/**
 * @preserve TypeScript port:
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * neuquant.ts - part of Image Quantization Library
 */




// bias for colour values
const networkBiasShift = 3;
class NeuronFloat {
    constructor(defaultValue) {
        this.r = this.g = this.b = this.a = defaultValue;
    }
    /**
     * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)
     * @example
     * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);
     */
    toPoint() {
        return _utils_point__WEBPACK_IMPORTED_MODULE_1__["Point"].createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);
    }
    subtract(r, g, b, a) {
        this.r -= r;
        this.g -= g;
        this.b -= b;
        this.a -= a;
    }
}
class NeuQuantFloat extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__["AbstractPaletteQuantizer"] {
    constructor(colorDistanceCalculator, colors = 256) {
        super();
        this._distance = colorDistanceCalculator;
        this._pointArray = [];
        this._sampleFactor = 1;
        this._networkSize = colors;
        this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);
    }
    sample(pointContainer) {
        this._pointArray = this._pointArray.concat(pointContainer.getPointArray());
    }
    *quantize() {
        this._init();
        yield* this._learn();
        yield {
            palette: this._buildPalette(),
            progress: 100,
        };
    }
    _init() {
        this._freq = [];
        this._bias = [];
        this._radPower = [];
        this._network = [];
        for (let i = 0; i < this._networkSize; i++) {
            this._network[i] = new NeuronFloat((i << (networkBiasShift + 8)) / this._networkSize);
            // 1/this._networkSize
            this._freq[i] = NeuQuantFloat._initialBias / this._networkSize;
            this._bias[i] = 0;
        }
    }
    /**
     * Main Learning Loop
     */
    *_learn() {
        let sampleFactor = this._sampleFactor;
        const pointsNumber = this._pointArray.length;
        if (pointsNumber < NeuQuantFloat._minpicturebytes)
            sampleFactor = 1;
        const alphadec = 30 + (sampleFactor - 1) / 3;
        const pointsToSample = pointsNumber / sampleFactor;
        let delta = pointsToSample / NeuQuantFloat._nCycles | 0;
        let alpha = NeuQuantFloat._initAlpha;
        let radius = (this._networkSize >> 3) * NeuQuantFloat._radiusBias;
        let rad = radius >> NeuQuantFloat._radiusBiasShift;
        if (rad <= 1)
            rad = 0;
        for (let i = 0; i < rad; i++) {
            this._radPower[i] = alpha * (((rad * rad - i * i) * NeuQuantFloat._radBias) / (rad * rad));
        }
        let step;
        if (pointsNumber < NeuQuantFloat._minpicturebytes) {
            step = 1;
        }
        else if (pointsNumber % NeuQuantFloat._prime1 !== 0) {
            step = NeuQuantFloat._prime1;
        }
        else if ((pointsNumber % NeuQuantFloat._prime2) !== 0) {
            step = NeuQuantFloat._prime2;
        }
        else if ((pointsNumber % NeuQuantFloat._prime3) !== 0) {
            step = NeuQuantFloat._prime3;
        }
        else {
            step = NeuQuantFloat._prime4;
        }
        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_3__["ProgressTracker"](pointsToSample, 99);
        for (let i = 0, pointIndex = 0; i < pointsToSample;) {
            if (tracker.shouldNotify(i)) {
                yield {
                    progress: tracker.progress,
                };
            }
            const point = this._pointArray[pointIndex];
            const b = point.b << networkBiasShift;
            const g = point.g << networkBiasShift;
            const r = point.r << networkBiasShift;
            const a = point.a << networkBiasShift;
            const neuronIndex = this._contest(b, g, r, a);
            this._alterSingle(alpha, neuronIndex, b, g, r, a);
            if (rad !== 0)
                this._alterNeighbour(rad, neuronIndex, b, g, r, a);
            /* alter neighbours */
            pointIndex += step;
            if (pointIndex >= pointsNumber)
                pointIndex -= pointsNumber;
            i++;
            if (delta === 0)
                delta = 1;
            if (i % delta === 0) {
                alpha -= (alpha / alphadec);
                radius -= (radius / NeuQuantFloat._radiusDecrease);
                rad = radius >> NeuQuantFloat._radiusBiasShift;
                if (rad <= 1)
                    rad = 0;
                for (let j = 0; j < rad; j++)
                    this._radPower[j] = alpha * (((rad * rad - j * j) * NeuQuantFloat._radBias) / (rad * rad));
            }
        }
    }
    _buildPalette() {
        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__["Palette"]();
        this._network.forEach(neuron => {
            palette.add(neuron.toPoint());
        });
        palette.sort();
        return palette;
    }
    /**
     * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]
     */
    _alterNeighbour(rad, i, b, g, r, al) {
        let lo = i - rad;
        if (lo < -1)
            lo = -1;
        let hi = i + rad;
        if (hi > this._networkSize)
            hi = this._networkSize;
        let j = i + 1;
        let k = i - 1;
        let m = 1;
        while (j < hi || k > lo) {
            const a = this._radPower[m++] / NeuQuantFloat._alphaRadBias;
            if (j < hi) {
                const p = this._network[j++];
                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));
            }
            if (k > lo) {
                const p = this._network[k--];
                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));
            }
        }
    }
    /**
     * Move neuron i towards biased (b,g,r) by factor alpha
     */
    _alterSingle(alpha, i, b, g, r, a) {
        alpha /= NeuQuantFloat._initAlpha;
        /* alter hit neuron */
        const n = this._network[i];
        n.subtract(alpha * (n.r - r), alpha * (n.g - g), alpha * (n.b - b), alpha * (n.a - a));
    }
    /**
     * Search for biased BGR values
     * description:
     *    finds closest neuron (min dist) and updates freq
     *    finds best neuron (min dist-bias) and returns position
     *    for frequently chosen neurons, freq[i] is high and bias[i] is negative
     *    bias[i] = _gamma*((1/this._networkSize)-freq[i])
     *
     * Original distance equation:
     *        dist = abs(dR) + abs(dG) + abs(dB)
     */
    _contest(b, g, r, al) {
        const multiplier = (255 * 4) << networkBiasShift;
        let bestd = ~(1 << 31);
        let bestbiasd = bestd;
        let bestpos = -1;
        let bestbiaspos = bestpos;
        for (let i = 0; i < this._networkSize; i++) {
            const n = this._network[i];
            const dist = this._distance.calculateNormalized(n, { r, g, b, a: al }) * multiplier;
            if (dist < bestd) {
                bestd = dist;
                bestpos = i;
            }
            const biasdist = dist - ((this._bias[i]) >> (NeuQuantFloat._initialBiasShift - networkBiasShift));
            if (biasdist < bestbiasd) {
                bestbiasd = biasdist;
                bestbiaspos = i;
            }
            const betafreq = (this._freq[i] >> NeuQuantFloat._betaShift);
            this._freq[i] -= betafreq;
            this._bias[i] += (betafreq << NeuQuantFloat._gammaShift);
        }
        this._freq[bestpos] += NeuQuantFloat._beta;
        this._bias[bestpos] -= NeuQuantFloat._betaGamma;
        return bestbiaspos;
    }
}
/*
 four primes near 500 - assume no image has a length so large
 that it is divisible by all four primes
 */
NeuQuantFloat._prime1 = 499;
NeuQuantFloat._prime2 = 491;
NeuQuantFloat._prime3 = 487;
NeuQuantFloat._prime4 = 503;
NeuQuantFloat._minpicturebytes = NeuQuantFloat._prime4;
// no. of learning cycles
NeuQuantFloat._nCycles = 100;
// defs for freq and bias
NeuQuantFloat._initialBiasShift = 16;
// bias for fractions
NeuQuantFloat._initialBias = (1 << NeuQuantFloat._initialBiasShift);
NeuQuantFloat._gammaShift = 10;
// gamma = 1024
// TODO: why gamma is never used?
// private static _gamma : number     = (1 << NeuQuantFloat._gammaShift);
NeuQuantFloat._betaShift = 10;
NeuQuantFloat._beta = (NeuQuantFloat._initialBias >> NeuQuantFloat._betaShift);
// beta = 1/1024
NeuQuantFloat._betaGamma = (NeuQuantFloat._initialBias << (NeuQuantFloat._gammaShift - NeuQuantFloat._betaShift));
/*
 * for 256 cols, radius starts
 */
NeuQuantFloat._radiusBiasShift = 6;
// at 32.0 biased by 6 bits
NeuQuantFloat._radiusBias = 1 << NeuQuantFloat._radiusBiasShift;
// and decreases by a factor of 1/30 each cycle
NeuQuantFloat._radiusDecrease = 30;
/* defs for decreasing alpha factor */
// alpha starts at 1.0
NeuQuantFloat._alphaBiasShift = 10;
// biased by 10 bits
NeuQuantFloat._initAlpha = (1 << NeuQuantFloat._alphaBiasShift);
/* radBias and alphaRadBias used for radpower calculation */
NeuQuantFloat._radBiasShift = 8;
NeuQuantFloat._radBias = 1 << NeuQuantFloat._radBiasShift;
NeuQuantFloat._alphaRadBiasShift = NeuQuantFloat._alphaBiasShift + NeuQuantFloat._radBiasShift;
NeuQuantFloat._alphaRadBias = 1 << NeuQuantFloat._alphaRadBiasShift;
//# sourceMappingURL=neuquantFloat.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/palette/paletteQuantizer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/palette/paletteQuantizer.js ***!
  \*******************************************************************/
/*! exports provided: AbstractPaletteQuantizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractPaletteQuantizer", function() { return AbstractPaletteQuantizer; });
class AbstractPaletteQuantizer {
    quantizeSync() {
        for (const value of this.quantize()) {
            if (value.palette) {
                return value.palette;
            }
        }
        throw new Error('unreachable');
    }
}
//# sourceMappingURL=paletteQuantizer.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js":
/*!**************************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js ***!
  \**************************************************************************/
/*! exports provided: ColorHistogram */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorHistogram", function() { return ColorHistogram; });
/* harmony import */ var _utils_hueStatistics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/hueStatistics */ "./node_modules/image-q/dist/esm/utils/hueStatistics.js");
/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/arithmetic */ "./node_modules/image-q/dist/esm/utils/arithmetic.js");
/*
 * Copyright (c) 2015, Leon Sorokin
 * All rights reserved. (MIT Licensed)
 *
 * ColorHistogram.js - an image quantization lib
 */
/**
 * @preserve TypeScript port:
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * colorHistogram.ts - part of Image Quantization Library
 */


class ColorHistogram {
    constructor(method, colors) {
        // 1 = by global population, 2 = subregion population threshold
        this._method = method;
        // if > 0, enables hues stats and min-color retention per group
        this._minHueCols = colors << 2; // opts.minHueCols || 0;
        // # of highest-frequency colors to start with for palette reduction
        this._initColors = colors << 2;
        // HueStatistics instance
        this._hueStats = new _utils_hueStatistics__WEBPACK_IMPORTED_MODULE_0__["HueStatistics"](ColorHistogram._hueGroups, this._minHueCols);
        this._histogram = Object.create(null); // tslint:disable-line:no-null-keyword
    }
    sample(pointContainer) {
        switch (this._method) {
            case 1:
                this._colorStats1D(pointContainer);
                break;
            case 2:
                this._colorStats2D(pointContainer);
                break;
        }
    }
    getImportanceSortedColorsIDXI32() {
        // TODO: fix typing issue in stableSort func
        const sorted = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_1__["stableSort"])(Object.keys(this._histogram), (a, b) => this._histogram[b] - this._histogram[a]);
        if (sorted.length === 0) {
            return [];
        }
        let idxi32;
        switch (this._method) {
            case 1:
                const initialColorsLimit = Math.min(sorted.length, this._initColors);
                const last = sorted[initialColorsLimit - 1];
                const freq = this._histogram[last];
                idxi32 = sorted.slice(0, initialColorsLimit);
                // add any cut off colors with same freq as last
                let pos = initialColorsLimit;
                const len = sorted.length;
                while (pos < len && this._histogram[sorted[pos]] === freq) {
                    idxi32.push(sorted[pos++]);
                }
                // inject min huegroup colors
                this._hueStats.injectIntoArray(idxi32);
                break;
            case 2:
                idxi32 = sorted;
                break;
            default:
                // TODO: rethink errors
                throw new Error('Incorrect method');
        }
        // int32-ify values
        return idxi32.map(function (v) {
            return +v;
        });
    }
    // global top-population
    _colorStats1D(pointContainer) {
        const histG = this._histogram;
        const pointArray = pointContainer.getPointArray();
        const len = pointArray.length;
        for (let i = 0; i < len; i++) {
            const col = pointArray[i].uint32;
            // collect hue stats
            this._hueStats.check(col);
            if (col in histG) {
                histG[col]++;
            }
            else {
                histG[col] = 1;
            }
        }
    }
    // population threshold within subregions
    // FIXME: this can over-reduce (few/no colors same?), need a way to keep
    // important colors that dont ever reach local thresholds (gradients?)
    _colorStats2D(pointContainer) {
        const width = pointContainer.getWidth();
        const height = pointContainer.getHeight();
        const pointArray = pointContainer.getPointArray();
        const boxW = ColorHistogram._boxSize[0];
        const boxH = ColorHistogram._boxSize[1];
        const area = boxW * boxH;
        const boxes = this._makeBoxes(width, height, boxW, boxH);
        const histG = this._histogram;
        boxes.forEach(box => {
            let effc = Math.round((box.w * box.h) / area) * ColorHistogram._boxPixels;
            if (effc < 2)
                effc = 2;
            const histL = {};
            this._iterateBox(box, width, (i) => {
                const col = pointArray[i].uint32;
                // collect hue stats
                this._hueStats.check(col);
                if (col in histG) {
                    histG[col]++;
                }
                else if (col in histL) {
                    if (++histL[col] >= effc) {
                        histG[col] = histL[col];
                    }
                }
                else {
                    histL[col] = 1;
                }
            });
        });
        // inject min huegroup colors
        this._hueStats.injectIntoDictionary(histG);
    }
    // iterates @bbox within a parent rect of width @wid; calls @fn, passing index within parent
    _iterateBox(bbox, wid, fn) {
        const b = bbox;
        const i0 = b.y * wid + b.x;
        const i1 = (b.y + b.h - 1) * wid + (b.x + b.w - 1);
        const incr = wid - b.w + 1;
        let cnt = 0;
        let i = i0;
        do {
            fn.call(this, i);
            i += (++cnt % b.w === 0) ? incr : 1;
        } while (i <= i1);
    }
    /**
     *    partitions a rectangle of width x height into
     *    array of boxes stepX x stepY (or less)
     */
    _makeBoxes(width, height, stepX, stepY) {
        const wrem = width % stepX;
        const hrem = height % stepY;
        const xend = width - wrem;
        const yend = height - hrem;
        const boxesArray = [];
        for (let y = 0; y < height; y += stepY) {
            for (let x = 0; x < width; x += stepX) {
                boxesArray.push({ x, y, w: (x === xend ? wrem : stepX), h: (y === yend ? hrem : stepY) });
            }
        }
        return boxesArray;
    }
}
ColorHistogram._boxSize = [64, 64];
ColorHistogram._boxPixels = 2;
ColorHistogram._hueGroups = 10;
//# sourceMappingURL=colorHistogram.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/palette/rgbquant/rgbquant.js":
/*!********************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/palette/rgbquant/rgbquant.js ***!
  \********************************************************************/
/*! exports provided: RGBQuant */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBQuant", function() { return RGBQuant; });
/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ "./node_modules/image-q/dist/esm/utils/palette.js");
/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ "./node_modules/image-q/dist/esm/utils/point.js");
/* harmony import */ var _colorHistogram__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./colorHistogram */ "./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js");
/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../paletteQuantizer */ "./node_modules/image-q/dist/esm/palette/paletteQuantizer.js");
/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/arithmetic */ "./node_modules/image-q/dist/esm/utils/arithmetic.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils */ "./node_modules/image-q/dist/esm/utils/index.js");
/*
 * Copyright (c) 2015, Leon Sorokin
 * All rights reserved. (MIT Licensed)
 *
 * RGBQuant.js - an image quantization lib
 */
/**
 * @preserve TypeScript port:
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * rgbquant.ts - part of Image Quantization Library
 */






class RemovedColor {
    constructor(index, color, distance) {
        this.index = index;
        this.color = color;
        this.distance = distance;
    }
}
// TODO: make input/output image and input/output palettes with instances of class Point only!
class RGBQuant extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_3__["AbstractPaletteQuantizer"] {
    constructor(colorDistanceCalculator, colors = 256, method = 2) {
        super();
        this._distance = colorDistanceCalculator;
        // desired final palette size
        this._colors = colors;
        // histogram to accumulate
        this._histogram = new _colorHistogram__WEBPACK_IMPORTED_MODULE_2__["ColorHistogram"](method, colors);
        this._initialDistance = 0.01;
        this._distanceIncrement = 0.005;
    }
    // gathers histogram info
    sample(image) {
        /*
         var pointArray = image.getPointArray(), max = [0, 0, 0, 0], min = [255, 255, 255, 255];
    
         for (var i = 0, l = pointArray.length; i < l; i++) {
         var color = pointArray[i];
         for (var componentIndex = 0; componentIndex < 4; componentIndex++) {
         if (max[componentIndex] < color.rgba[componentIndex]) max[componentIndex] = color.rgba[componentIndex];
         if (min[componentIndex] > color.rgba[componentIndex]) min[componentIndex] = color.rgba[componentIndex];
         }
         }
         var rd = max[0] - min[0], gd = max[1] - min[1], bd = max[2] - min[2], ad = max[3] - min[3];
         this._distance.setWhitePoint(rd, gd, bd, ad);
    
         this._initialDistance = (Math.sqrt(rd * rd + gd * gd + bd * bd + ad * ad) / Math.sqrt(255 * 255 + 255 * 255 + 255 * 255)) * 0.01;
         */
        this._histogram.sample(image);
    }
    // reduces histogram to palette, remaps & memoizes reduced colors
    *quantize() {
        const idxi32 = this._histogram.getImportanceSortedColorsIDXI32();
        if (idxi32.length === 0) {
            throw new Error('No colors in image');
        }
        yield* this._buildPalette(idxi32);
    }
    // reduces similar colors from an importance-sorted Uint32 rgba array
    *_buildPalette(idxi32) {
        // reduce histogram to create initial palette
        // build full rgb palette
        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__["Palette"]();
        const colorArray = palette.getPointContainer().getPointArray();
        const usageArray = new Array(idxi32.length); // tslint:disable-line:prefer-array-literal
        for (let i = 0; i < idxi32.length; i++) {
            colorArray.push(_utils_point__WEBPACK_IMPORTED_MODULE_1__["Point"].createByUint32(idxi32[i]));
            usageArray[i] = 1;
        }
        const len = colorArray.length;
        const memDist = [];
        let palLen = len;
        let thold = this._initialDistance;
        // palette already at or below desired length
        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_5__["ProgressTracker"](palLen - this._colors, 99);
        while (palLen > this._colors) {
            memDist.length = 0;
            // iterate palette
            for (let i = 0; i < len; i++) {
                if (tracker.shouldNotify(len - palLen)) {
                    yield {
                        progress: tracker.progress,
                    };
                }
                if (usageArray[i] === 0)
                    continue;
                const pxi = colorArray[i];
                // if (!pxi) continue;
                for (let j = i + 1; j < len; j++) {
                    if (usageArray[j] === 0)
                        continue;
                    const pxj = colorArray[j];
                    // if (!pxj) continue;
                    const dist = this._distance.calculateNormalized(pxi, pxj);
                    if (dist < thold) {
                        // store index,rgb,dist
                        memDist.push(new RemovedColor(j, pxj, dist));
                        usageArray[j] = 0;
                        palLen--;
                    }
                }
            }
            // palette reduction pass
            // console.log("palette length: " + palLen);
            // if palette is still much larger than target, increment by larger initDist
            thold += (palLen > this._colors * 3) ? this._initialDistance : this._distanceIncrement;
        }
        // if palette is over-reduced, re-add removed colors with largest distances from last round
        if (palLen < this._colors) {
            // sort descending
            Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_4__["stableSort"])(memDist, function (a, b) {
                return b.distance - a.distance;
            });
            let k = 0;
            while (palLen < this._colors && k < memDist.length) {
                const removedColor = memDist[k];
                // re-inject rgb into final palette
                usageArray[removedColor.index] = 1;
                palLen++;
                k++;
            }
        }
        let colors = colorArray.length;
        for (let colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {
            if (usageArray[colorIndex] === 0) {
                if (colorIndex !== colors - 1) {
                    colorArray[colorIndex] = colorArray[colors - 1];
                }
                --colors;
            }
        }
        colorArray.length = colors;
        palette.sort();
        yield {
            palette,
            progress: 100,
        };
    }
}
//# sourceMappingURL=rgbquant.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/palette/wu/wuQuant.js":
/*!*************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/palette/wu/wuQuant.js ***!
  \*************************************************************/
/*! exports provided: WuColorCube, WuQuant */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WuColorCube", function() { return WuColorCube; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WuQuant", function() { return WuQuant; });
/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ "./node_modules/image-q/dist/esm/utils/palette.js");
/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ "./node_modules/image-q/dist/esm/utils/point.js");
/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../paletteQuantizer */ "./node_modules/image-q/dist/esm/palette/paletteQuantizer.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ "./node_modules/image-q/dist/esm/utils/index.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * wuQuant.ts - part of Image Quantization Library
 */




function createArray1D(dimension1) {
    const a = [];
    for (let k = 0; k < dimension1; k++) {
        a[k] = 0;
    }
    return a;
}
function createArray4D(dimension1, dimension2, dimension3, dimension4) {
    const a = new Array(dimension1);
    for (let i = 0; i < dimension1; i++) {
        a[i] = new Array(dimension2);
        for (let j = 0; j < dimension2; j++) {
            a[i][j] = new Array(dimension3);
            for (let k = 0; k < dimension3; k++) {
                a[i][j][k] = new Array(dimension4);
                for (let l = 0; l < dimension4; l++) {
                    a[i][j][k][l] = 0;
                }
            }
        }
    }
    return a;
}
function createArray3D(dimension1, dimension2, dimension3) {
    const a = new Array(dimension1);
    for (let i = 0; i < dimension1; i++) {
        a[i] = new Array(dimension2);
        for (let j = 0; j < dimension2; j++) {
            a[i][j] = new Array(dimension3);
            for (let k = 0; k < dimension3; k++) {
                a[i][j][k] = 0;
            }
        }
    }
    return a;
}
function fillArray3D(a, dimension1, dimension2, dimension3, value) {
    for (let i = 0; i < dimension1; i++) {
        a[i] = [];
        for (let j = 0; j < dimension2; j++) {
            a[i][j] = [];
            for (let k = 0; k < dimension3; k++) {
                a[i][j][k] = value;
            }
        }
    }
}
function fillArray1D(a, dimension1, value) {
    for (let i = 0; i < dimension1; i++) {
        a[i] = value;
    }
}
class WuColorCube {
}
class WuQuant extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__["AbstractPaletteQuantizer"] {
    constructor(colorDistanceCalculator, colors = 256, significantBitsPerChannel = 5) {
        super();
        this._distance = colorDistanceCalculator;
        this._setQuality(significantBitsPerChannel);
        this._initialize(colors);
    }
    sample(image) {
        const pointArray = image.getPointArray();
        for (let i = 0, l = pointArray.length; i < l; i++) {
            this._addColor(pointArray[i]);
        }
        this._pixels = this._pixels.concat(pointArray);
    }
    *quantize() {
        yield* this._preparePalette();
        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__["Palette"]();
        // generates palette
        for (let paletteIndex = 0; paletteIndex < this._colors; paletteIndex++) {
            if (this._sums[paletteIndex] > 0) {
                const sum = this._sums[paletteIndex];
                const r = this._reds[paletteIndex] / sum;
                const g = this._greens[paletteIndex] / sum;
                const b = this._blues[paletteIndex] / sum;
                const a = this._alphas[paletteIndex] / sum;
                const color = _utils_point__WEBPACK_IMPORTED_MODULE_1__["Point"].createByRGBA(r | 0, g | 0, b | 0, a | 0);
                palette.add(color);
            }
        }
        palette.sort();
        yield {
            palette,
            progress: 100,
        };
    }
    *_preparePalette() {
        // preprocess the colors
        yield* this._calculateMoments();
        let next = 0;
        const volumeVariance = createArray1D(this._colors);
        // processes the cubes
        for (let cubeIndex = 1; cubeIndex < this._colors; ++cubeIndex) {
            // if cut is possible; make it
            if (this._cut(this._cubes[next], this._cubes[cubeIndex])) {
                volumeVariance[next] = this._cubes[next].volume > 1 ? this._calculateVariance(this._cubes[next]) : 0.0;
                volumeVariance[cubeIndex] = this._cubes[cubeIndex].volume > 1 ? this._calculateVariance(this._cubes[cubeIndex]) : 0.0;
            }
            else {
                // the cut was not possible, revert the index
                volumeVariance[next] = 0.0;
                cubeIndex--;
            }
            next = 0;
            let temp = volumeVariance[0];
            for (let index = 1; index <= cubeIndex; ++index) {
                if (volumeVariance[index] > temp) {
                    temp = volumeVariance[index];
                    next = index;
                }
            }
            if (temp <= 0.0) {
                this._colors = cubeIndex + 1;
                break;
            }
        }
        const lookupRed = [];
        const lookupGreen = [];
        const lookupBlue = [];
        const lookupAlpha = [];
        // precalculates lookup tables
        for (let k = 0; k < this._colors; ++k) {
            const weight = WuQuant._volume(this._cubes[k], this._weights);
            if (weight > 0) {
                lookupRed[k] = (WuQuant._volume(this._cubes[k], this._momentsRed) / weight) | 0;
                lookupGreen[k] = (WuQuant._volume(this._cubes[k], this._momentsGreen) / weight) | 0;
                lookupBlue[k] = (WuQuant._volume(this._cubes[k], this._momentsBlue) / weight) | 0;
                lookupAlpha[k] = (WuQuant._volume(this._cubes[k], this._momentsAlpha) / weight) | 0;
            }
            else {
                lookupRed[k] = 0;
                lookupGreen[k] = 0;
                lookupBlue[k] = 0;
                lookupAlpha[k] = 0;
            }
        }
        this._reds = createArray1D(this._colors + 1);
        this._greens = createArray1D(this._colors + 1);
        this._blues = createArray1D(this._colors + 1);
        this._alphas = createArray1D(this._colors + 1);
        this._sums = createArray1D(this._colors + 1);
        // scans and adds colors
        for (let index = 0, l = this._pixels.length; index < l; index++) {
            const color = this._pixels[index];
            const match = -1;
            let bestMatch = match;
            let bestDistance = Number.MAX_VALUE;
            for (let lookup = 0; lookup < this._colors; lookup++) {
                const foundRed = lookupRed[lookup];
                const foundGreen = lookupGreen[lookup];
                const foundBlue = lookupBlue[lookup];
                const foundAlpha = lookupAlpha[lookup];
                const distance = this._distance.calculateRaw(foundRed, foundGreen, foundBlue, foundAlpha, color.r, color.g, color.b, color.a);
                if (distance < bestDistance) {
                    bestDistance = distance;
                    bestMatch = lookup;
                }
            }
            this._reds[bestMatch] += color.r;
            this._greens[bestMatch] += color.g;
            this._blues[bestMatch] += color.b;
            this._alphas[bestMatch] += color.a;
            this._sums[bestMatch]++;
        }
    }
    _addColor(color) {
        const bitsToRemove = 8 - this._significantBitsPerChannel;
        const indexRed = (color.r >> bitsToRemove) + 1;
        const indexGreen = (color.g >> bitsToRemove) + 1;
        const indexBlue = (color.b >> bitsToRemove) + 1;
        const indexAlpha = (color.a >> bitsToRemove) + 1;
        // if(color.a > 10) {
        this._weights[indexAlpha][indexRed][indexGreen][indexBlue]++;
        this._momentsRed[indexAlpha][indexRed][indexGreen][indexBlue] += color.r;
        this._momentsGreen[indexAlpha][indexRed][indexGreen][indexBlue] += color.g;
        this._momentsBlue[indexAlpha][indexRed][indexGreen][indexBlue] += color.b;
        this._momentsAlpha[indexAlpha][indexRed][indexGreen][indexBlue] += color.a;
        this._moments[indexAlpha][indexRed][indexGreen][indexBlue] += this._table[color.r] + this._table[color.g] + this._table[color.b] + this._table[color.a];
        // }
    }
    /**
     * Converts the histogram to a series of _moments.
     */
    *_calculateMoments() {
        const area = [];
        const areaRed = [];
        const areaGreen = [];
        const areaBlue = [];
        const areaAlpha = [];
        const area2 = [];
        const xarea = createArray3D(this._sideSize, this._sideSize, this._sideSize);
        const xareaRed = createArray3D(this._sideSize, this._sideSize, this._sideSize);
        const xareaGreen = createArray3D(this._sideSize, this._sideSize, this._sideSize);
        const xareaBlue = createArray3D(this._sideSize, this._sideSize, this._sideSize);
        const xareaAlpha = createArray3D(this._sideSize, this._sideSize, this._sideSize);
        const xarea2 = createArray3D(this._sideSize, this._sideSize, this._sideSize);
        let trackerProgress = 0;
        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_3__["ProgressTracker"](this._alphaMaxSideIndex * this._maxSideIndex, 99);
        for (let alphaIndex = 1; alphaIndex <= this._alphaMaxSideIndex; ++alphaIndex) {
            fillArray3D(xarea, this._sideSize, this._sideSize, this._sideSize, 0);
            fillArray3D(xareaRed, this._sideSize, this._sideSize, this._sideSize, 0);
            fillArray3D(xareaGreen, this._sideSize, this._sideSize, this._sideSize, 0);
            fillArray3D(xareaBlue, this._sideSize, this._sideSize, this._sideSize, 0);
            fillArray3D(xareaAlpha, this._sideSize, this._sideSize, this._sideSize, 0);
            fillArray3D(xarea2, this._sideSize, this._sideSize, this._sideSize, 0);
            for (let redIndex = 1; redIndex <= this._maxSideIndex; ++redIndex, ++trackerProgress) {
                if (tracker.shouldNotify(trackerProgress)) {
                    yield {
                        progress: tracker.progress,
                    };
                }
                fillArray1D(area, this._sideSize, 0);
                fillArray1D(areaRed, this._sideSize, 0);
                fillArray1D(areaGreen, this._sideSize, 0);
                fillArray1D(areaBlue, this._sideSize, 0);
                fillArray1D(areaAlpha, this._sideSize, 0);
                fillArray1D(area2, this._sideSize, 0);
                for (let greenIndex = 1; greenIndex <= this._maxSideIndex; ++greenIndex) {
                    let line = 0;
                    let lineRed = 0;
                    let lineGreen = 0;
                    let lineBlue = 0;
                    let lineAlpha = 0;
                    let line2 = 0.0;
                    for (let blueIndex = 1; blueIndex <= this._maxSideIndex; ++blueIndex) {
                        line += this._weights[alphaIndex][redIndex][greenIndex][blueIndex];
                        lineRed += this._momentsRed[alphaIndex][redIndex][greenIndex][blueIndex];
                        lineGreen += this._momentsGreen[alphaIndex][redIndex][greenIndex][blueIndex];
                        lineBlue += this._momentsBlue[alphaIndex][redIndex][greenIndex][blueIndex];
                        lineAlpha += this._momentsAlpha[alphaIndex][redIndex][greenIndex][blueIndex];
                        line2 += this._moments[alphaIndex][redIndex][greenIndex][blueIndex];
                        area[blueIndex] += line;
                        areaRed[blueIndex] += lineRed;
                        areaGreen[blueIndex] += lineGreen;
                        areaBlue[blueIndex] += lineBlue;
                        areaAlpha[blueIndex] += lineAlpha;
                        area2[blueIndex] += line2;
                        xarea[redIndex][greenIndex][blueIndex] = xarea[redIndex - 1][greenIndex][blueIndex] + area[blueIndex];
                        xareaRed[redIndex][greenIndex][blueIndex] = xareaRed[redIndex - 1][greenIndex][blueIndex] + areaRed[blueIndex];
                        xareaGreen[redIndex][greenIndex][blueIndex] = xareaGreen[redIndex - 1][greenIndex][blueIndex] + areaGreen[blueIndex];
                        xareaBlue[redIndex][greenIndex][blueIndex] = xareaBlue[redIndex - 1][greenIndex][blueIndex] + areaBlue[blueIndex];
                        xareaAlpha[redIndex][greenIndex][blueIndex] = xareaAlpha[redIndex - 1][greenIndex][blueIndex] + areaAlpha[blueIndex];
                        xarea2[redIndex][greenIndex][blueIndex] = xarea2[redIndex - 1][greenIndex][blueIndex] + area2[blueIndex];
                        this._weights[alphaIndex][redIndex][greenIndex][blueIndex] = this._weights[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xarea[redIndex][greenIndex][blueIndex];
                        this._momentsRed[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsRed[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaRed[redIndex][greenIndex][blueIndex];
                        this._momentsGreen[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsGreen[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaGreen[redIndex][greenIndex][blueIndex];
                        this._momentsBlue[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsBlue[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaBlue[redIndex][greenIndex][blueIndex];
                        this._momentsAlpha[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsAlpha[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaAlpha[redIndex][greenIndex][blueIndex];
                        this._moments[alphaIndex][redIndex][greenIndex][blueIndex] = this._moments[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xarea2[redIndex][greenIndex][blueIndex];
                    }
                }
            }
        }
    }
    /**
     * Computes the volume of the cube in a specific moment.
     */
    static _volumeFloat(cube, moment) {
        return (moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] -
            moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] -
            moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] +
            moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum] -
            moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] +
            moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] +
            moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] -
            moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -
            (moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] -
                moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] -
                moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +
                moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] -
                moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +
                moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +
                moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum] -
                moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);
    }
    /**
     * Computes the volume of the cube in a specific moment.
     */
    static _volume(cube, moment) {
        return WuQuant._volumeFloat(cube, moment) | 0;
    }
    /**
     * Splits the cube in given position][and color direction.
     */
    static _top(cube, direction, position, moment) {
        let result;
        switch (direction) {
            case WuQuant._alpha:
                result = (moment[position][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] -
                    moment[position][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] -
                    moment[position][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] +
                    moment[position][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -
                    (moment[position][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] -
                        moment[position][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] -
                        moment[position][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +
                        moment[position][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);
                break;
            case WuQuant._red:
                result = (moment[cube.alphaMaximum][position][cube.greenMaximum][cube.blueMaximum] -
                    moment[cube.alphaMaximum][position][cube.greenMinimum][cube.blueMaximum] -
                    moment[cube.alphaMinimum][position][cube.greenMaximum][cube.blueMaximum] +
                    moment[cube.alphaMinimum][position][cube.greenMinimum][cube.blueMaximum]) -
                    (moment[cube.alphaMaximum][position][cube.greenMaximum][cube.blueMinimum] -
                        moment[cube.alphaMaximum][position][cube.greenMinimum][cube.blueMinimum] -
                        moment[cube.alphaMinimum][position][cube.greenMaximum][cube.blueMinimum] +
                        moment[cube.alphaMinimum][position][cube.greenMinimum][cube.blueMinimum]);
                break;
            case WuQuant._green:
                result = (moment[cube.alphaMaximum][cube.redMaximum][position][cube.blueMaximum] -
                    moment[cube.alphaMaximum][cube.redMinimum][position][cube.blueMaximum] -
                    moment[cube.alphaMinimum][cube.redMaximum][position][cube.blueMaximum] +
                    moment[cube.alphaMinimum][cube.redMinimum][position][cube.blueMaximum]) -
                    (moment[cube.alphaMaximum][cube.redMaximum][position][cube.blueMinimum] -
                        moment[cube.alphaMaximum][cube.redMinimum][position][cube.blueMinimum] -
                        moment[cube.alphaMinimum][cube.redMaximum][position][cube.blueMinimum] +
                        moment[cube.alphaMinimum][cube.redMinimum][position][cube.blueMinimum]);
                break;
            case WuQuant._blue:
                result = (moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][position] -
                    moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][position] -
                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][position] +
                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][position]) -
                    (moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][position] -
                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][position] -
                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][position] +
                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][position]);
                break;
            default:
                throw new Error('impossible');
        }
        return result | 0;
    }
    /**
     * Splits the cube in a given color direction at its minimum.
     */
    static _bottom(cube, direction, moment) {
        switch (direction) {
            case WuQuant._alpha:
                return (-moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] +
                    moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] +
                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] -
                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -
                    (-moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] +
                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +
                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -
                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);
            case WuQuant._red:
                return (-moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] +
                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum] +
                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] -
                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -
                    (-moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +
                        moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum] +
                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -
                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);
            case WuQuant._green:
                return (-moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] +
                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum] +
                    moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] -
                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -
                    (-moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +
                        moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum] +
                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] -
                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);
            case WuQuant._blue:
                return (-moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] +
                    moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +
                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -
                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]) -
                    (-moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] +
                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +
                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -
                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);
            default:
                // TODO: why here is return 0, and in this._top there is no default at all (now it is throw error)?
                return 0;
        }
    }
    /**
     * Calculates statistical variance for a given cube.
     */
    _calculateVariance(cube) {
        const volumeRed = WuQuant._volume(cube, this._momentsRed);
        const volumeGreen = WuQuant._volume(cube, this._momentsGreen);
        const volumeBlue = WuQuant._volume(cube, this._momentsBlue);
        const volumeAlpha = WuQuant._volume(cube, this._momentsAlpha);
        const volumeMoment = WuQuant._volumeFloat(cube, this._moments);
        const volumeWeight = WuQuant._volume(cube, this._weights);
        const distance = volumeRed * volumeRed + volumeGreen * volumeGreen + volumeBlue * volumeBlue + volumeAlpha * volumeAlpha;
        return volumeMoment - (distance / volumeWeight);
    }
    /**
     * Finds the optimal (maximal) position for the cut.
     */
    _maximize(cube, direction, first, last, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight) {
        const bottomRed = WuQuant._bottom(cube, direction, this._momentsRed) | 0;
        const bottomGreen = WuQuant._bottom(cube, direction, this._momentsGreen) | 0;
        const bottomBlue = WuQuant._bottom(cube, direction, this._momentsBlue) | 0;
        const bottomAlpha = WuQuant._bottom(cube, direction, this._momentsAlpha) | 0;
        const bottomWeight = WuQuant._bottom(cube, direction, this._weights) | 0;
        let result = 0.0;
        let cutPosition = -1;
        for (let position = first; position < last; ++position) {
            // determines the cube cut at a certain position
            let halfRed = bottomRed + WuQuant._top(cube, direction, position, this._momentsRed);
            let halfGreen = bottomGreen + WuQuant._top(cube, direction, position, this._momentsGreen);
            let halfBlue = bottomBlue + WuQuant._top(cube, direction, position, this._momentsBlue);
            let halfAlpha = bottomAlpha + WuQuant._top(cube, direction, position, this._momentsAlpha);
            let halfWeight = bottomWeight + WuQuant._top(cube, direction, position, this._weights);
            // the cube cannot be cut at bottom (this would lead to empty cube)
            if (halfWeight !== 0) {
                let halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;
                let temp = halfDistance / halfWeight;
                halfRed = wholeRed - halfRed;
                halfGreen = wholeGreen - halfGreen;
                halfBlue = wholeBlue - halfBlue;
                halfAlpha = wholeAlpha - halfAlpha;
                halfWeight = wholeWeight - halfWeight;
                if (halfWeight !== 0) {
                    halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;
                    temp += halfDistance / halfWeight;
                    if (temp > result) {
                        result = temp;
                        cutPosition = position;
                    }
                }
            }
        }
        return { max: result, position: cutPosition };
    }
    // Cuts a cube with another one.
    _cut(first, second) {
        let direction;
        const wholeRed = WuQuant._volume(first, this._momentsRed);
        const wholeGreen = WuQuant._volume(first, this._momentsGreen);
        const wholeBlue = WuQuant._volume(first, this._momentsBlue);
        const wholeAlpha = WuQuant._volume(first, this._momentsAlpha);
        const wholeWeight = WuQuant._volume(first, this._weights);
        const red = this._maximize(first, WuQuant._red, first.redMinimum + 1, first.redMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);
        const green = this._maximize(first, WuQuant._green, first.greenMinimum + 1, first.greenMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);
        const blue = this._maximize(first, WuQuant._blue, first.blueMinimum + 1, first.blueMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);
        const alpha = this._maximize(first, WuQuant._alpha, first.alphaMinimum + 1, first.alphaMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);
        if (alpha.max >= red.max && alpha.max >= green.max && alpha.max >= blue.max) {
            direction = WuQuant._alpha;
            // cannot split empty cube
            if (alpha.position < 0)
                return false;
        }
        else {
            if (red.max >= alpha.max && red.max >= green.max && red.max >= blue.max) {
                direction = WuQuant._red;
            }
            else if (green.max >= alpha.max && green.max >= red.max && green.max >= blue.max) {
                direction = WuQuant._green;
            }
            else {
                direction = WuQuant._blue;
            }
        }
        second.redMaximum = first.redMaximum;
        second.greenMaximum = first.greenMaximum;
        second.blueMaximum = first.blueMaximum;
        second.alphaMaximum = first.alphaMaximum;
        // cuts in a certain direction
        switch (direction) {
            case WuQuant._red:
                second.redMinimum = first.redMaximum = red.position;
                second.greenMinimum = first.greenMinimum;
                second.blueMinimum = first.blueMinimum;
                second.alphaMinimum = first.alphaMinimum;
                break;
            case WuQuant._green:
                second.greenMinimum = first.greenMaximum = green.position;
                second.redMinimum = first.redMinimum;
                second.blueMinimum = first.blueMinimum;
                second.alphaMinimum = first.alphaMinimum;
                break;
            case WuQuant._blue:
                second.blueMinimum = first.blueMaximum = blue.position;
                second.redMinimum = first.redMinimum;
                second.greenMinimum = first.greenMinimum;
                second.alphaMinimum = first.alphaMinimum;
                break;
            case WuQuant._alpha:
                second.alphaMinimum = first.alphaMaximum = alpha.position;
                second.blueMinimum = first.blueMinimum;
                second.redMinimum = first.redMinimum;
                second.greenMinimum = first.greenMinimum;
                break;
        }
        // determines the volumes after cut
        first.volume = (first.redMaximum - first.redMinimum) * (first.greenMaximum - first.greenMinimum) * (first.blueMaximum - first.blueMinimum) * (first.alphaMaximum - first.alphaMinimum);
        second.volume = (second.redMaximum - second.redMinimum) * (second.greenMaximum - second.greenMinimum) * (second.blueMaximum - second.blueMinimum) * (second.alphaMaximum - second.alphaMinimum);
        // the cut was successful
        return true;
    }
    _initialize(colors) {
        this._colors = colors;
        // creates all the _cubes
        this._cubes = [];
        // initializes all the _cubes
        for (let cubeIndex = 0; cubeIndex < colors; cubeIndex++) {
            this._cubes[cubeIndex] = new WuColorCube();
        }
        // resets the reference minimums
        this._cubes[0].redMinimum = 0;
        this._cubes[0].greenMinimum = 0;
        this._cubes[0].blueMinimum = 0;
        this._cubes[0].alphaMinimum = 0;
        // resets the reference maximums
        this._cubes[0].redMaximum = this._maxSideIndex;
        this._cubes[0].greenMaximum = this._maxSideIndex;
        this._cubes[0].blueMaximum = this._maxSideIndex;
        this._cubes[0].alphaMaximum = this._alphaMaxSideIndex;
        this._weights = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);
        this._momentsRed = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);
        this._momentsGreen = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);
        this._momentsBlue = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);
        this._momentsAlpha = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);
        this._moments = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);
        this._table = [];
        for (let tableIndex = 0; tableIndex < 256; ++tableIndex) {
            this._table[tableIndex] = tableIndex * tableIndex;
        }
        this._pixels = [];
    }
    _setQuality(significantBitsPerChannel = 5) {
        this._significantBitsPerChannel = significantBitsPerChannel;
        this._maxSideIndex = 1 << this._significantBitsPerChannel;
        this._alphaMaxSideIndex = this._maxSideIndex;
        this._sideSize = this._maxSideIndex + 1;
        this._alphaSideSize = this._alphaMaxSideIndex + 1;
    }
}
WuQuant._alpha = 3;
WuQuant._red = 2;
WuQuant._green = 1;
WuQuant._blue = 0;
//# sourceMappingURL=wuQuant.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/quality/index.js":
/*!********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/quality/index.js ***!
  \********************************************************/
/*! exports provided: ssim */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ssim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssim */ "./node_modules/image-q/dist/esm/quality/ssim.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ssim", function() { return _ssim__WEBPACK_IMPORTED_MODULE_0__["ssim"]; });

/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * iq.ts - Image Quantization Library
 */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/quality/ssim.js":
/*!*******************************************************!*\
  !*** ./node_modules/image-q/dist/esm/quality/ssim.js ***!
  \*******************************************************/
/*! exports provided: ssim */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ssim", function() { return ssim; });
/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/bt709 */ "./node_modules/image-q/dist/esm/constants/bt709.js");

// based on https://github.com/rhys-e/structural-similarity
// http://en.wikipedia.org/wiki/Structural_similarity
const K1 = 0.01; // tslint:disable-line:naming-convention
const K2 = 0.03; // tslint:disable-line:naming-convention
function ssim(image1, image2) {
    if (image1.getHeight() !== image2.getHeight() || image1.getWidth() !== image2.getWidth()) {
        throw new Error('Images have different sizes!');
    }
    const bitsPerComponent = 8;
    const L = (1 << bitsPerComponent) - 1; // tslint:disable-line:naming-convention
    const c1 = Math.pow((K1 * L), 2);
    const c2 = Math.pow((K2 * L), 2);
    let numWindows = 0;
    let mssim = 0.0;
    // calculate ssim for each window
    iterate(image1, image2, (lumaValues1, lumaValues2, averageLumaValue1, averageLumaValue2) => {
        // calculate variance and covariance
        let sigxy = 0.0;
        let sigsqx = 0.0;
        let sigsqy = 0.0;
        for (let i = 0; i < lumaValues1.length; i++) {
            sigsqx += Math.pow((lumaValues1[i] - averageLumaValue1), 2);
            sigsqy += Math.pow((lumaValues2[i] - averageLumaValue2), 2);
            sigxy += (lumaValues1[i] - averageLumaValue1) * (lumaValues2[i] - averageLumaValue2);
        }
        const numPixelsInWin = lumaValues1.length - 1;
        sigsqx /= numPixelsInWin;
        sigsqy /= numPixelsInWin;
        sigxy /= numPixelsInWin;
        // perform ssim calculation on window
        const numerator = (2 * averageLumaValue1 * averageLumaValue2 + c1) * (2 * sigxy + c2);
        const denominator = (Math.pow(averageLumaValue1, 2) + Math.pow(averageLumaValue2, 2) + c1) * (sigsqx + sigsqy + c2);
        const ssim = numerator / denominator;
        mssim += ssim;
        numWindows++;
    });
    return mssim / numWindows;
}
function iterate(image1, image2, callback) {
    const windowSize = 8;
    const width = image1.getWidth();
    const height = image1.getHeight();
    for (let y = 0; y < height; y += windowSize) {
        for (let x = 0; x < width; x += windowSize) {
            // avoid out-of-width/height
            const windowWidth = Math.min(windowSize, width - x);
            const windowHeight = Math.min(windowSize, height - y);
            const lumaValues1 = calculateLumaValuesForWindow(image1, x, y, windowWidth, windowHeight);
            const lumaValues2 = calculateLumaValuesForWindow(image2, x, y, windowWidth, windowHeight);
            const averageLuma1 = calculateAverageLuma(lumaValues1);
            const averageLuma2 = calculateAverageLuma(lumaValues2);
            callback(lumaValues1, lumaValues2, averageLuma1, averageLuma2);
        }
    }
}
function calculateLumaValuesForWindow(image, x, y, width, height) {
    const pointArray = image.getPointArray();
    const lumaValues = [];
    let counter = 0;
    for (let j = y; j < y + height; j++) {
        const offset = j * image.getWidth();
        for (let i = x; i < x + width; i++) {
            const point = pointArray[offset + i];
            lumaValues[counter] = point.r * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__["Y"].RED + point.g * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__["Y"].GREEN + point.b * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__["Y"].BLUE;
            counter++;
        }
    }
    return lumaValues;
}
function calculateAverageLuma(lumaValues) {
    let sumLuma = 0.0;
    for (const luma of lumaValues) {
        sumLuma += luma;
    }
    return sumLuma / lumaValues.length;
}
//# sourceMappingURL=ssim.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/utils/arithmetic.js":
/*!***********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/utils/arithmetic.js ***!
  \***********************************************************/
/*! exports provided: degrees2radians, max3, min3, intInRange, inRange0to255Rounded, inRange0to255, stableSort */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "degrees2radians", function() { return degrees2radians; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max3", function() { return max3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min3", function() { return min3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intInRange", function() { return intInRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inRange0to255Rounded", function() { return inRange0to255Rounded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inRange0to255", function() { return inRange0to255; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stableSort", function() { return stableSort; });
function degrees2radians(n) {
    return n * (Math.PI / 180);
}
function max3(a, b, c) {
    let m = a;
    if (m < b)
        m = b;
    if (m < c)
        m = c;
    return m;
}
function min3(a, b, c) {
    let m = a;
    if (m > b)
        m = b;
    if (m > c)
        m = c;
    return m;
}
function intInRange(value, low, high) {
    if (value > high)
        value = high;
    if (value < low)
        value = low;
    return value | 0;
}
function inRange0to255Rounded(n) {
    n = Math.round(n);
    if (n > 255)
        n = 255;
    else if (n < 0)
        n = 0;
    return n;
}
function inRange0to255(n) {
    if (n > 255)
        n = 255;
    else if (n < 0)
        n = 0;
    return n;
}
function stableSort(arrayToSort, callback) {
    const type = typeof arrayToSort[0];
    let sorted;
    if (type === 'number' || type === 'string') {
        const ord = Object.create(null); // tslint:disable-line:no-null-keyword
        for (let i = 0, l = arrayToSort.length; i < l; i++) {
            const val = arrayToSort[i]; // tslint:disable-line:no-any
            if (ord[val] || ord[val] === 0)
                continue;
            ord[val] = i;
        }
        sorted = arrayToSort.sort(function (a, b) {
            return callback(a, b) || ord[a] - ord[b];
        });
    }
    else {
        const ord2 = arrayToSort.slice(0);
        sorted = arrayToSort.sort(function (a, b) {
            return callback(a, b) || ord2.indexOf(a) - ord2.indexOf(b);
        });
    }
    return sorted;
}
//# sourceMappingURL=arithmetic.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/utils/hueStatistics.js":
/*!**************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/utils/hueStatistics.js ***!
  \**************************************************************/
/*! exports provided: HueStatistics */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HueStatistics", function() { return HueStatistics; });
/* harmony import */ var _conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../conversion/rgb2hsl */ "./node_modules/image-q/dist/esm/conversion/rgb2hsl.js");
/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./palette */ "./node_modules/image-q/dist/esm/utils/palette.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * hueStatistics.ts - part of Image Quantization Library
 */


class HueGroup {
    constructor() {
        this.num = 0;
        this.cols = [];
    }
}
class HueStatistics {
    constructor(numGroups, minCols) {
        this._numGroups = numGroups;
        this._minCols = minCols;
        this._stats = [];
        for (let i = 0; i <= numGroups; i++) {
            this._stats[i] = new HueGroup();
        }
        this._groupsFull = 0;
    }
    check(i32) {
        if (this._groupsFull === this._numGroups + 1) {
            this.check = function () {
            };
        }
        const r = (i32 & 0xff);
        const g = (i32 >>> 8) & 0xff;
        const b = (i32 >>> 16) & 0xff;
        const hg = (r === g && g === b) ? 0 : 1 + Object(_palette__WEBPACK_IMPORTED_MODULE_1__["hueGroup"])(Object(_conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_0__["rgb2hsl"])(r, g, b).h, this._numGroups);
        const gr = this._stats[hg];
        const min = this._minCols;
        gr.num++;
        if (gr.num > min) {
            return;
        }
        if (gr.num === min) {
            this._groupsFull++;
        }
        if (gr.num <= min) {
            this._stats[hg].cols.push(i32);
        }
    }
    injectIntoDictionary(histG) {
        for (let i = 0; i <= this._numGroups; i++) {
            if (this._stats[i].num <= this._minCols) {
                this._stats[i].cols.forEach((col) => {
                    if (!histG[col]) {
                        histG[col] = 1;
                    }
                    else {
                        histG[col]++;
                    }
                });
            }
        }
    }
    injectIntoArray(histG) {
        for (let i = 0; i <= this._numGroups; i++) {
            if (this._stats[i].num <= this._minCols) {
                this._stats[i].cols.forEach((col) => {
                    if (histG.indexOf(col) === -1) {
                        histG.push(col);
                    }
                });
            }
        }
    }
}
//# sourceMappingURL=hueStatistics.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/utils/index.js":
/*!******************************************************!*\
  !*** ./node_modules/image-q/dist/esm/utils/index.js ***!
  \******************************************************/
/*! exports provided: Point, PointContainer, Palette, HueStatistics, ProgressTracker, arithmetic */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _arithmetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arithmetic */ "./node_modules/image-q/dist/esm/utils/arithmetic.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "arithmetic", function() { return _arithmetic__WEBPACK_IMPORTED_MODULE_0__; });
/* harmony import */ var _hueStatistics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hueStatistics */ "./node_modules/image-q/dist/esm/utils/hueStatistics.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HueStatistics", function() { return _hueStatistics__WEBPACK_IMPORTED_MODULE_1__["HueStatistics"]; });

/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./palette */ "./node_modules/image-q/dist/esm/utils/palette.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Palette", function() { return _palette__WEBPACK_IMPORTED_MODULE_2__["Palette"]; });

/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./point */ "./node_modules/image-q/dist/esm/utils/point.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Point", function() { return _point__WEBPACK_IMPORTED_MODULE_3__["Point"]; });

/* harmony import */ var _pointContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pointContainer */ "./node_modules/image-q/dist/esm/utils/pointContainer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PointContainer", function() { return _pointContainer__WEBPACK_IMPORTED_MODULE_4__["PointContainer"]; });

/* harmony import */ var _progressTracker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./progressTracker */ "./node_modules/image-q/dist/esm/utils/progressTracker.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProgressTracker", function() { return _progressTracker__WEBPACK_IMPORTED_MODULE_5__["ProgressTracker"]; });

/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * iq.ts - Image Quantization Library
 */







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/utils/palette.js":
/*!********************************************************!*\
  !*** ./node_modules/image-q/dist/esm/utils/palette.js ***!
  \********************************************************/
/*! exports provided: hueGroup, Palette */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hueGroup", function() { return hueGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Palette", function() { return Palette; });
/* harmony import */ var _pointContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointContainer */ "./node_modules/image-q/dist/esm/utils/pointContainer.js");
/* harmony import */ var _conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conversion/rgb2hsl */ "./node_modules/image-q/dist/esm/conversion/rgb2hsl.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * palette.ts - part of Image Quantization Library
 */


// TODO: make paletteArray via pointContainer, so, export will be available via pointContainer.exportXXX
const hueGroups = 10;
function hueGroup(hue, segmentsNumber) {
    const maxHue = 360;
    const seg = maxHue / segmentsNumber;
    const half = seg / 2;
    for (let i = 1, mid = seg - half; i < segmentsNumber; i++, mid += seg) {
        if (hue >= mid && hue < mid + seg)
            return i;
    }
    return 0;
}
class Palette {
    constructor() {
        this._pointArray = [];
        this._i32idx = {};
        this._pointContainer = new _pointContainer__WEBPACK_IMPORTED_MODULE_0__["PointContainer"]();
        this._pointContainer.setHeight(1);
        this._pointArray = this._pointContainer.getPointArray();
    }
    add(color) {
        this._pointArray.push(color);
        this._pointContainer.setWidth(this._pointArray.length);
    }
    has(color) {
        for (let i = this._pointArray.length - 1; i >= 0; i--) {
            if (color.uint32 === this._pointArray[i].uint32)
                return true;
        }
        return false;
    }
    // TOTRY: use HUSL - http://boronine.com/husl/ http://www.husl-colors.org/ https://github.com/husl-colors/husl
    getNearestColor(colorDistanceCalculator, color) {
        return this._pointArray[this._getNearestIndex(colorDistanceCalculator, color) | 0];
    }
    getPointContainer() {
        return this._pointContainer;
    }
    // TOTRY: use HUSL - http://boronine.com/husl/
    /*
     public nearestIndexByUint32(i32) {
     var idx : number = this._nearestPointFromCache("" + i32);
     if (idx >= 0) return idx;
  
     var min = 1000,
     rgb = [
     (i32 & 0xff),
     (i32 >>> 8) & 0xff,
     (i32 >>> 16) & 0xff,
     (i32 >>> 24) & 0xff
     ],
     len = this._pointArray.length;
  
     idx = 0;
     for (var i = 0; i < len; i++) {
     var dist = Utils.distEuclidean(rgb, this._pointArray[i].rgba);
  
     if (dist < min) {
     min = dist;
     idx = i;
     }
     }
  
     this._i32idx[i32] = idx;
     return idx;
     }
     */
    _nearestPointFromCache(key) {
        return typeof this._i32idx[key] === 'number' ? this._i32idx[key] : -1;
    }
    _getNearestIndex(colorDistanceCalculator, point) {
        let idx = this._nearestPointFromCache('' + point.uint32);
        if (idx >= 0)
            return idx;
        let minimalDistance = Number.MAX_VALUE;
        idx = 0;
        for (let i = 0, l = this._pointArray.length; i < l; i++) {
            const p = this._pointArray[i];
            const distance = colorDistanceCalculator.calculateRaw(point.r, point.g, point.b, point.a, p.r, p.g, p.b, p.a);
            if (distance < minimalDistance) {
                minimalDistance = distance;
                idx = i;
            }
        }
        this._i32idx[point.uint32] = idx;
        return idx;
    }
    /*
     public reduce(histogram : ColorHistogram, colors : number) {
     if (this._pointArray.length > colors) {
     var idxi32 = histogram.getImportanceSortedColorsIDXI32();
  
     // quantize histogram to existing palette
     var keep = [], uniqueColors = 0, idx, pruned = false;
  
     for (var i = 0, len = idxi32.length; i < len; i++) {
     // palette length reached, unset all remaining colors (sparse palette)
     if (uniqueColors >= colors) {
     this.prunePal(keep);
     pruned = true;
     break;
     } else {
     idx = this.nearestIndexByUint32(idxi32[i]);
     if (keep.indexOf(idx) < 0) {
     keep.push(idx);
     uniqueColors++;
     }
     }
     }
  
     if (!pruned) {
     this.prunePal(keep);
     }
     }
     }
  
     // TODO: check usage, not tested!
     public prunePal(keep : number[]) {
     var colors = this._pointArray.length;
     for (var colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {
     if (keep.indexOf(colorIndex) < 0) {
  
     if(colorIndex + 1 < colors) {
     this._pointArray[ colorIndex ] = this._pointArray [ colors - 1 ];
     }
     --colors;
     //this._pointArray[colorIndex] = null;
     }
     }
     console.log("colors pruned: " + (this._pointArray.length - colors));
     this._pointArray.length = colors;
     this._i32idx = {};
     }
     */
    // TODO: group very low lum and very high lum colors
    // TODO: pass custom sort order
    // TODO: sort criteria function should be placed to HueStats class
    sort() {
        this._i32idx = {};
        this._pointArray.sort((a, b) => {
            const hslA = Object(_conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_1__["rgb2hsl"])(a.r, a.g, a.b);
            const hslB = Object(_conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_1__["rgb2hsl"])(b.r, b.g, b.b);
            // sort all grays + whites together
            const hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + hueGroup(hslA.h, hueGroups);
            const hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + hueGroup(hslB.h, hueGroups);
            /*
             var hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + Utils.hueGroup(hslA.h, hueGroups);
             var hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + Utils.hueGroup(hslB.h, hueGroups);
             */
            const hueDiff = hueB - hueA;
            if (hueDiff)
                return -hueDiff;
            /*
             var lumDiff = Utils.lumGroup(+hslB.l.toFixed(2)) - Utils.lumGroup(+hslA.l.toFixed(2));
             if (lumDiff) return -lumDiff;
             */
            const lA = a.getLuminosity(true);
            const lB = b.getLuminosity(true);
            if (lB - lA !== 0)
                return lB - lA;
            const satDiff = ((hslB.s * 100) | 0) - ((hslA.s * 100) | 0);
            if (satDiff)
                return -satDiff;
            return 0;
        });
    }
}
//# sourceMappingURL=palette.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/utils/point.js":
/*!******************************************************!*\
  !*** ./node_modules/image-q/dist/esm/utils/point.js ***!
  \******************************************************/
/*! exports provided: Point */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Point", function() { return Point; });
/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/bt709 */ "./node_modules/image-q/dist/esm/constants/bt709.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * point.ts - part of Image Quantization Library
 */

/**
 * v8 optimized class
 * 1) "constructor" should have initialization with worst types
 * 2) "set" should have |0 / >>> 0
 */
class Point {
    // Lab : { L : number; a : number; b : number };
    static createByQuadruplet(quadruplet) {
        const point = new Point();
        point.r = quadruplet[0] | 0;
        point.g = quadruplet[1] | 0;
        point.b = quadruplet[2] | 0;
        point.a = quadruplet[3] | 0;
        point._loadUINT32();
        point._loadQuadruplet();
        // point._loadLab();
        return point;
    }
    static createByRGBA(red, green, blue, alpha) {
        const point = new Point();
        point.r = red | 0;
        point.g = green | 0;
        point.b = blue | 0;
        point.a = alpha | 0;
        point._loadUINT32();
        point._loadQuadruplet();
        // point._loadLab();
        return point;
    }
    static createByUint32(uint32) {
        const point = new Point();
        point.uint32 = uint32 >>> 0;
        point._loadRGBA();
        point._loadQuadruplet();
        // point._loadLab();
        return point;
    }
    constructor() {
        this.uint32 = -1 >>> 0;
        this.r = this.g = this.b = this.a = 0;
        this.rgba = new Array(4);
        this.rgba[0] = 0;
        this.rgba[1] = 0;
        this.rgba[2] = 0;
        this.rgba[3] = 0;
        /*
         this.Lab = {
         L : 0.0,
         a : 0.0,
         b : 0.0
         };
         */
    }
    from(point) {
        this.r = point.r;
        this.g = point.g;
        this.b = point.b;
        this.a = point.a;
        this.uint32 = point.uint32;
        this.rgba[0] = point.r;
        this.rgba[1] = point.g;
        this.rgba[2] = point.b;
        this.rgba[3] = point.a;
        /*
         this.Lab.L = point.Lab.L;
         this.Lab.a = point.Lab.a;
         this.Lab.b = point.Lab.b;
         */
    }
    /*
     * TODO:
     Luminance from RGB:
  
     Luminance (standard for certain colour spaces): (0.2126*R + 0.7152*G + 0.0722*B) [1]
     Luminance (perceived option 1): (0.299*R + 0.587*G + 0.114*B) [2]
     Luminance (perceived option 2, slower to calculate):  sqrt( 0.241*R^2 + 0.691*G^2 + 0.068*B^2 ) ? sqrt( 0.299*R^2 + 0.587*G^2 + 0.114*B^2 ) (thanks to @MatthewHerbst) [http://alienryderflex.com/hsp.html]
     */
    getLuminosity(useAlphaChannel) {
        let r = this.r;
        let g = this.g;
        let b = this.b;
        if (useAlphaChannel) {
            r = Math.min(255, 255 - this.a + this.a * r / 255);
            g = Math.min(255, 255 - this.a + this.a * g / 255);
            b = Math.min(255, 255 - this.a + this.a * b / 255);
        }
        // var luma = this.r * Point._RED_COEFFICIENT + this.g * Point._GREEN_COEFFICIENT + this.b * Point._BLUE_COEFFICIENT;
        /*
         if(useAlphaChannel) {
         luma = (luma * (255 - this.a)) / 255;
         }
         */
        return r * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__["Y"].RED + g * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__["Y"].GREEN + b * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__["Y"].BLUE;
    }
    _loadUINT32() {
        this.uint32 = (this.a << 24 | this.b << 16 | this.g << 8 | this.r) >>> 0;
    }
    _loadRGBA() {
        this.r = this.uint32 & 0xff;
        this.g = (this.uint32 >>> 8) & 0xff;
        this.b = (this.uint32 >>> 16) & 0xff;
        this.a = (this.uint32 >>> 24) & 0xff;
    }
    _loadQuadruplet() {
        this.rgba[0] = this.r;
        this.rgba[1] = this.g;
        this.rgba[2] = this.b;
        this.rgba[3] = this.a;
        /*
         var xyz = rgb2xyz(this.r, this.g, this.b);
         var lab = xyz2lab(xyz.x, xyz.y, xyz.z);
         this.lab.l = lab.l;
         this.lab.a = lab.a;
         this.lab.b = lab.b;
         */
    }
}
//# sourceMappingURL=point.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/utils/pointContainer.js":
/*!***************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/utils/pointContainer.js ***!
  \***************************************************************/
/*! exports provided: PointContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointContainer", function() { return PointContainer; });
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point */ "./node_modules/image-q/dist/esm/utils/point.js");
/**
 * @preserve
 * Copyright 2015-2018 Igor Bezkrovnyi
 * All rights reserved. (MIT Licensed)
 *
 * pointContainer.ts - part of Image Quantization Library
 */

/**
 * v8 optimizations done.
 * fromXXX methods are static to move out polymorphic code from class instance itself.
 */
class PointContainer {
    constructor() {
        this._width = 0;
        this._height = 0;
        this._pointArray = [];
    }
    getWidth() {
        return this._width;
    }
    getHeight() {
        return this._height;
    }
    setWidth(width) {
        this._width = width;
    }
    setHeight(height) {
        this._height = height;
    }
    getPointArray() {
        return this._pointArray;
    }
    clone() {
        const clone = new PointContainer();
        clone._width = this._width;
        clone._height = this._height;
        for (let i = 0, l = this._pointArray.length; i < l; i++) {
            clone._pointArray[i] = _point__WEBPACK_IMPORTED_MODULE_0__["Point"].createByUint32(this._pointArray[i].uint32 | 0); // "| 0" is added for v8 optimization
        }
        return clone;
    }
    toUint32Array() {
        const l = this._pointArray.length;
        const uint32Array = new Uint32Array(l);
        for (let i = 0; i < l; i++) {
            uint32Array[i] = this._pointArray[i].uint32;
        }
        return uint32Array;
    }
    toUint8Array() {
        return new Uint8Array(this.toUint32Array().buffer);
    }
    static fromHTMLImageElement(img) {
        const width = img.naturalWidth;
        const height = img.naturalHeight;
        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d'); // tslint:disable-line:no-non-null-assertion
        ctx.drawImage(img, 0, 0, width, height, 0, 0, width, height);
        return PointContainer.fromHTMLCanvasElement(canvas);
    }
    static fromHTMLCanvasElement(canvas) {
        const width = canvas.width;
        const height = canvas.height;
        const ctx = canvas.getContext('2d'); // tslint:disable-line:no-non-null-assertion
        const imgData = ctx.getImageData(0, 0, width, height);
        return PointContainer.fromImageData(imgData);
    }
    static fromImageData(imageData) {
        const width = imageData.width;
        const height = imageData.height;
        return PointContainer.fromUint8Array(imageData.data, width, height);
    }
    static fromUint8Array(uint8Array, width, height) {
        switch (Object.prototype.toString.call(uint8Array)) {
            case '[object Uint8ClampedArray]':
            case '[object Uint8Array]':
                break;
            default:
                uint8Array = new Uint8Array(uint8Array);
        }
        const uint32Array = new Uint32Array(uint8Array.buffer);
        return PointContainer.fromUint32Array(uint32Array, width, height);
    }
    static fromUint32Array(uint32Array, width, height) {
        const container = new PointContainer();
        container._width = width;
        container._height = height;
        for (let i = 0, l = uint32Array.length; i < l; i++) {
            container._pointArray[i] = _point__WEBPACK_IMPORTED_MODULE_0__["Point"].createByUint32(uint32Array[i] | 0); // "| 0" is added for v8 optimization
        }
        return container;
    }
    static fromBuffer(buffer, width, height) {
        const uint32Array = new Uint32Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint32Array.BYTES_PER_ELEMENT);
        return PointContainer.fromUint32Array(uint32Array, width, height);
    }
}
//# sourceMappingURL=pointContainer.js.map

/***/ }),

/***/ "./node_modules/image-q/dist/esm/utils/progressTracker.js":
/*!****************************************************************!*\
  !*** ./node_modules/image-q/dist/esm/utils/progressTracker.js ***!
  \****************************************************************/
/*! exports provided: ProgressTracker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgressTracker", function() { return ProgressTracker; });
class ProgressTracker {
    constructor(valueRange, progressRange) {
        this._range = valueRange;
        this._progressRange = progressRange;
        this._step = Math.max(1, this._range / (ProgressTracker.steps + 1) | 0);
        this._last = -this._step;
        this.progress = 0;
    }
    shouldNotify(current) {
        if (current - this._last >= this._step) {
            this._last = current;
            this.progress = Math.min(this._progressRange * this._last / this._range, this._progressRange);
            return true;
        }
        return false;
    }
}
ProgressTracker.steps = 100;
//# sourceMappingURL=progressTracker.js.map

/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    "use strict";
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    "use strict";

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";
    var isIE = (typeof window !== undefinedType) && (
        /Trident\/|MSIE /.test(window.navigator.userAgent)
    );

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Trace() doesn't print the message in IE, so for that case we need to wrap it
    function traceForIE() {
        if (console.log) {
            if (console.log.apply) {
                console.log.apply(console, arguments);
            } else {
                // In old IE, native console methods themselves don't have apply().
                Function.prototype.apply.apply(console.log, [console, arguments]);
            }
        }
        if (console.trace) console.trace();
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (methodName === 'trace' && isIE) {
            return traceForIE;
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;
      var storageKey = "loglevel";
      if (name) {
        storageKey += ":" + name;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if (typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    return defaultLogger;
}));


/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/events/events.js":
/*!**********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/events/events.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "./node_modules/omggif/omggif.js":
/*!***************************************!*\
  !*** ./node_modules/omggif/omggif.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// (c) Dean McNamee <dean@gmail.com>, 2013.
//
// https://github.com/deanm/omggif
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
// including animation and compression.  It does not rely on any specific
// underlying system, so should run in the browser, Node, or Plask.



function GifWriter(buf, width, height, gopts) {
  var p = 0;

  var gopts = gopts === undefined ? { } : gopts;
  var loop_count = gopts.loop === undefined ? null : gopts.loop;
  var global_palette = gopts.palette === undefined ? null : gopts.palette;

  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)
    throw new Error("Width/Height invalid.");

  function check_palette_and_num_colors(palette) {
    var num_colors = palette.length;
    if (num_colors < 2 || num_colors > 256 ||  num_colors & (num_colors-1)) {
      throw new Error(
          "Invalid code/color length, must be power of 2 and 2 .. 256.");
    }
    return num_colors;
  }

  // - Header.
  buf[p++] = 0x47; buf[p++] = 0x49; buf[p++] = 0x46;  // GIF
  buf[p++] = 0x38; buf[p++] = 0x39; buf[p++] = 0x61;  // 89a

  // Handling of Global Color Table (palette) and background index.
  var gp_num_colors_pow2 = 0;
  var background = 0;
  if (global_palette !== null) {
    var gp_num_colors = check_palette_and_num_colors(global_palette);
    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;
    gp_num_colors = 1 << gp_num_colors_pow2;
    --gp_num_colors_pow2;
    if (gopts.background !== undefined) {
      background = gopts.background;
      if (background >= gp_num_colors)
        throw new Error("Background index out of range.");
      // The GIF spec states that a background index of 0 should be ignored, so
      // this is probably a mistake and you really want to set it to another
      // slot in the palette.  But actually in the end most browsers, etc end
      // up ignoring this almost completely (including for dispose background).
      if (background === 0)
        throw new Error("Background index explicitly passed as 0.");
    }
  }

  // - Logical Screen Descriptor.
  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.
  buf[p++] = width & 0xff; buf[p++] = width >> 8 & 0xff;
  buf[p++] = height & 0xff; buf[p++] = height >> 8 & 0xff;
  // NOTE: Indicates 0-bpp original color resolution (unused?).
  buf[p++] = (global_palette !== null ? 0x80 : 0) |  // Global Color Table Flag.
             gp_num_colors_pow2;  // NOTE: No sort flag (unused?).
  buf[p++] = background;  // Background Color Index.
  buf[p++] = 0;  // Pixel aspect ratio (unused?).

  // - Global Color Table
  if (global_palette !== null) {
    for (var i = 0, il = global_palette.length; i < il; ++i) {
      var rgb = global_palette[i];
      buf[p++] = rgb >> 16 & 0xff;
      buf[p++] = rgb >> 8 & 0xff;
      buf[p++] = rgb & 0xff;
    }
  }

  if (loop_count !== null) {  // Netscape block for looping.
    if (loop_count < 0 || loop_count > 65535)
      throw new Error("Loop count invalid.")
    // Extension code, label, and length.
    buf[p++] = 0x21; buf[p++] = 0xff; buf[p++] = 0x0b;
    // NETSCAPE2.0
    buf[p++] = 0x4e; buf[p++] = 0x45; buf[p++] = 0x54; buf[p++] = 0x53;
    buf[p++] = 0x43; buf[p++] = 0x41; buf[p++] = 0x50; buf[p++] = 0x45;
    buf[p++] = 0x32; buf[p++] = 0x2e; buf[p++] = 0x30;
    // Sub-block
    buf[p++] = 0x03; buf[p++] = 0x01;
    buf[p++] = loop_count & 0xff; buf[p++] = loop_count >> 8 & 0xff;
    buf[p++] = 0x00;  // Terminator.
  }


  var ended = false;

  this.addFrame = function(x, y, w, h, indexed_pixels, opts) {
    if (ended === true) { --p; ended = false; }  // Un-end.

    opts = opts === undefined ? { } : opts;

    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual
    // canvas width/height, I imagine?
    if (x < 0 || y < 0 || x > 65535 || y > 65535)
      throw new Error("x/y invalid.")

    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)
      throw new Error("Width/Height invalid.")

    if (indexed_pixels.length < w * h)
      throw new Error("Not enough pixels for the frame size.");

    var using_local_palette = true;
    var palette = opts.palette;
    if (palette === undefined || palette === null) {
      using_local_palette = false;
      palette = global_palette;
    }

    if (palette === undefined || palette === null)
      throw new Error("Must supply either a local or global palette.");

    var num_colors = check_palette_and_num_colors(palette);

    // Compute the min_code_size (power of 2), destroying num_colors.
    var min_code_size = 0;
    while (num_colors >>= 1) ++min_code_size;
    num_colors = 1 << min_code_size;  // Now we can easily get it back.

    var delay = opts.delay === undefined ? 0 : opts.delay;

    // From the spec:
    //     0 -   No disposal specified. The decoder is
    //           not required to take any action.
    //     1 -   Do not dispose. The graphic is to be left
    //           in place.
    //     2 -   Restore to background color. The area used by the
    //           graphic must be restored to the background color.
    //     3 -   Restore to previous. The decoder is required to
    //           restore the area overwritten by the graphic with
    //           what was there prior to rendering the graphic.
    //  4-7 -    To be defined.
    // NOTE(deanm): Dispose background doesn't really work, apparently most
    // browsers ignore the background palette index and clear to transparency.
    var disposal = opts.disposal === undefined ? 0 : opts.disposal;
    if (disposal < 0 || disposal > 3)  // 4-7 is reserved.
      throw new Error("Disposal out of range.");

    var use_transparency = false;
    var transparent_index = 0;
    if (opts.transparent !== undefined && opts.transparent !== null) {
      use_transparency = true;
      transparent_index = opts.transparent;
      if (transparent_index < 0 || transparent_index >= num_colors)
        throw new Error("Transparent color index.");
    }

    if (disposal !== 0 || use_transparency || delay !== 0) {
      // - Graphics Control Extension
      buf[p++] = 0x21; buf[p++] = 0xf9;  // Extension / Label.
      buf[p++] = 4;  // Byte size.

      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);
      buf[p++] = delay & 0xff; buf[p++] = delay >> 8 & 0xff;
      buf[p++] = transparent_index;  // Transparent color index.
      buf[p++] = 0;  // Block Terminator.
    }

    // - Image Descriptor
    buf[p++] = 0x2c;  // Image Seperator.
    buf[p++] = x & 0xff; buf[p++] = x >> 8 & 0xff;  // Left.
    buf[p++] = y & 0xff; buf[p++] = y >> 8 & 0xff;  // Top.
    buf[p++] = w & 0xff; buf[p++] = w >> 8 & 0xff;
    buf[p++] = h & 0xff; buf[p++] = h >> 8 & 0xff;
    // NOTE: No sort flag (unused?).
    // TODO(deanm): Support interlace.
    buf[p++] = using_local_palette === true ? (0x80 | (min_code_size-1)) : 0;

    // - Local Color Table
    if (using_local_palette === true) {
      for (var i = 0, il = palette.length; i < il; ++i) {
        var rgb = palette[i];
        buf[p++] = rgb >> 16 & 0xff;
        buf[p++] = rgb >> 8 & 0xff;
        buf[p++] = rgb & 0xff;
      }
    }

    p = GifWriterOutputLZWCodeStream(
            buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);

    return p;
  };

  this.end = function() {
    if (ended === false) {
      buf[p++] = 0x3b;  // Trailer.
      ended = true;
    }
    return p;
  };

  this.getOutputBuffer = function() { return buf; };
  this.setOutputBuffer = function(v) { buf = v; };
  this.getOutputBufferPosition = function() { return p; };
  this.setOutputBufferPosition = function(v) { p = v; };
}

// Main compression routine, palette indexes -> LZW code stream.
// |index_stream| must have at least one entry.
function GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {
  buf[p++] = min_code_size;
  var cur_subblock = p++;  // Pointing at the length field.

  var clear_code = 1 << min_code_size;
  var code_mask = clear_code - 1;
  var eoi_code = clear_code + 1;
  var next_code = eoi_code + 1;

  var cur_code_size = min_code_size + 1;  // Number of bits per code.
  var cur_shift = 0;
  // We have at most 12-bit codes, so we should have to hold a max of 19
  // bits here (and then we would write out).
  var cur = 0;

  function emit_bytes_to_buffer(bit_block_size) {
    while (cur_shift >= bit_block_size) {
      buf[p++] = cur & 0xff;
      cur >>= 8; cur_shift -= 8;
      if (p === cur_subblock + 256) {  // Finished a subblock.
        buf[cur_subblock] = 255;
        cur_subblock = p++;
      }
    }
  }

  function emit_code(c) {
    cur |= c << cur_shift;
    cur_shift += cur_code_size;
    emit_bytes_to_buffer(8);
  }

  // I am not an expert on the topic, and I don't want to write a thesis.
  // However, it is good to outline here the basic algorithm and the few data
  // structures and optimizations here that make this implementation fast.
  // The basic idea behind LZW is to build a table of previously seen runs
  // addressed by a short id (herein called output code).  All data is
  // referenced by a code, which represents one or more values from the
  // original input stream.  All input bytes can be referenced as the same
  // value as an output code.  So if you didn't want any compression, you
  // could more or less just output the original bytes as codes (there are
  // some details to this, but it is the idea).  In order to achieve
  // compression, values greater then the input range (codes can be up to
  // 12-bit while input only 8-bit) represent a sequence of previously seen
  // inputs.  The decompressor is able to build the same mapping while
  // decoding, so there is always a shared common knowledge between the
  // encoding and decoder, which is also important for "timing" aspects like
  // how to handle variable bit width code encoding.
  //
  // One obvious but very important consequence of the table system is there
  // is always a unique id (at most 12-bits) to map the runs.  'A' might be
  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship
  // can be used for an effecient lookup strategy for the code mapping.  We
  // need to know if a run has been seen before, and be able to map that run
  // to the output code.  Since we start with known unique ids (input bytes),
  // and then from those build more unique ids (table entries), we can
  // continue this chain (almost like a linked list) to always have small
  // integer values that represent the current byte chains in the encoder.
  // This means instead of tracking the input bytes (AAAABCD) to know our
  // current state, we can track the table entry for AAAABC (it is guaranteed
  // to exist by the nature of the algorithm) and the next character D.
  // Therefor the tuple of (table_entry, byte) is guaranteed to also be
  // unique.  This allows us to create a simple lookup key for mapping input
  // sequences to codes (table indices) without having to store or search
  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the
  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our
  // key.  This leads to a integer value at most 20-bits, which can always
  // fit in an SMI value and be used as a fast sparse array / object key.

  // Output code for the current contents of the index buffer.
  var ib_code = index_stream[0] & code_mask;  // Load first input index.
  var code_table = { };  // Key'd on our 20-bit "tuple".

  emit_code(clear_code);  // Spec says first code should be a clear code.

  // First index already loaded, process the rest of the stream.
  for (var i = 1, il = index_stream.length; i < il; ++i) {
    var k = index_stream[i] & code_mask;
    var cur_key = ib_code << 8 | k;  // (prev, k) unique tuple.
    var cur_code = code_table[cur_key];  // buffer + k.

    // Check if we have to create a new code table entry.
    if (cur_code === undefined) {  // We don't have buffer + k.
      // Emit index buffer (without k).
      // This is an inline version of emit_code, because this is the core
      // writing routine of the compressor (and V8 cannot inline emit_code
      // because it is a closure here in a different context).  Additionally
      // we can call emit_byte_to_buffer less often, because we can have
      // 30-bits (from our 31-bit signed SMI), and we know our codes will only
      // be 12-bits, so can safely have 18-bits there without overflow.
      // emit_code(ib_code);
      cur |= ib_code << cur_shift;
      cur_shift += cur_code_size;
      while (cur_shift >= 8) {
        buf[p++] = cur & 0xff;
        cur >>= 8; cur_shift -= 8;
        if (p === cur_subblock + 256) {  // Finished a subblock.
          buf[cur_subblock] = 255;
          cur_subblock = p++;
        }
      }

      if (next_code === 4096) {  // Table full, need a clear.
        emit_code(clear_code);
        next_code = eoi_code + 1;
        cur_code_size = min_code_size + 1;
        code_table = { };
      } else {  // Table not full, insert a new entry.
        // Increase our variable bit code sizes if necessary.  This is a bit
        // tricky as it is based on "timing" between the encoding and
        // decoder.  From the encoders perspective this should happen after
        // we've already emitted the index buffer and are about to create the
        // first table entry that would overflow our current code bit size.
        if (next_code >= (1 << cur_code_size)) ++cur_code_size;
        code_table[cur_key] = next_code++;  // Insert into code table.
      }

      ib_code = k;  // Index buffer to single input k.
    } else {
      ib_code = cur_code;  // Index buffer to sequence in code table.
    }
  }

  emit_code(ib_code);  // There will still be something in the index buffer.
  emit_code(eoi_code);  // End Of Information.

  // Flush / finalize the sub-blocks stream to the buffer.
  emit_bytes_to_buffer(1);

  // Finish the sub-blocks, writing out any unfinished lengths and
  // terminating with a sub-block of length 0.  If we have already started
  // but not yet used a sub-block it can just become the terminator.
  if (cur_subblock + 1 === p) {  // Started but unused.
    buf[cur_subblock] = 0;
  } else {  // Started and used, write length and additional terminator block.
    buf[cur_subblock] = p - cur_subblock - 1;
    buf[p++] = 0;
  }
  return p;
}

function GifReader(buf) {
  var p = 0;

  // - Header (GIF87a or GIF89a).
  if (buf[p++] !== 0x47 ||            buf[p++] !== 0x49 || buf[p++] !== 0x46 ||
      buf[p++] !== 0x38 || (buf[p++]+1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {
    throw new Error("Invalid GIF 87a/89a header.");
  }

  // - Logical Screen Descriptor.
  var width = buf[p++] | buf[p++] << 8;
  var height = buf[p++] | buf[p++] << 8;
  var pf0 = buf[p++];  // <Packed Fields>.
  var global_palette_flag = pf0 >> 7;
  var num_global_colors_pow2 = pf0 & 0x7;
  var num_global_colors = 1 << (num_global_colors_pow2 + 1);
  var background = buf[p++];
  buf[p++];  // Pixel aspect ratio (unused?).

  var global_palette_offset = null;
  var global_palette_size   = null;

  if (global_palette_flag) {
    global_palette_offset = p;
    global_palette_size = num_global_colors;
    p += num_global_colors * 3;  // Seek past palette.
  }

  var no_eof = true;

  var frames = [ ];

  var delay = 0;
  var transparent_index = null;
  var disposal = 0;  // 0 - No disposal specified.
  var loop_count = null;

  this.width = width;
  this.height = height;

  while (no_eof && p < buf.length) {
    switch (buf[p++]) {
      case 0x21:  // Graphics Control Extension Block
        switch (buf[p++]) {
          case 0xff:  // Application specific block
            // Try if it's a Netscape block (with animation loop counter).
            if (buf[p   ] !== 0x0b ||  // 21 FF already read, check block size.
                // NETSCAPE2.0
                buf[p+1 ] == 0x4e && buf[p+2 ] == 0x45 && buf[p+3 ] == 0x54 &&
                buf[p+4 ] == 0x53 && buf[p+5 ] == 0x43 && buf[p+6 ] == 0x41 &&
                buf[p+7 ] == 0x50 && buf[p+8 ] == 0x45 && buf[p+9 ] == 0x32 &&
                buf[p+10] == 0x2e && buf[p+11] == 0x30 &&
                // Sub-block
                buf[p+12] == 0x03 && buf[p+13] == 0x01 && buf[p+16] == 0) {
              p += 14;
              loop_count = buf[p++] | buf[p++] << 8;
              p++;  // Skip terminator.
            } else {  // We don't know what it is, just try to get past it.
              p += 12;
              while (true) {  // Seek through subblocks.
                var block_size = buf[p++];
                // Bad block size (ex: undefined from an out of bounds read).
                if (!(block_size >= 0)) throw Error("Invalid block size");
                if (block_size === 0) break;  // 0 size is terminator
                p += block_size;
              }
            }
            break;

          case 0xf9:  // Graphics Control Extension
            if (buf[p++] !== 0x4 || buf[p+4] !== 0)
              throw new Error("Invalid graphics extension block.");
            var pf1 = buf[p++];
            delay = buf[p++] | buf[p++] << 8;
            transparent_index = buf[p++];
            if ((pf1 & 1) === 0) transparent_index = null;
            disposal = pf1 >> 2 & 0x7;
            p++;  // Skip terminator.
            break;

          case 0xfe:  // Comment Extension.
            while (true) {  // Seek through subblocks.
              var block_size = buf[p++];
              // Bad block size (ex: undefined from an out of bounds read).
              if (!(block_size >= 0)) throw Error("Invalid block size");
              if (block_size === 0) break;  // 0 size is terminator
              // console.log(buf.slice(p, p+block_size).toString('ascii'));
              p += block_size;
            }
            break;

          default:
            throw new Error(
                "Unknown graphic control label: 0x" + buf[p-1].toString(16));
        }
        break;

      case 0x2c:  // Image Descriptor.
        var x = buf[p++] | buf[p++] << 8;
        var y = buf[p++] | buf[p++] << 8;
        var w = buf[p++] | buf[p++] << 8;
        var h = buf[p++] | buf[p++] << 8;
        var pf2 = buf[p++];
        var local_palette_flag = pf2 >> 7;
        var interlace_flag = pf2 >> 6 & 1;
        var num_local_colors_pow2 = pf2 & 0x7;
        var num_local_colors = 1 << (num_local_colors_pow2 + 1);
        var palette_offset = global_palette_offset;
        var palette_size = global_palette_size;
        var has_local_palette = false;
        if (local_palette_flag) {
          var has_local_palette = true;
          palette_offset = p;  // Override with local palette.
          palette_size = num_local_colors;
          p += num_local_colors * 3;  // Seek past palette.
        }

        var data_offset = p;

        p++;  // codesize
        while (true) {
          var block_size = buf[p++];
          // Bad block size (ex: undefined from an out of bounds read).
          if (!(block_size >= 0)) throw Error("Invalid block size");
          if (block_size === 0) break;  // 0 size is terminator
          p += block_size;
        }

        frames.push({x: x, y: y, width: w, height: h,
                     has_local_palette: has_local_palette,
                     palette_offset: palette_offset,
                     palette_size: palette_size,
                     data_offset: data_offset,
                     data_length: p - data_offset,
                     transparent_index: transparent_index,
                     interlaced: !!interlace_flag,
                     delay: delay,
                     disposal: disposal});
        break;

      case 0x3b:  // Trailer Marker (end of file).
        no_eof = false;
        break;

      default:
        throw new Error("Unknown gif block: 0x" + buf[p-1].toString(16));
        break;
    }
  }

  this.numFrames = function() {
    return frames.length;
  };

  this.loopCount = function() {
    return loop_count;
  };

  this.frameInfo = function(frame_num) {
    if (frame_num < 0 || frame_num >= frames.length)
      throw new Error("Frame index out of range.");
    return frames[frame_num];
  }

  this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {
    var frame = this.frameInfo(frame_num);
    var num_pixels = frame.width * frame.height;
    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.
    GifReaderLZWOutputIndexStream(
        buf, frame.data_offset, index_stream, num_pixels);
    var palette_offset = frame.palette_offset;

    // NOTE(deanm): It seems to be much faster to compare index to 256 than
    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in
    // the profile, not sure if it's related to using a Uint8Array.
    var trans = frame.transparent_index;
    if (trans === null) trans = 256;

    // We are possibly just blitting to a portion of the entire frame.
    // That is a subrect within the framerect, so the additional pixels
    // must be skipped over after we finished a scanline.
    var framewidth  = frame.width;
    var framestride = width - framewidth;
    var xleft       = framewidth;  // Number of subrect pixels left in scanline.

    // Output indicies of the top left and bottom right corners of the subrect.
    var opbeg = ((frame.y * width) + frame.x) * 4;
    var opend = ((frame.y + frame.height) * width + frame.x) * 4;
    var op    = opbeg;

    var scanstride = framestride * 4;

    // Use scanstride to skip past the rows when interlacing.  This is skipping
    // 7 rows for the first two passes, then 3 then 1.
    if (frame.interlaced === true) {
      scanstride += width * 4 * 7;  // Pass 1.
    }

    var interlaceskip = 8;  // Tracking the row interval in the current pass.

    for (var i = 0, il = index_stream.length; i < il; ++i) {
      var index = index_stream[i];

      if (xleft === 0) {  // Beginning of new scan line
        op += scanstride;
        xleft = framewidth;
        if (op >= opend) { // Catch the wrap to switch passes when interlacing.
          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);
          // interlaceskip / 2 * 4 is interlaceskip << 1.
          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
          interlaceskip >>= 1;
        }
      }

      if (index === trans) {
        op += 4;
      } else {
        var r = buf[palette_offset + index * 3];
        var g = buf[palette_offset + index * 3 + 1];
        var b = buf[palette_offset + index * 3 + 2];
        pixels[op++] = b;
        pixels[op++] = g;
        pixels[op++] = r;
        pixels[op++] = 255;
      }
      --xleft;
    }
  };

  // I will go to copy and paste hell one day...
  this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {
    var frame = this.frameInfo(frame_num);
    var num_pixels = frame.width * frame.height;
    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.
    GifReaderLZWOutputIndexStream(
        buf, frame.data_offset, index_stream, num_pixels);
    var palette_offset = frame.palette_offset;

    // NOTE(deanm): It seems to be much faster to compare index to 256 than
    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in
    // the profile, not sure if it's related to using a Uint8Array.
    var trans = frame.transparent_index;
    if (trans === null) trans = 256;

    // We are possibly just blitting to a portion of the entire frame.
    // That is a subrect within the framerect, so the additional pixels
    // must be skipped over after we finished a scanline.
    var framewidth  = frame.width;
    var framestride = width - framewidth;
    var xleft       = framewidth;  // Number of subrect pixels left in scanline.

    // Output indicies of the top left and bottom right corners of the subrect.
    var opbeg = ((frame.y * width) + frame.x) * 4;
    var opend = ((frame.y + frame.height) * width + frame.x) * 4;
    var op    = opbeg;

    var scanstride = framestride * 4;

    // Use scanstride to skip past the rows when interlacing.  This is skipping
    // 7 rows for the first two passes, then 3 then 1.
    if (frame.interlaced === true) {
      scanstride += width * 4 * 7;  // Pass 1.
    }

    var interlaceskip = 8;  // Tracking the row interval in the current pass.

    for (var i = 0, il = index_stream.length; i < il; ++i) {
      var index = index_stream[i];

      if (xleft === 0) {  // Beginning of new scan line
        op += scanstride;
        xleft = framewidth;
        if (op >= opend) { // Catch the wrap to switch passes when interlacing.
          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);
          // interlaceskip / 2 * 4 is interlaceskip << 1.
          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
          interlaceskip >>= 1;
        }
      }

      if (index === trans) {
        op += 4;
      } else {
        var r = buf[palette_offset + index * 3];
        var g = buf[palette_offset + index * 3 + 1];
        var b = buf[palette_offset + index * 3 + 2];
        pixels[op++] = r;
        pixels[op++] = g;
        pixels[op++] = b;
        pixels[op++] = 255;
      }
      --xleft;
    }
  };
}

function GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {
  var min_code_size = code_stream[p++];

  var clear_code = 1 << min_code_size;
  var eoi_code = clear_code + 1;
  var next_code = eoi_code + 1;

  var cur_code_size = min_code_size + 1;  // Number of bits per code.
  // NOTE: This shares the same name as the encoder, but has a different
  // meaning here.  Here this masks each code coming from the code stream.
  var code_mask = (1 << cur_code_size) - 1;
  var cur_shift = 0;
  var cur = 0;

  var op = 0;  // Output pointer.

  var subblock_size = code_stream[p++];

  // TODO(deanm): Would using a TypedArray be any faster?  At least it would
  // solve the fast mode / backing store uncertainty.
  // var code_table = Array(4096);
  var code_table = new Int32Array(4096);  // Can be signed, we only use 20 bits.

  var prev_code = null;  // Track code-1.

  while (true) {
    // Read up to two bytes, making sure we always 12-bits for max sized code.
    while (cur_shift < 16) {
      if (subblock_size === 0) break;  // No more data to be read.

      cur |= code_stream[p++] << cur_shift;
      cur_shift += 8;

      if (subblock_size === 1) {  // Never let it get to 0 to hold logic above.
        subblock_size = code_stream[p++];  // Next subblock.
      } else {
        --subblock_size;
      }
    }

    // TODO(deanm): We should never really get here, we should have received
    // and EOI.
    if (cur_shift < cur_code_size)
      break;

    var code = cur & code_mask;
    cur >>= cur_code_size;
    cur_shift -= cur_code_size;

    // TODO(deanm): Maybe should check that the first code was a clear code,
    // at least this is what you're supposed to do.  But actually our encoder
    // now doesn't emit a clear code first anyway.
    if (code === clear_code) {
      // We don't actually have to clear the table.  This could be a good idea
      // for greater error checking, but we don't really do any anyway.  We
      // will just track it with next_code and overwrite old entries.

      next_code = eoi_code + 1;
      cur_code_size = min_code_size + 1;
      code_mask = (1 << cur_code_size) - 1;

      // Don't update prev_code ?
      prev_code = null;
      continue;
    } else if (code === eoi_code) {
      break;
    }

    // We have a similar situation as the decoder, where we want to store
    // variable length entries (code table entries), but we want to do in a
    // faster manner than an array of arrays.  The code below stores sort of a
    // linked list within the code table, and then "chases" through it to
    // construct the dictionary entries.  When a new entry is created, just the
    // last byte is stored, and the rest (prefix) of the entry is only
    // referenced by its table entry.  Then the code chases through the
    // prefixes until it reaches a single byte code.  We have to chase twice,
    // first to compute the length, and then to actually copy the data to the
    // output (backwards, since we know the length).  The alternative would be
    // storing something in an intermediate stack, but that doesn't make any
    // more sense.  I implemented an approach where it also stored the length
    // in the code table, although it's a bit tricky because you run out of
    // bits (12 + 12 + 8), but I didn't measure much improvements (the table
    // entries are generally not the long).  Even when I created benchmarks for
    // very long table entries the complexity did not seem worth it.
    // The code table stores the prefix entry in 12 bits and then the suffix
    // byte in 8 bits, so each entry is 20 bits.

    var chase_code = code < next_code ? code : prev_code;

    // Chase what we will output, either {CODE} or {CODE-1}.
    var chase_length = 0;
    var chase = chase_code;
    while (chase > clear_code) {
      chase = code_table[chase] >> 8;
      ++chase_length;
    }

    var k = chase;

    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);
    if (op_end > output_length) {
      console.log("Warning, gif stream longer than expected.");
      return;
    }

    // Already have the first byte from the chase, might as well write it fast.
    output[op++] = k;

    op += chase_length;
    var b = op;  // Track pointer, writing backwards.

    if (chase_code !== code)  // The case of emitting {CODE-1} + k.
      output[op++] = k;

    chase = chase_code;
    while (chase_length--) {
      chase = code_table[chase];
      output[--b] = chase & 0xff;  // Write backwards.
      chase >>= 8;  // Pull down to the prefix code.
    }

    if (prev_code !== null && next_code < 4096) {
      code_table[next_code++] = prev_code << 8 | k;
      // TODO(deanm): Figure out this clearing vs code growth logic better.  I
      // have an feeling that it should just happen somewhere else, for now it
      // is awkward between when we grow past the max and then hit a clear code.
      // For now just check if we hit the max 12-bits (then a clear code should
      // follow, also of course encoded in 12-bits).
      if (next_code >= code_mask+1 && cur_code_size < 12) {
        ++cur_code_size;
        code_mask = code_mask << 1 | 1;
      }
    }

    prev_code = code;
  }

  if (op !== output_length) {
    console.log("Warning, gif stream shorter than expected.");
  }

  return output;
}

// CommonJS.
try { exports.GifWriter = GifWriter; exports.GifReader = GifReader } catch(e) {}


/***/ }),

/***/ "./node_modules/punycode/punycode.js":
/*!*******************************************!*\
  !*** ./node_modules/punycode/punycode.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/sockjs-client/dist/sockjs.js":
/*!***************************************************!*\
  !*** ./node_modules/sockjs-client/dist/sockjs.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/* sockjs-client v1.4.0 | http://sockjs.org | MIT license */
(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
'use strict';

var transportList = require('./transport-list');

module.exports = require('./main')(transportList);

// TODO can't get rid of this until all servers do
if ('_sockjs_onload' in global) {
  setTimeout(global._sockjs_onload, 1);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./main":14,"./transport-list":16}],2:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function CloseEvent() {
  Event.call(this);
  this.initEvent('close', false, false);
  this.wasClean = false;
  this.code = 0;
  this.reason = '';
}

inherits(CloseEvent, Event);

module.exports = CloseEvent;

},{"./event":4,"inherits":57}],3:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventTarget = require('./eventtarget')
  ;

function EventEmitter() {
  EventTarget.call(this);
}

inherits(EventEmitter, EventTarget);

EventEmitter.prototype.removeAllListeners = function(type) {
  if (type) {
    delete this._listeners[type];
  } else {
    this._listeners = {};
  }
};

EventEmitter.prototype.once = function(type, listener) {
  var self = this
    , fired = false;

  function g() {
    self.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  this.on(type, g);
};

EventEmitter.prototype.emit = function() {
  var type = arguments[0];
  var listeners = this._listeners[type];
  if (!listeners) {
    return;
  }
  // equivalent of Array.prototype.slice.call(arguments, 1);
  var l = arguments.length;
  var args = new Array(l - 1);
  for (var ai = 1; ai < l; ai++) {
    args[ai - 1] = arguments[ai];
  }
  for (var i = 0; i < listeners.length; i++) {
    listeners[i].apply(this, args);
  }
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;

module.exports.EventEmitter = EventEmitter;

},{"./eventtarget":5,"inherits":57}],4:[function(require,module,exports){
'use strict';

function Event(eventType) {
  this.type = eventType;
}

Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
  this.type = eventType;
  this.bubbles = canBubble;
  this.cancelable = cancelable;
  this.timeStamp = +new Date();
  return this;
};

Event.prototype.stopPropagation = function() {};
Event.prototype.preventDefault = function() {};

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;

module.exports = Event;

},{}],5:[function(require,module,exports){
'use strict';

/* Simplified implementation of DOM2 EventTarget.
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
 */

function EventTarget() {
  this._listeners = {};
}

EventTarget.prototype.addEventListener = function(eventType, listener) {
  if (!(eventType in this._listeners)) {
    this._listeners[eventType] = [];
  }
  var arr = this._listeners[eventType];
  // #4
  if (arr.indexOf(listener) === -1) {
    // Make a copy so as not to interfere with a current dispatchEvent.
    arr = arr.concat([listener]);
  }
  this._listeners[eventType] = arr;
};

EventTarget.prototype.removeEventListener = function(eventType, listener) {
  var arr = this._listeners[eventType];
  if (!arr) {
    return;
  }
  var idx = arr.indexOf(listener);
  if (idx !== -1) {
    if (arr.length > 1) {
      // Make a copy so as not to interfere with a current dispatchEvent.
      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
    } else {
      delete this._listeners[eventType];
    }
    return;
  }
};

EventTarget.prototype.dispatchEvent = function() {
  var event = arguments[0];
  var t = event.type;
  // equivalent of Array.prototype.slice.call(arguments, 0);
  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
  // TODO: This doesn't match the real behavior; per spec, onfoo get
  // their place in line from the /first/ time they're set from
  // non-null. Although WebKit bumps it to the end every time it's
  // set.
  if (this['on' + t]) {
    this['on' + t].apply(this, args);
  }
  if (t in this._listeners) {
    // Grab a reference to the listeners list. removeEventListener may alter the list.
    var listeners = this._listeners[t];
    for (var i = 0; i < listeners.length; i++) {
      listeners[i].apply(this, args);
    }
  }
};

module.exports = EventTarget;

},{}],6:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function TransportMessageEvent(data) {
  Event.call(this);
  this.initEvent('message', false, false);
  this.data = data;
}

inherits(TransportMessageEvent, Event);

module.exports = TransportMessageEvent;

},{"./event":4,"inherits":57}],7:[function(require,module,exports){
'use strict';

var JSON3 = require('json3')
  , iframeUtils = require('./utils/iframe')
  ;

function FacadeJS(transport) {
  this._transport = transport;
  transport.on('message', this._transportMessage.bind(this));
  transport.on('close', this._transportClose.bind(this));
}

FacadeJS.prototype._transportClose = function(code, reason) {
  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
};
FacadeJS.prototype._transportMessage = function(frame) {
  iframeUtils.postMessage('t', frame);
};
FacadeJS.prototype._send = function(data) {
  this._transport.send(data);
};
FacadeJS.prototype._close = function() {
  this._transport.close();
  this._transport.removeAllListeners();
};

module.exports = FacadeJS;

},{"./utils/iframe":47,"json3":58}],8:[function(require,module,exports){
(function (process){
'use strict';

var urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , JSON3 = require('json3')
  , FacadeJS = require('./facade')
  , InfoIframeReceiver = require('./info-iframe-receiver')
  , iframeUtils = require('./utils/iframe')
  , loc = require('./location')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:iframe-bootstrap');
}

module.exports = function(SockJS, availableTransports) {
  var transportMap = {};
  availableTransports.forEach(function(at) {
    if (at.facadeTransport) {
      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
    }
  });

  // hard-coded for the info iframe
  // TODO see if we can make this more dynamic
  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
  var parentOrigin;

  /* eslint-disable camelcase */
  SockJS.bootstrap_iframe = function() {
    /* eslint-enable camelcase */
    var facade;
    iframeUtils.currentWindowId = loc.hash.slice(1);
    var onMessage = function(e) {
      if (e.source !== parent) {
        return;
      }
      if (typeof parentOrigin === 'undefined') {
        parentOrigin = e.origin;
      }
      if (e.origin !== parentOrigin) {
        return;
      }

      var iframeMessage;
      try {
        iframeMessage = JSON3.parse(e.data);
      } catch (ignored) {
        debug('bad json', e.data);
        return;
      }

      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
        return;
      }
      switch (iframeMessage.type) {
      case 's':
        var p;
        try {
          p = JSON3.parse(iframeMessage.data);
        } catch (ignored) {
          debug('bad json', iframeMessage.data);
          break;
        }
        var version = p[0];
        var transport = p[1];
        var transUrl = p[2];
        var baseUrl = p[3];
        debug(version, transport, transUrl, baseUrl);
        // change this to semver logic
        if (version !== SockJS.version) {
          throw new Error('Incompatible SockJS! Main site uses:' +
                    ' "' + version + '", the iframe:' +
                    ' "' + SockJS.version + '".');
        }

        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
          throw new Error('Can\'t connect to different domain from within an ' +
                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
        }
        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
        break;
      case 'm':
        facade._send(iframeMessage.data);
        break;
      case 'c':
        if (facade) {
          facade._close();
        }
        facade = null;
        break;
      }
    };

    eventUtils.attachEvent('message', onMessage);

    // Start
    iframeUtils.postMessage('s');
  };
};

}).call(this,{ env: {} })

},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,"debug":55,"json3":58}],9:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , objectUtils = require('./utils/object')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-ajax');
}

function InfoAjax(url, AjaxObject) {
  EventEmitter.call(this);

  var self = this;
  var t0 = +new Date();
  this.xo = new AjaxObject('GET', url);

  this.xo.once('finish', function(status, text) {
    var info, rtt;
    if (status === 200) {
      rtt = (+new Date()) - t0;
      if (text) {
        try {
          info = JSON3.parse(text);
        } catch (e) {
          debug('bad json', text);
        }
      }

      if (!objectUtils.isObject(info)) {
        info = {};
      }
    }
    self.emit('finish', info, rtt);
    self.removeAllListeners();
  });
}

inherits(InfoAjax, EventEmitter);

InfoAjax.prototype.close = function() {
  this.removeAllListeners();
  this.xo.close();
};

module.exports = InfoAjax;

}).call(this,{ env: {} })

},{"./utils/object":49,"debug":55,"events":3,"inherits":57,"json3":58}],10:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , JSON3 = require('json3')
  , XHRLocalObject = require('./transport/sender/xhr-local')
  , InfoAjax = require('./info-ajax')
  ;

function InfoReceiverIframe(transUrl) {
  var self = this;
  EventEmitter.call(this);

  this.ir = new InfoAjax(transUrl, XHRLocalObject);
  this.ir.once('finish', function(info, rtt) {
    self.ir = null;
    self.emit('message', JSON3.stringify([info, rtt]));
  });
}

inherits(InfoReceiverIframe, EventEmitter);

InfoReceiverIframe.transportName = 'iframe-info-receiver';

InfoReceiverIframe.prototype.close = function() {
  if (this.ir) {
    this.ir.close();
    this.ir = null;
  }
  this.removeAllListeners();
};

module.exports = InfoReceiverIframe;

},{"./info-ajax":9,"./transport/sender/xhr-local":37,"events":3,"inherits":57,"json3":58}],11:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , utils = require('./utils/event')
  , IframeTransport = require('./transport/iframe')
  , InfoReceiverIframe = require('./info-iframe-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-iframe');
}

function InfoIframe(baseUrl, url) {
  var self = this;
  EventEmitter.call(this);

  var go = function() {
    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);

    ifr.once('message', function(msg) {
      if (msg) {
        var d;
        try {
          d = JSON3.parse(msg);
        } catch (e) {
          debug('bad json', msg);
          self.emit('finish');
          self.close();
          return;
        }

        var info = d[0], rtt = d[1];
        self.emit('finish', info, rtt);
      }
      self.close();
    });

    ifr.once('close', function() {
      self.emit('finish');
      self.close();
    });
  };

  // TODO this seems the same as the 'needBody' from transports
  if (!global.document.body) {
    utils.attachEvent('load', go);
  } else {
    go();
  }
}

inherits(InfoIframe, EventEmitter);

InfoIframe.enabled = function() {
  return IframeTransport.enabled();
};

InfoIframe.prototype.close = function() {
  if (this.ifr) {
    this.ifr.close();
  }
  this.removeAllListeners();
  this.ifr = null;
};

module.exports = InfoIframe;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,"debug":55,"events":3,"inherits":57,"json3":58}],12:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , urlUtils = require('./utils/url')
  , XDR = require('./transport/sender/xdr')
  , XHRCors = require('./transport/sender/xhr-cors')
  , XHRLocal = require('./transport/sender/xhr-local')
  , XHRFake = require('./transport/sender/xhr-fake')
  , InfoIframe = require('./info-iframe')
  , InfoAjax = require('./info-ajax')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-receiver');
}

function InfoReceiver(baseUrl, urlInfo) {
  debug(baseUrl);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self.doXhr(baseUrl, urlInfo);
  }, 0);
}

inherits(InfoReceiver, EventEmitter);

// TODO this is currently ignoring the list of available transports and the whitelist

InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
  // determine method of CORS support (if needed)
  if (urlInfo.sameOrigin) {
    return new InfoAjax(url, XHRLocal);
  }
  if (XHRCors.enabled) {
    return new InfoAjax(url, XHRCors);
  }
  if (XDR.enabled && urlInfo.sameScheme) {
    return new InfoAjax(url, XDR);
  }
  if (InfoIframe.enabled()) {
    return new InfoIframe(baseUrl, url);
  }
  return new InfoAjax(url, XHRFake);
};

InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
  var self = this
    , url = urlUtils.addPath(baseUrl, '/info')
    ;
  debug('doXhr', url);

  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);

  this.timeoutRef = setTimeout(function() {
    debug('timeout');
    self._cleanup(false);
    self.emit('finish');
  }, InfoReceiver.timeout);

  this.xo.once('finish', function(info, rtt) {
    debug('finish', info, rtt);
    self._cleanup(true);
    self.emit('finish', info, rtt);
  });
};

InfoReceiver.prototype._cleanup = function(wasClean) {
  debug('_cleanup');
  clearTimeout(this.timeoutRef);
  this.timeoutRef = null;
  if (!wasClean && this.xo) {
    this.xo.close();
  }
  this.xo = null;
};

InfoReceiver.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  this._cleanup(false);
};

InfoReceiver.timeout = 8000;

module.exports = InfoReceiver;

}).call(this,{ env: {} })

},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,"debug":55,"events":3,"inherits":57}],13:[function(require,module,exports){
(function (global){
'use strict';

module.exports = global.location || {
  origin: 'http://localhost:80'
, protocol: 'http:'
, host: 'localhost'
, port: 80
, href: 'http://localhost/'
, hash: ''
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],14:[function(require,module,exports){
(function (process,global){
'use strict';

require('./shims');

var URL = require('url-parse')
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , random = require('./utils/random')
  , escape = require('./utils/escape')
  , urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , transport = require('./utils/transport')
  , objectUtils = require('./utils/object')
  , browser = require('./utils/browser')
  , log = require('./utils/log')
  , Event = require('./event/event')
  , EventTarget = require('./event/eventtarget')
  , loc = require('./location')
  , CloseEvent = require('./event/close')
  , TransportMessageEvent = require('./event/trans-message')
  , InfoReceiver = require('./info-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:main');
}

var transports;

// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
function SockJS(url, protocols, options) {
  if (!(this instanceof SockJS)) {
    return new SockJS(url, protocols, options);
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
  }
  EventTarget.call(this);

  this.readyState = SockJS.CONNECTING;
  this.extensions = '';
  this.protocol = '';

  // non-standard extension
  options = options || {};
  if (options.protocols_whitelist) {
    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
  }
  this._transportsWhitelist = options.transports;
  this._transportOptions = options.transportOptions || {};
  this._timeout = options.timeout || 0;

  var sessionId = options.sessionId || 8;
  if (typeof sessionId === 'function') {
    this._generateSessionId = sessionId;
  } else if (typeof sessionId === 'number') {
    this._generateSessionId = function() {
      return random.string(sessionId);
    };
  } else {
    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
  }

  this._server = options.server || random.numberString(1000);

  // Step 1 of WS spec - parse and validate the url. Issue #8
  var parsedUrl = new URL(url);
  if (!parsedUrl.host || !parsedUrl.protocol) {
    throw new SyntaxError("The URL '" + url + "' is invalid");
  } else if (parsedUrl.hash) {
    throw new SyntaxError('The URL must not contain a fragment');
  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
  }

  var secure = parsedUrl.protocol === 'https:';
  // Step 2 - don't allow secure origin with an insecure protocol
  if (loc.protocol === 'https:' && !secure) {
    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
  }

  // Step 3 - check port access - no need here
  // Step 4 - parse protocols argument
  if (!protocols) {
    protocols = [];
  } else if (!Array.isArray(protocols)) {
    protocols = [protocols];
  }

  // Step 5 - check protocols argument
  var sortedProtocols = protocols.sort();
  sortedProtocols.forEach(function(proto, i) {
    if (!proto) {
      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
    }
    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
    }
  });

  // Step 6 - convert origin
  var o = urlUtils.getOrigin(loc.href);
  this._origin = o ? o.toLowerCase() : null;

  // remove the trailing slash
  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

  // store the sanitized url
  this.url = parsedUrl.href;
  debug('using url', this.url);

  // Step 7 - start connection in background
  // obtain server info
  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
  this._urlInfo = {
    nullOrigin: !browser.hasDomain()
  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
  };

  this._ir = new InfoReceiver(this.url, this._urlInfo);
  this._ir.once('finish', this._receiveInfo.bind(this));
}

inherits(SockJS, EventTarget);

function userSetCode(code) {
  return code === 1000 || (code >= 3000 && code <= 4999);
}

SockJS.prototype.close = function(code, reason) {
  // Step 1
  if (code && !userSetCode(code)) {
    throw new Error('InvalidAccessError: Invalid code');
  }
  // Step 2.4 states the max is 123 bytes, but we are just checking length
  if (reason && reason.length > 123) {
    throw new SyntaxError('reason argument has an invalid length');
  }

  // Step 3.1
  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
    return;
  }

  // TODO look at docs to determine how to set this
  var wasClean = true;
  this._close(code || 1000, reason || 'Normal closure', wasClean);
};

SockJS.prototype.send = function(data) {
  // #13 - convert anything non-string to string
  // TODO this currently turns objects into [object Object]
  if (typeof data !== 'string') {
    data = '' + data;
  }
  if (this.readyState === SockJS.CONNECTING) {
    throw new Error('InvalidStateError: The connection has not been established yet');
  }
  if (this.readyState !== SockJS.OPEN) {
    return;
  }
  this._transport.send(escape.quote(data));
};

SockJS.version = require('./version');

SockJS.CONNECTING = 0;
SockJS.OPEN = 1;
SockJS.CLOSING = 2;
SockJS.CLOSED = 3;

SockJS.prototype._receiveInfo = function(info, rtt) {
  debug('_receiveInfo', rtt);
  this._ir = null;
  if (!info) {
    this._close(1002, 'Cannot connect to server');
    return;
  }

  // establish a round-trip timeout (RTO) based on the
  // round-trip time (RTT)
  this._rto = this.countRTO(rtt);
  // allow server to override url used for the actual transport
  this._transUrl = info.base_url ? info.base_url : this.url;
  info = objectUtils.extend(info, this._urlInfo);
  debug('info', info);
  // determine list of desired and supported transports
  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
  this._transports = enabledTransports.main;
  debug(this._transports.length + ' enabled transports');

  this._connect();
};

SockJS.prototype._connect = function() {
  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
    debug('attempt', Transport.transportName);
    if (Transport.needBody) {
      if (!global.document.body ||
          (typeof global.document.readyState !== 'undefined' &&
            global.document.readyState !== 'complete' &&
            global.document.readyState !== 'interactive')) {
        debug('waiting for body');
        this._transports.unshift(Transport);
        eventUtils.attachEvent('load', this._connect.bind(this));
        return;
      }
    }

    // calculate timeout based on RTO and round trips. Default to 5s
    var timeoutMs = Math.max(this._timeout, (this._rto * Transport.roundTrips) || 5000);
    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
    debug('using timeout', timeoutMs);

    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
    var options = this._transportOptions[Transport.transportName];
    debug('transport url', transportUrl);
    var transportObj = new Transport(transportUrl, this._transUrl, options);
    transportObj.on('message', this._transportMessage.bind(this));
    transportObj.once('close', this._transportClose.bind(this));
    transportObj.transportName = Transport.transportName;
    this._transport = transportObj;

    return;
  }
  this._close(2000, 'All transports failed', false);
};

SockJS.prototype._transportTimeout = function() {
  debug('_transportTimeout');
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transport) {
      this._transport.close();
    }

    this._transportClose(2007, 'Transport timed out');
  }
};

SockJS.prototype._transportMessage = function(msg) {
  debug('_transportMessage', msg);
  var self = this
    , type = msg.slice(0, 1)
    , content = msg.slice(1)
    , payload
    ;

  // first check for messages that don't need a payload
  switch (type) {
    case 'o':
      this._open();
      return;
    case 'h':
      this.dispatchEvent(new Event('heartbeat'));
      debug('heartbeat', this.transport);
      return;
  }

  if (content) {
    try {
      payload = JSON3.parse(content);
    } catch (e) {
      debug('bad json', content);
    }
  }

  if (typeof payload === 'undefined') {
    debug('empty payload', content);
    return;
  }

  switch (type) {
    case 'a':
      if (Array.isArray(payload)) {
        payload.forEach(function(p) {
          debug('message', self.transport, p);
          self.dispatchEvent(new TransportMessageEvent(p));
        });
      }
      break;
    case 'm':
      debug('message', this.transport, payload);
      this.dispatchEvent(new TransportMessageEvent(payload));
      break;
    case 'c':
      if (Array.isArray(payload) && payload.length === 2) {
        this._close(payload[0], payload[1], true);
      }
      break;
  }
};

SockJS.prototype._transportClose = function(code, reason) {
  debug('_transportClose', this.transport, code, reason);
  if (this._transport) {
    this._transport.removeAllListeners();
    this._transport = null;
    this.transport = null;
  }

  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
    this._connect();
    return;
  }

  this._close(code, reason);
};

SockJS.prototype._open = function() {
  debug('_open', this._transport && this._transport.transportName, this.readyState);
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transportTimeoutId) {
      clearTimeout(this._transportTimeoutId);
      this._transportTimeoutId = null;
    }
    this.readyState = SockJS.OPEN;
    this.transport = this._transport.transportName;
    this.dispatchEvent(new Event('open'));
    debug('connected', this.transport);
  } else {
    // The server might have been restarted, and lost track of our
    // connection.
    this._close(1006, 'Server lost session');
  }
};

SockJS.prototype._close = function(code, reason, wasClean) {
  debug('_close', this.transport, code, reason, wasClean, this.readyState);
  var forceFail = false;

  if (this._ir) {
    forceFail = true;
    this._ir.close();
    this._ir = null;
  }
  if (this._transport) {
    this._transport.close();
    this._transport = null;
    this.transport = null;
  }

  if (this.readyState === SockJS.CLOSED) {
    throw new Error('InvalidStateError: SockJS has already been closed');
  }

  this.readyState = SockJS.CLOSING;
  setTimeout(function() {
    this.readyState = SockJS.CLOSED;

    if (forceFail) {
      this.dispatchEvent(new Event('error'));
    }

    var e = new CloseEvent('close');
    e.wasClean = wasClean || false;
    e.code = code || 1000;
    e.reason = reason;

    this.dispatchEvent(e);
    this.onmessage = this.onclose = this.onerror = null;
    debug('disconnected');
  }.bind(this), 0);
};

// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
// and RFC 2988.
SockJS.prototype.countRTO = function(rtt) {
  // In a local environment, when using IE8/9 and the `jsonp-polling`
  // transport the time needed to establish a connection (the time that pass
  // from the opening of the transport to the call of `_dispatchOpen`) is
  // around 200msec (the lower bound used in the article above) and this
  // causes spurious timeouts. For this reason we calculate a value slightly
  // larger than that used in the article.
  if (rtt > 100) {
    return 4 * rtt; // rto > 400msec
  }
  return 300 + rtt; // 300msec < rto <= 400msec
};

module.exports = function(availableTransports) {
  transports = transport(availableTransports);
  require('./iframe-bootstrap')(SockJS, availableTransports);
  return SockJS;
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,"debug":55,"inherits":57,"json3":58,"url-parse":61}],15:[function(require,module,exports){
/* eslint-disable */
/* jscs: disable */
'use strict';

// pulled specific shims from https://github.com/es-shims/es5-shim

var ArrayPrototype = Array.prototype;
var ObjectPrototype = Object.prototype;
var FunctionPrototype = Function.prototype;
var StringPrototype = String.prototype;
var array_slice = ArrayPrototype.slice;

var _toString = ObjectPrototype.toString;
var isFunction = function (val) {
    return ObjectPrototype.toString.call(val) === '[object Function]';
};
var isArray = function isArray(obj) {
    return _toString.call(obj) === '[object Array]';
};
var isString = function isString(obj) {
    return _toString.call(obj) === '[object String]';
};

var supportsDescriptors = Object.defineProperty && (function () {
    try {
        Object.defineProperty({}, 'x', {});
        return true;
    } catch (e) { /* this is ES3 */
        return false;
    }
}());

// Define configurable, writable and non-enumerable props
// if they don't exist.
var defineProperty;
if (supportsDescriptors) {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
        });
    };
} else {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        object[name] = method;
    };
}
var defineProperties = function (object, map, forceAssign) {
    for (var name in map) {
        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
          defineProperty(object, name, map[name], forceAssign);
        }
    }
};

var toObject = function (o) {
    if (o == null) { // this matches both null and undefined
        throw new TypeError("can't convert " + o + ' to object');
    }
    return Object(o);
};

//
// Util
// ======
//

// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer

function toInteger(num) {
    var n = +num;
    if (n !== n) { // isNaN
        n = 0;
    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
}

function ToUint32(x) {
    return x >>> 0;
}

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

function Empty() {}

defineProperties(FunctionPrototype, {
    bind: function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = array_slice.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = target.apply(
                    this,
                    args.concat(array_slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return target.apply(
                    that,
                    args.concat(array_slice.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = Math.max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only
        // way to set the length property of a function.
        // In environments where Content Security Policies enabled (Chrome extensions,
        // for ex.) all use of eval or Function costructor throws an exception.
        // However in all of these environments Function.prototype.bind exists
        // and so this code will never be executed.
        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    }
});

//
// Array
// =====
//

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
defineProperties(Array, { isArray: isArray });


var boxedString = Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
    // Check node 0.6.21 bug where third parameter is not boxed
    var properlyBoxesNonStrict = true;
    var properlyBoxesStrict = true;
    if (method) {
        method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
        });

        method.call([1], function () {
            'use strict';
            properlyBoxesStrict = typeof this === 'string';
        }, 'x');
    }
    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
    forEach: function forEach(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && isString(this) ? this.split('') : object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                // context
                fun.call(thisp, self[i], i, object);
            }
        }
    }
}, !properlyBoxesContext(ArrayPrototype.forEach));

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
    indexOf: function indexOf(sought /*, fromIndex */ ) {
        var self = splitString && isString(this) ? this.split('') : toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = toInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : Math.max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === sought) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2IndexOfBug);

//
// String
// ======
//

// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

var string_split = StringPrototype.split;
if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === 't' ||
    'test'.split(/(?:)/, -1).length !== 4 ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

        StringPrototype.split = function (separator, limit) {
            var string = this;
            if (separator === void 0 && limit === 0) {
                return [];
            }

            // If `separator` is not a regex, use native split
            if (_toString.call(separator) !== '[object RegExp]') {
                return string_split.call(this, separator, limit);
            }

            var output = [],
                flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline  ? 'm' : '') +
                        (separator.extended   ? 'x' : '') + // Proposed for ES6
                        (separator.sticky     ? 'y' : ''), // Firefox 3+
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator2, match, lastIndex, lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            limit = limit === void 0 ?
                -1 >>> 0 : // Math.pow(2, 32) - 1
                ToUint32(limit);
            while (match = separator.exec(string)) {
                // `separator.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    output.push(string.slice(lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (arguments[i] === void 0) {
                                    match[i] = void 0;
                                }
                            }
                        });
                    }
                    if (match.length > 1 && match.index < string.length) {
                        ArrayPrototype.push.apply(output, match.slice(1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= limit) {
                        break;
                    }
                }
                if (separator.lastIndex === match.index) {
                    separator.lastIndex++; // Avoid an infinite loop
                }
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separator.test('')) {
                    output.push('');
                }
            } else {
                output.push(string.slice(lastLastIndex));
            }
            return output.length > limit ? output.slice(0, limit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ('0'.split(void 0, 0).length) {
    StringPrototype.split = function split(separator, limit) {
        if (separator === void 0 && limit === 0) { return []; }
        return string_split.call(this, separator, limit);
    };
}

// ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
    substr: function substr(start, length) {
        return string_substr.call(
            this,
            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
            length
        );
    }
}, hasNegativeSubstrBug);

},{}],16:[function(require,module,exports){
'use strict';

module.exports = [
  // streaming transports
  require('./transport/websocket')
, require('./transport/xhr-streaming')
, require('./transport/xdr-streaming')
, require('./transport/eventsource')
, require('./transport/lib/iframe-wrap')(require('./transport/eventsource'))

  // polling transports
, require('./transport/htmlfile')
, require('./transport/lib/iframe-wrap')(require('./transport/htmlfile'))
, require('./transport/xhr-polling')
, require('./transport/xdr-polling')
, require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling'))
, require('./transport/jsonp-polling')
];

},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , utils = require('../../utils/event')
  , urlUtils = require('../../utils/url')
  , XHR = global.XMLHttpRequest
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:browser:xhr');
}

function AbstractXHRObject(method, url, payload, opts) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function () {
    self._start(method, url, payload, opts);
  }, 0);
}

inherits(AbstractXHRObject, EventEmitter);

AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
  var self = this;

  try {
    this.xhr = new XHR();
  } catch (x) {
    // intentionally empty
  }

  if (!this.xhr) {
    debug('no xhr');
    this.emit('finish', 0, 'no xhr support');
    this._cleanup();
    return;
  }

  // several browsers cache POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  // Explorer tends to keep connection open, even after the
  // tab gets closed: http://bugs.jquery.com/ticket/5280
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload cleanup');
    self._cleanup(true);
  });
  try {
    this.xhr.open(method, url, true);
    if (this.timeout && 'timeout' in this.xhr) {
      this.xhr.timeout = this.timeout;
      this.xhr.ontimeout = function() {
        debug('xhr timeout');
        self.emit('finish', 0, '');
        self._cleanup(false);
      };
    }
  } catch (e) {
    debug('exception', e);
    // IE raises an exception on wrong port.
    this.emit('finish', 0, '');
    this._cleanup(false);
    return;
  }

  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
    debug('withCredentials');
    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
    // "This never affects same-site requests."

    this.xhr.withCredentials = true;
  }
  if (opts && opts.headers) {
    for (var key in opts.headers) {
      this.xhr.setRequestHeader(key, opts.headers[key]);
    }
  }

  this.xhr.onreadystatechange = function() {
    if (self.xhr) {
      var x = self.xhr;
      var text, status;
      debug('readyState', x.readyState);
      switch (x.readyState) {
      case 3:
        // IE doesn't like peeking into responseText or status
        // on Microsoft.XMLHTTP and readystate=3
        try {
          status = x.status;
          text = x.responseText;
        } catch (e) {
          // intentionally empty
        }
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }

        // IE does return readystate == 3 for 404 answers.
        if (status === 200 && text && text.length > 0) {
          debug('chunk');
          self.emit('chunk', status, text);
        }
        break;
      case 4:
        status = x.status;
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }
        // IE returns this for a bad port
        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
        if (status === 12005 || status === 12029) {
          status = 0;
        }

        debug('finish', status, x.responseText);
        self.emit('finish', status, x.responseText);
        self._cleanup(false);
        break;
      }
    }
  };

  try {
    self.xhr.send(payload);
  } catch (e) {
    self.emit('finish', 0, '');
    self._cleanup(false);
  }
};

AbstractXHRObject.prototype._cleanup = function(abort) {
  debug('cleanup');
  if (!this.xhr) {
    return;
  }
  this.removeAllListeners();
  utils.unloadDel(this.unloadRef);

  // IE needs this field to be a function
  this.xhr.onreadystatechange = function() {};
  if (this.xhr.ontimeout) {
    this.xhr.ontimeout = null;
  }

  if (abort) {
    try {
      this.xhr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xhr = null;
};

AbstractXHRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

AbstractXHRObject.enabled = !!XHR;
// override XMLHttpRequest for IE6/7
// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (!AbstractXHRObject.enabled && (axo in global)) {
  debug('overriding xmlhttprequest');
  XHR = function() {
    try {
      return new global[axo]('Microsoft.XMLHTTP');
    } catch (e) {
      return null;
    }
  };
  AbstractXHRObject.enabled = !!new XHR();
}

var cors = false;
try {
  cors = 'withCredentials' in new XHR();
} catch (ignored) {
  // intentionally empty
}

AbstractXHRObject.supportsCORS = cors;

module.exports = AbstractXHRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],18:[function(require,module,exports){
(function (global){
module.exports = global.EventSource;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
(function (global){
'use strict';

var Driver = global.WebSocket || global.MozWebSocket;
if (Driver) {
	module.exports = function WebSocketBrowserDriver(url) {
		return new Driver(url);
	};
} else {
	module.exports = undefined;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],20:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , EventSourceReceiver = require('./receiver/eventsource')
  , XHRCorsObject = require('./sender/xhr-cors')
  , EventSourceDriver = require('eventsource')
  ;

function EventSourceTransport(transUrl) {
  if (!EventSourceTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
}

inherits(EventSourceTransport, AjaxBasedTransport);

EventSourceTransport.enabled = function() {
  return !!EventSourceDriver;
};

EventSourceTransport.transportName = 'eventsource';
EventSourceTransport.roundTrips = 2;

module.exports = EventSourceTransport;

},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,"eventsource":18,"inherits":57}],21:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , HtmlfileReceiver = require('./receiver/htmlfile')
  , XHRLocalObject = require('./sender/xhr-local')
  , AjaxBasedTransport = require('./lib/ajax-based')
  ;

function HtmlFileTransport(transUrl) {
  if (!HtmlfileReceiver.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
}

inherits(HtmlFileTransport, AjaxBasedTransport);

HtmlFileTransport.enabled = function(info) {
  return HtmlfileReceiver.enabled && info.sameOrigin;
};

HtmlFileTransport.transportName = 'htmlfile';
HtmlFileTransport.roundTrips = 2;

module.exports = HtmlFileTransport;

},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,"inherits":57}],22:[function(require,module,exports){
(function (process){
'use strict';

// Few cool transports do work only for same-origin. In order to make
// them work cross-domain we shall use iframe, served from the
// remote domain. New browsers have capabilities to communicate with
// cross domain iframe using postMessage(). In IE it was implemented
// from IE 8+, but of course, IE got some details wrong:
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
//    http://stevesouders.com/misc/test-postmessage.php

var inherits = require('inherits')
  , JSON3 = require('json3')
  , EventEmitter = require('events').EventEmitter
  , version = require('../version')
  , urlUtils = require('../utils/url')
  , iframeUtils = require('../utils/iframe')
  , eventUtils = require('../utils/event')
  , random = require('../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:transport:iframe');
}

function IframeTransport(transport, transUrl, baseUrl) {
  if (!IframeTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  EventEmitter.call(this);

  var self = this;
  this.origin = urlUtils.getOrigin(baseUrl);
  this.baseUrl = baseUrl;
  this.transUrl = transUrl;
  this.transport = transport;
  this.windowId = random.string(8);

  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
  debug(transport, transUrl, iframeUrl);

  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
    debug('err callback');
    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
    self.close();
  });

  this.onmessageCallback = this._message.bind(this);
  eventUtils.attachEvent('message', this.onmessageCallback);
}

inherits(IframeTransport, EventEmitter);

IframeTransport.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  if (this.iframeObj) {
    eventUtils.detachEvent('message', this.onmessageCallback);
    try {
      // When the iframe is not loaded, IE raises an exception
      // on 'contentWindow'.
      this.postMessage('c');
    } catch (x) {
      // intentionally empty
    }
    this.iframeObj.cleanup();
    this.iframeObj = null;
    this.onmessageCallback = this.iframeObj = null;
  }
};

IframeTransport.prototype._message = function(e) {
  debug('message', e.data);
  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
    debug('not same origin', e.origin, this.origin);
    return;
  }

  var iframeMessage;
  try {
    iframeMessage = JSON3.parse(e.data);
  } catch (ignored) {
    debug('bad json', e.data);
    return;
  }

  if (iframeMessage.windowId !== this.windowId) {
    debug('mismatched window id', iframeMessage.windowId, this.windowId);
    return;
  }

  switch (iframeMessage.type) {
  case 's':
    this.iframeObj.loaded();
    // window global dependency
    this.postMessage('s', JSON3.stringify([
      version
    , this.transport
    , this.transUrl
    , this.baseUrl
    ]));
    break;
  case 't':
    this.emit('message', iframeMessage.data);
    break;
  case 'c':
    var cdata;
    try {
      cdata = JSON3.parse(iframeMessage.data);
    } catch (ignored) {
      debug('bad json', iframeMessage.data);
      return;
    }
    this.emit('close', cdata[0], cdata[1]);
    this.close();
    break;
  }
};

IframeTransport.prototype.postMessage = function(type, data) {
  debug('postMessage', type, data);
  this.iframeObj.post(JSON3.stringify({
    windowId: this.windowId
  , type: type
  , data: data || ''
  }), this.origin);
};

IframeTransport.prototype.send = function(message) {
  debug('send', message);
  this.postMessage('m', message);
};

IframeTransport.enabled = function() {
  return iframeUtils.iframeEnabled;
};

IframeTransport.transportName = 'iframe';
IframeTransport.roundTrips = 2;

module.exports = IframeTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,"debug":55,"events":3,"inherits":57,"json3":58}],23:[function(require,module,exports){
(function (global){
'use strict';

// The simplest and most robust transport, using the well-know cross
// domain hack - JSONP. This transport is quite inefficient - one
// message could use up to one http request. But at least it works almost
// everywhere.
// Known limitations:
//   o you will get a spinning cursor
//   o for Konqueror a dumb timer is needed to detect errors

var inherits = require('inherits')
  , SenderReceiver = require('./lib/sender-receiver')
  , JsonpReceiver = require('./receiver/jsonp')
  , jsonpSender = require('./sender/jsonp')
  ;

function JsonPTransport(transUrl) {
  if (!JsonPTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
}

inherits(JsonPTransport, SenderReceiver);

JsonPTransport.enabled = function() {
  return !!global.document;
};

JsonPTransport.transportName = 'jsonp-polling';
JsonPTransport.roundTrips = 1;
JsonPTransport.needBody = true;

module.exports = JsonPTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,"inherits":57}],24:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , SenderReceiver = require('./sender-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:ajax-based');
}

function createAjaxSender(AjaxObject) {
  return function(url, payload, callback) {
    debug('create ajax sender', url, payload);
    var opt = {};
    if (typeof payload === 'string') {
      opt.headers = {'Content-type': 'text/plain'};
    }
    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
    xo.once('finish', function(status) {
      debug('finish', status);
      xo = null;

      if (status !== 200 && status !== 204) {
        return callback(new Error('http status ' + status));
      }
      callback();
    });
    return function() {
      debug('abort');
      xo.close();
      xo = null;

      var err = new Error('Aborted');
      err.code = 1000;
      callback(err);
    };
  };
}

function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
}

inherits(AjaxBasedTransport, SenderReceiver);

module.exports = AjaxBasedTransport;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./sender-receiver":28,"debug":55,"inherits":57}],25:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:buffered-sender');
}

function BufferedSender(url, sender) {
  debug(url);
  EventEmitter.call(this);
  this.sendBuffer = [];
  this.sender = sender;
  this.url = url;
}

inherits(BufferedSender, EventEmitter);

BufferedSender.prototype.send = function(message) {
  debug('send', message);
  this.sendBuffer.push(message);
  if (!this.sendStop) {
    this.sendSchedule();
  }
};

// For polling transports in a situation when in the message callback,
// new message is being send. If the sending connection was started
// before receiving one, it is possible to saturate the network and
// timeout due to the lack of receiving socket. To avoid that we delay
// sending messages by some small time, in order to let receiving
// connection be started beforehand. This is only a halfmeasure and
// does not fix the big problem, but it does make the tests go more
// stable on slow networks.
BufferedSender.prototype.sendScheduleWait = function() {
  debug('sendScheduleWait');
  var self = this;
  var tref;
  this.sendStop = function() {
    debug('sendStop');
    self.sendStop = null;
    clearTimeout(tref);
  };
  tref = setTimeout(function() {
    debug('timeout');
    self.sendStop = null;
    self.sendSchedule();
  }, 25);
};

BufferedSender.prototype.sendSchedule = function() {
  debug('sendSchedule', this.sendBuffer.length);
  var self = this;
  if (this.sendBuffer.length > 0) {
    var payload = '[' + this.sendBuffer.join(',') + ']';
    this.sendStop = this.sender(this.url, payload, function(err) {
      self.sendStop = null;
      if (err) {
        debug('error', err);
        self.emit('close', err.code || 1006, 'Sending error: ' + err);
        self.close();
      } else {
        self.sendScheduleWait();
      }
    });
    this.sendBuffer = [];
  }
};

BufferedSender.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

BufferedSender.prototype.close = function() {
  debug('close');
  this._cleanup();
  if (this.sendStop) {
    this.sendStop();
    this.sendStop = null;
  }
};

module.exports = BufferedSender;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],26:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , IframeTransport = require('../iframe')
  , objectUtils = require('../../utils/object')
  ;

module.exports = function(transport) {

  function IframeWrapTransport(transUrl, baseUrl) {
    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
  }

  inherits(IframeWrapTransport, IframeTransport);

  IframeWrapTransport.enabled = function(url, info) {
    if (!global.document) {
      return false;
    }

    var iframeInfo = objectUtils.extend({}, info);
    iframeInfo.sameOrigin = true;
    return transport.enabled(iframeInfo) && IframeTransport.enabled();
  };

  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
  IframeWrapTransport.needBody = true;
  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

  IframeWrapTransport.facadeTransport = transport;

  return IframeWrapTransport;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/object":49,"../iframe":22,"inherits":57}],27:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:polling');
}

function Polling(Receiver, receiveUrl, AjaxObject) {
  debug(receiveUrl);
  EventEmitter.call(this);
  this.Receiver = Receiver;
  this.receiveUrl = receiveUrl;
  this.AjaxObject = AjaxObject;
  this._scheduleReceiver();
}

inherits(Polling, EventEmitter);

Polling.prototype._scheduleReceiver = function() {
  debug('_scheduleReceiver');
  var self = this;
  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);

  poll.on('message', function(msg) {
    debug('message', msg);
    self.emit('message', msg);
  });

  poll.once('close', function(code, reason) {
    debug('close', code, reason, self.pollIsClosing);
    self.poll = poll = null;

    if (!self.pollIsClosing) {
      if (reason === 'network') {
        self._scheduleReceiver();
      } else {
        self.emit('close', code || 1006, reason);
        self.removeAllListeners();
      }
    }
  });
};

Polling.prototype.abort = function() {
  debug('abort');
  this.removeAllListeners();
  this.pollIsClosing = true;
  if (this.poll) {
    this.poll.abort();
  }
};

module.exports = Polling;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],28:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , BufferedSender = require('./buffered-sender')
  , Polling = require('./polling')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender-receiver');
}

function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
  debug(pollUrl);
  var self = this;
  BufferedSender.call(this, transUrl, senderFunc);

  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
  this.poll.on('message', function(msg) {
    debug('poll message', msg);
    self.emit('message', msg);
  });
  this.poll.once('close', function(code, reason) {
    debug('poll close', code, reason);
    self.poll = null;
    self.emit('close', code, reason);
    self.close();
  });
}

inherits(SenderReceiver, BufferedSender);

SenderReceiver.prototype.close = function() {
  BufferedSender.prototype.close.call(this);
  debug('close');
  this.removeAllListeners();
  if (this.poll) {
    this.poll.abort();
    this.poll = null;
  }
};

module.exports = SenderReceiver;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,"debug":55,"inherits":57}],29:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , EventSourceDriver = require('eventsource')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:eventsource');
}

function EventSourceReceiver(url) {
  debug(url);
  EventEmitter.call(this);

  var self = this;
  var es = this.es = new EventSourceDriver(url);
  es.onmessage = function(e) {
    debug('message', e.data);
    self.emit('message', decodeURI(e.data));
  };
  es.onerror = function(e) {
    debug('error', es.readyState, e);
    // ES on reconnection has readyState = 0 or 1.
    // on network error it's CLOSED = 2
    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
    self._cleanup();
    self._close(reason);
  };
}

inherits(EventSourceReceiver, EventEmitter);

EventSourceReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

EventSourceReceiver.prototype._cleanup = function() {
  debug('cleanup');
  var es = this.es;
  if (es) {
    es.onmessage = es.onerror = null;
    es.close();
    this.es = null;
  }
};

EventSourceReceiver.prototype._close = function(reason) {
  debug('close', reason);
  var self = this;
  // Safari and chrome < 15 crash if we close window before
  // waiting for ES cleanup. See:
  // https://code.google.com/p/chromium/issues/detail?id=89155
  setTimeout(function() {
    self.emit('close', null, reason);
    self.removeAllListeners();
  }, 200);
};

module.exports = EventSourceReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"eventsource":18,"inherits":57}],30:[function(require,module,exports){
(function (process,global){
'use strict';

var inherits = require('inherits')
  , iframeUtils = require('../../utils/iframe')
  , urlUtils = require('../../utils/url')
  , EventEmitter = require('events').EventEmitter
  , random = require('../../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:htmlfile');
}

function HtmlfileReceiver(url) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  iframeUtils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));

  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
      iframeUtils.createHtmlfile : iframeUtils.createIframe;

  global[iframeUtils.WPrefix][this.id] = {
    start: function() {
      debug('start');
      self.iframeObj.loaded();
    }
  , message: function(data) {
      debug('message', data);
      self.emit('message', data);
    }
  , stop: function() {
      debug('stop');
      self._cleanup();
      self._close('network');
    }
  };
  this.iframeObj = constructFunc(url, function() {
    debug('callback');
    self._cleanup();
    self._close('permanent');
  });
}

inherits(HtmlfileReceiver, EventEmitter);

HtmlfileReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

HtmlfileReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  if (this.iframeObj) {
    this.iframeObj.cleanup();
    this.iframeObj = null;
  }
  delete global[iframeUtils.WPrefix][this.id];
};

HtmlfileReceiver.prototype._close = function(reason) {
  debug('_close', reason);
  this.emit('close', null, reason);
  this.removeAllListeners();
};

HtmlfileReceiver.htmlfileEnabled = false;

// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (axo in global) {
  try {
    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
  } catch (x) {
    // intentionally empty
  }
}

HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;

module.exports = HtmlfileReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],31:[function(require,module,exports){
(function (process,global){
'use strict';

var utils = require('../../utils/iframe')
  , random = require('../../utils/random')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:jsonp');
}

function JsonpReceiver(url) {
  debug(url);
  var self = this;
  EventEmitter.call(this);

  utils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));

  global[utils.WPrefix][this.id] = this._callback.bind(this);
  this._createScript(urlWithId);

  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
  this.timeoutId = setTimeout(function() {
    debug('timeout');
    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
  }, JsonpReceiver.timeout);
}

inherits(JsonpReceiver, EventEmitter);

JsonpReceiver.prototype.abort = function() {
  debug('abort');
  if (global[utils.WPrefix][this.id]) {
    var err = new Error('JSONP user aborted read');
    err.code = 1000;
    this._abort(err);
  }
};

JsonpReceiver.timeout = 35000;
JsonpReceiver.scriptErrorTimeout = 1000;

JsonpReceiver.prototype._callback = function(data) {
  debug('_callback', data);
  this._cleanup();

  if (this.aborting) {
    return;
  }

  if (data) {
    debug('message', data);
    this.emit('message', data);
  }
  this.emit('close', null, 'network');
  this.removeAllListeners();
};

JsonpReceiver.prototype._abort = function(err) {
  debug('_abort', err);
  this._cleanup();
  this.aborting = true;
  this.emit('close', err.code, err.message);
  this.removeAllListeners();
};

JsonpReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  clearTimeout(this.timeoutId);
  if (this.script2) {
    this.script2.parentNode.removeChild(this.script2);
    this.script2 = null;
  }
  if (this.script) {
    var script = this.script;
    // Unfortunately, you can't really abort script loading of
    // the script.
    script.parentNode.removeChild(script);
    script.onreadystatechange = script.onerror =
        script.onload = script.onclick = null;
    this.script = null;
  }
  delete global[utils.WPrefix][this.id];
};

JsonpReceiver.prototype._scriptError = function() {
  debug('_scriptError');
  var self = this;
  if (this.errorTimer) {
    return;
  }

  this.errorTimer = setTimeout(function() {
    if (!self.loadedOkay) {
      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
    }
  }, JsonpReceiver.scriptErrorTimeout);
};

JsonpReceiver.prototype._createScript = function(url) {
  debug('_createScript', url);
  var self = this;
  var script = this.script = global.document.createElement('script');
  var script2;  // Opera synchronous load trick.

  script.id = 'a' + random.string(8);
  script.src = url;
  script.type = 'text/javascript';
  script.charset = 'UTF-8';
  script.onerror = this._scriptError.bind(this);
  script.onload = function() {
    debug('onload');
    self._abort(new Error('JSONP script loaded abnormally (onload)'));
  };

  // IE9 fires 'error' event after onreadystatechange or before, in random order.
  // Use loadedOkay to determine if actually errored
  script.onreadystatechange = function() {
    debug('onreadystatechange', script.readyState);
    if (/loaded|closed/.test(script.readyState)) {
      if (script && script.htmlFor && script.onclick) {
        self.loadedOkay = true;
        try {
          // In IE, actually execute the script.
          script.onclick();
        } catch (x) {
          // intentionally empty
        }
      }
      if (script) {
        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
      }
    }
  };
  // IE: event/htmlFor/onclick trick.
  // One can't rely on proper order for onreadystatechange. In order to
  // make sure, set a 'htmlFor' and 'event' properties, so that
  // script code will be installed as 'onclick' handler for the
  // script object. Later, onreadystatechange, manually execute this
  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
  // set. For reference see:
  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
  // Also, read on that about script ordering:
  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
  if (typeof script.async === 'undefined' && global.document.attachEvent) {
    // According to mozilla docs, in recent browsers script.async defaults
    // to 'true', so we may use it to detect a good browser:
    // https://developer.mozilla.org/en/HTML/Element/script
    if (!browser.isOpera()) {
      // Naively assume we're in IE
      try {
        script.htmlFor = script.id;
        script.event = 'onclick';
      } catch (x) {
        // intentionally empty
      }
      script.async = true;
    } else {
      // Opera, second sync script hack
      script2 = this.script2 = global.document.createElement('script');
      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
      script.async = script2.async = false;
    }
  }
  if (typeof script.async !== 'undefined') {
    script.async = true;
  }

  var head = global.document.getElementsByTagName('head')[0];
  head.insertBefore(script, head.firstChild);
  if (script2) {
    head.insertBefore(script2, head.firstChild);
  }
};

module.exports = JsonpReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],32:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:xhr');
}

function XhrReceiver(url, AjaxObject) {
  debug(url);
  EventEmitter.call(this);
  var self = this;

  this.bufferPosition = 0;

  this.xo = new AjaxObject('POST', url, null);
  this.xo.on('chunk', this._chunkHandler.bind(this));
  this.xo.once('finish', function(status, text) {
    debug('finish', status, text);
    self._chunkHandler(status, text);
    self.xo = null;
    var reason = status === 200 ? 'network' : 'permanent';
    debug('close', reason);
    self.emit('close', null, reason);
    self._cleanup();
  });
}

inherits(XhrReceiver, EventEmitter);

XhrReceiver.prototype._chunkHandler = function(status, text) {
  debug('_chunkHandler', status);
  if (status !== 200 || !text) {
    return;
  }

  for (var idx = -1; ; this.bufferPosition += idx + 1) {
    var buf = text.slice(this.bufferPosition);
    idx = buf.indexOf('\n');
    if (idx === -1) {
      break;
    }
    var msg = buf.slice(0, idx);
    if (msg) {
      debug('message', msg);
      this.emit('message', msg);
    }
  }
};

XhrReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

XhrReceiver.prototype.abort = function() {
  debug('abort');
  if (this.xo) {
    this.xo.close();
    debug('close');
    this.emit('close', null, 'user');
    this.xo = null;
  }
  this._cleanup();
};

module.exports = XhrReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],33:[function(require,module,exports){
(function (process,global){
'use strict';

var random = require('../../utils/random')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:jsonp');
}

var form, area;

function createIframe(id) {
  debug('createIframe', id);
  try {
    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
    return global.document.createElement('<iframe name="' + id + '">');
  } catch (x) {
    var iframe = global.document.createElement('iframe');
    iframe.name = id;
    return iframe;
  }
}

function createForm() {
  debug('createForm');
  form = global.document.createElement('form');
  form.style.display = 'none';
  form.style.position = 'absolute';
  form.method = 'POST';
  form.enctype = 'application/x-www-form-urlencoded';
  form.acceptCharset = 'UTF-8';

  area = global.document.createElement('textarea');
  area.name = 'd';
  form.appendChild(area);

  global.document.body.appendChild(form);
}

module.exports = function(url, payload, callback) {
  debug(url, payload);
  if (!form) {
    createForm();
  }
  var id = 'a' + random.string(8);
  form.target = id;
  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);

  var iframe = createIframe(id);
  iframe.id = id;
  iframe.style.display = 'none';
  form.appendChild(iframe);

  try {
    area.value = payload;
  } catch (e) {
    // seriously broken browsers get here
  }
  form.submit();

  var completed = function(err) {
    debug('completed', id, err);
    if (!iframe.onerror) {
      return;
    }
    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
    // Opera mini doesn't like if we GC iframe
    // immediately, thus this timeout.
    setTimeout(function() {
      debug('cleaning up', id);
      iframe.parentNode.removeChild(iframe);
      iframe = null;
    }, 500);
    area.value = '';
    // It is not possible to detect if the iframe succeeded or
    // failed to submit our form.
    callback(err);
  };
  iframe.onerror = function() {
    debug('onerror', id);
    completed();
  };
  iframe.onload = function() {
    debug('onload', id);
    completed();
  };
  iframe.onreadystatechange = function(e) {
    debug('onreadystatechange', id, iframe.readyState, e);
    if (iframe.readyState === 'complete') {
      completed();
    }
  };
  return function() {
    debug('aborted', id);
    completed(new Error('Aborted'));
  };
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/random":50,"../../utils/url":52,"debug":55}],34:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , eventUtils = require('../../utils/event')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:xdr');
}

// References:
//   http://ajaxian.com/archives/100-line-ajax-wrapper
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

function XDRObject(method, url, payload) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self._start(method, url, payload);
  }, 0);
}

inherits(XDRObject, EventEmitter);

XDRObject.prototype._start = function(method, url, payload) {
  debug('_start');
  var self = this;
  var xdr = new global.XDomainRequest();
  // IE caches even POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  xdr.onerror = function() {
    debug('onerror');
    self._error();
  };
  xdr.ontimeout = function() {
    debug('ontimeout');
    self._error();
  };
  xdr.onprogress = function() {
    debug('progress', xdr.responseText);
    self.emit('chunk', 200, xdr.responseText);
  };
  xdr.onload = function() {
    debug('load');
    self.emit('finish', 200, xdr.responseText);
    self._cleanup(false);
  };
  this.xdr = xdr;
  this.unloadRef = eventUtils.unloadAdd(function() {
    self._cleanup(true);
  });
  try {
    // Fails with AccessDenied if port number is bogus
    this.xdr.open(method, url);
    if (this.timeout) {
      this.xdr.timeout = this.timeout;
    }
    this.xdr.send(payload);
  } catch (x) {
    this._error();
  }
};

XDRObject.prototype._error = function() {
  this.emit('finish', 0, '');
  this._cleanup(false);
};

XDRObject.prototype._cleanup = function(abort) {
  debug('cleanup', abort);
  if (!this.xdr) {
    return;
  }
  this.removeAllListeners();
  eventUtils.unloadDel(this.unloadRef);

  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
  if (abort) {
    try {
      this.xdr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xdr = null;
};

XDRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

// IE 8/9 if the request target uses the same scheme - #79
XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());

module.exports = XDRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],35:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRCorsObject(method, url, payload, opts) {
  XhrDriver.call(this, method, url, payload, opts);
}

inherits(XHRCorsObject, XhrDriver);

XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;

module.exports = XHRCorsObject;

},{"../driver/xhr":17,"inherits":57}],36:[function(require,module,exports){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  ;

function XHRFake(/* method, url, payload, opts */) {
  var self = this;
  EventEmitter.call(this);

  this.to = setTimeout(function() {
    self.emit('finish', 200, '{}');
  }, XHRFake.timeout);
}

inherits(XHRFake, EventEmitter);

XHRFake.prototype.close = function() {
  clearTimeout(this.to);
};

XHRFake.timeout = 2000;

module.exports = XHRFake;

},{"events":3,"inherits":57}],37:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRLocalObject(method, url, payload /*, opts */) {
  XhrDriver.call(this, method, url, payload, {
    noCredentials: true
  });
}

inherits(XHRLocalObject, XhrDriver);

XHRLocalObject.enabled = XhrDriver.enabled;

module.exports = XHRLocalObject;

},{"../driver/xhr":17,"inherits":57}],38:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('../utils/event')
  , urlUtils = require('../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , WebsocketDriver = require('./driver/websocket')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:websocket');
}

function WebSocketTransport(transUrl, ignore, options) {
  if (!WebSocketTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  EventEmitter.call(this);
  debug('constructor', transUrl);

  var self = this;
  var url = urlUtils.addPath(transUrl, '/websocket');
  if (url.slice(0, 5) === 'https') {
    url = 'wss' + url.slice(5);
  } else {
    url = 'ws' + url.slice(4);
  }
  this.url = url;

  this.ws = new WebsocketDriver(this.url, [], options);
  this.ws.onmessage = function(e) {
    debug('message event', e.data);
    self.emit('message', e.data);
  };
  // Firefox has an interesting bug. If a websocket connection is
  // created after onunload, it stays alive even when user
  // navigates away from the page. In such situation let's lie -
  // let's not open the ws connection at all. See:
  // https://github.com/sockjs/sockjs-client/issues/28
  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload');
    self.ws.close();
  });
  this.ws.onclose = function(e) {
    debug('close event', e.code, e.reason);
    self.emit('close', e.code, e.reason);
    self._cleanup();
  };
  this.ws.onerror = function(e) {
    debug('error event', e);
    self.emit('close', 1006, 'WebSocket connection broken');
    self._cleanup();
  };
}

inherits(WebSocketTransport, EventEmitter);

WebSocketTransport.prototype.send = function(data) {
  var msg = '[' + data + ']';
  debug('send', msg);
  this.ws.send(msg);
};

WebSocketTransport.prototype.close = function() {
  debug('close');
  var ws = this.ws;
  this._cleanup();
  if (ws) {
    ws.close();
  }
};

WebSocketTransport.prototype._cleanup = function() {
  debug('_cleanup');
  var ws = this.ws;
  if (ws) {
    ws.onmessage = ws.onclose = ws.onerror = null;
  }
  utils.unloadDel(this.unloadRef);
  this.unloadRef = this.ws = null;
  this.removeAllListeners();
};

WebSocketTransport.enabled = function() {
  debug('enabled');
  return !!WebsocketDriver;
};
WebSocketTransport.transportName = 'websocket';

// In theory, ws should require 1 round trip. But in chrome, this is
// not very stable over SSL. Most likely a ws connection requires a
// separate SSL connection, in which case 2 round trips are an
// absolute minumum.
WebSocketTransport.roundTrips = 2;

module.exports = WebSocketTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,"debug":55,"events":3,"inherits":57}],39:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XdrStreamingTransport = require('./xdr-streaming')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

function XdrPollingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
}

inherits(XdrPollingTransport, AjaxBasedTransport);

XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
XdrPollingTransport.transportName = 'xdr-polling';
XdrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,"inherits":57}],40:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

// According to:
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

function XdrStreamingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
}

inherits(XdrStreamingTransport, AjaxBasedTransport);

XdrStreamingTransport.enabled = function(info) {
  if (info.cookie_needed || info.nullOrigin) {
    return false;
  }
  return XDRObject.enabled && info.sameScheme;
};

XdrStreamingTransport.transportName = 'xdr-streaming';
XdrStreamingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrStreamingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"inherits":57}],41:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  ;

function XhrPollingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
}

inherits(XhrPollingTransport, AjaxBasedTransport);

XhrPollingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }

  if (XHRLocalObject.enabled && info.sameOrigin) {
    return true;
  }
  return XHRCorsObject.enabled;
};

XhrPollingTransport.transportName = 'xhr-polling';
XhrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XhrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],42:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  , browser = require('../utils/browser')
  ;

function XhrStreamingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
}

inherits(XhrStreamingTransport, AjaxBasedTransport);

XhrStreamingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }
  // Opera doesn't support xhr-streaming #60
  // But it might be able to #92
  if (browser.isOpera()) {
    return false;
  }

  return XHRCorsObject.enabled;
};

XhrStreamingTransport.transportName = 'xhr-streaming';
XhrStreamingTransport.roundTrips = 2; // preflight, ajax

// Safari gets confused when a streaming ajax request is started
// before onload. This causes the load indicator to spin indefinetely.
// Only require body when used in a browser
XhrStreamingTransport.needBody = !!global.document;

module.exports = XhrStreamingTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],43:[function(require,module,exports){
(function (global){
'use strict';

if (global.crypto && global.crypto.getRandomValues) {
  module.exports.randomBytes = function(length) {
    var bytes = new Uint8Array(length);
    global.crypto.getRandomValues(bytes);
    return bytes;
  };
} else {
  module.exports.randomBytes = function(length) {
    var bytes = new Array(length);
    for (var i = 0; i < length; i++) {
      bytes[i] = Math.floor(Math.random() * 256);
    }
    return bytes;
  };
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],44:[function(require,module,exports){
(function (global){
'use strict';

module.exports = {
  isOpera: function() {
    return global.navigator &&
      /opera/i.test(global.navigator.userAgent);
  }

, isKonqueror: function() {
    return global.navigator &&
      /konqueror/i.test(global.navigator.userAgent);
  }

  // #187 wrap document.domain in try/catch because of WP8 from file:///
, hasDomain: function () {
    // non-browser client always has a domain
    if (!global.document) {
      return true;
    }

    try {
      return !!global.document.domain;
    } catch (e) {
      return false;
    }
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],45:[function(require,module,exports){
'use strict';

var JSON3 = require('json3');

// Some extra characters that Chrome gets wrong, and substitutes with
// something else on the wire.
// eslint-disable-next-line no-control-regex
var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
  , extraLookup;

// This may be quite slow, so let's delay until user actually uses bad
// characters.
var unrollLookup = function(escapable) {
  var i;
  var unrolled = {};
  var c = [];
  for (i = 0; i < 65536; i++) {
    c.push( String.fromCharCode(i) );
  }
  escapable.lastIndex = 0;
  c.join('').replace(escapable, function(a) {
    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    return '';
  });
  escapable.lastIndex = 0;
  return unrolled;
};

// Quote string, also taking care of unicode characters that browsers
// often break. Especially, take care of unicode surrogates:
// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
module.exports = {
  quote: function(string) {
    var quoted = JSON3.stringify(string);

    // In most cases this should be very fast and good enough.
    extraEscapable.lastIndex = 0;
    if (!extraEscapable.test(quoted)) {
      return quoted;
    }

    if (!extraLookup) {
      extraLookup = unrollLookup(extraEscapable);
    }

    return quoted.replace(extraEscapable, function(a) {
      return extraLookup[a];
    });
  }
};

},{"json3":58}],46:[function(require,module,exports){
(function (global){
'use strict';

var random = require('./random');

var onUnload = {}
  , afterUnload = false
    // detect google chrome packaged apps because they don't allow the 'unload' event
  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
  ;

module.exports = {
  attachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.addEventListener(event, listener, false);
    } else if (global.document && global.attachEvent) {
      // IE quirks.
      // According to: http://stevesouders.com/misc/test-postmessage.php
      // the message gets delivered only to 'document', not 'window'.
      global.document.attachEvent('on' + event, listener);
      // I get 'window' for ie8.
      global.attachEvent('on' + event, listener);
    }
  }

, detachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.removeEventListener(event, listener, false);
    } else if (global.document && global.detachEvent) {
      global.document.detachEvent('on' + event, listener);
      global.detachEvent('on' + event, listener);
    }
  }

, unloadAdd: function(listener) {
    if (isChromePackagedApp) {
      return null;
    }

    var ref = random.string(8);
    onUnload[ref] = listener;
    if (afterUnload) {
      setTimeout(this.triggerUnloadCallbacks, 0);
    }
    return ref;
  }

, unloadDel: function(ref) {
    if (ref in onUnload) {
      delete onUnload[ref];
    }
  }

, triggerUnloadCallbacks: function() {
    for (var ref in onUnload) {
      onUnload[ref]();
      delete onUnload[ref];
    }
  }
};

var unloadTriggered = function() {
  if (afterUnload) {
    return;
  }
  afterUnload = true;
  module.exports.triggerUnloadCallbacks();
};

// 'unload' alone is not reliable in opera within an iframe, but we
// can't use `beforeunload` as IE fires it on javascript: links.
if (!isChromePackagedApp) {
  module.exports.attachEvent('unload', unloadTriggered);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./random":50}],47:[function(require,module,exports){
(function (process,global){
'use strict';

var eventUtils = require('./event')
  , JSON3 = require('json3')
  , browser = require('./browser')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:iframe');
}

module.exports = {
  WPrefix: '_jp'
, currentWindowId: null

, polluteGlobalNamespace: function() {
    if (!(module.exports.WPrefix in global)) {
      global[module.exports.WPrefix] = {};
    }
  }

, postMessage: function(type, data) {
    if (global.parent !== global) {
      global.parent.postMessage(JSON3.stringify({
        windowId: module.exports.currentWindowId
      , type: type
      , data: data || ''
      }), '*');
    } else {
      debug('Cannot postMessage, no parent window.', type, data);
    }
  }

, createIframe: function(iframeUrl, errorCallback) {
    var iframe = global.document.createElement('iframe');
    var tref, unloadRef;
    var unattach = function() {
      debug('unattach');
      clearTimeout(tref);
      // Explorer had problems with that.
      try {
        iframe.onload = null;
      } catch (x) {
        // intentionally empty
      }
      iframe.onerror = null;
    };
    var cleanup = function() {
      debug('cleanup');
      if (iframe) {
        unattach();
        // This timeout makes chrome fire onbeforeunload event
        // within iframe. Without the timeout it goes straight to
        // onunload.
        setTimeout(function() {
          if (iframe) {
            iframe.parentNode.removeChild(iframe);
          }
          iframe = null;
        }, 0);
        eventUtils.unloadDel(unloadRef);
      }
    };
    var onerror = function(err) {
      debug('onerror', err);
      if (iframe) {
        cleanup();
        errorCallback(err);
      }
    };
    var post = function(msg, origin) {
      debug('post', msg, origin);
      setTimeout(function() {
        try {
          // When the iframe is not loaded, IE raises an exception
          // on 'contentWindow'.
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(msg, origin);
          }
        } catch (x) {
          // intentionally empty
        }
      }, 0);
    };

    iframe.src = iframeUrl;
    iframe.style.display = 'none';
    iframe.style.position = 'absolute';
    iframe.onerror = function() {
      onerror('onerror');
    };
    iframe.onload = function() {
      debug('onload');
      // `onload` is triggered before scripts on the iframe are
      // executed. Give it few seconds to actually load stuff.
      clearTimeout(tref);
      tref = setTimeout(function() {
        onerror('onload timeout');
      }, 2000);
    };
    global.document.body.appendChild(iframe);
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }

/* eslint no-undef: "off", new-cap: "off" */
, createHtmlfile: function(iframeUrl, errorCallback) {
    var axo = ['Active'].concat('Object').join('X');
    var doc = new global[axo]('htmlfile');
    var tref, unloadRef;
    var iframe;
    var unattach = function() {
      clearTimeout(tref);
      iframe.onerror = null;
    };
    var cleanup = function() {
      if (doc) {
        unattach();
        eventUtils.unloadDel(unloadRef);
        iframe.parentNode.removeChild(iframe);
        iframe = doc = null;
        CollectGarbage();
      }
    };
    var onerror = function(r) {
      debug('onerror', r);
      if (doc) {
        cleanup();
        errorCallback(r);
      }
    };
    var post = function(msg, origin) {
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function() {
          if (iframe && iframe.contentWindow) {
              iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {
        // intentionally empty
      }
    };

    doc.open();
    doc.write('<html><s' + 'cript>' +
              'document.domain="' + global.document.domain + '";' +
              '</s' + 'cript></html>');
    doc.close();
    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
    var c = doc.createElement('div');
    doc.body.appendChild(c);
    iframe = doc.createElement('iframe');
    c.appendChild(iframe);
    iframe.src = iframeUrl;
    iframe.onerror = function() {
      onerror('onerror');
    };
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }
};

module.exports.iframeEnabled = false;
if (global.document) {
  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
  // huge delay, or not at all.
  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
    typeof global.postMessage === 'object') && (!browser.isKonqueror());
}

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./browser":44,"./event":46,"debug":55,"json3":58}],48:[function(require,module,exports){
(function (global){
'use strict';

var logObject = {};
['log', 'debug', 'warn'].forEach(function (level) {
  var levelExists;

  try {
    levelExists = global.console && global.console[level] && global.console[level].apply;
  } catch(e) {
    // do nothing
  }

  logObject[level] = levelExists ? function () {
    return global.console[level].apply(global.console, arguments);
  } : (level === 'log' ? function () {} : logObject.log);
});

module.exports = logObject;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],49:[function(require,module,exports){
'use strict';

module.exports = {
  isObject: function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  }

, extend: function(obj) {
    if (!this.isObject(obj)) {
      return obj;
    }
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  }
};

},{}],50:[function(require,module,exports){
'use strict';

/* global crypto:true */
var crypto = require('crypto');

// This string has length 32, a power of 2, so the modulus doesn't introduce a
// bias.
var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
module.exports = {
  string: function(length) {
    var max = _randomStringChars.length;
    var bytes = crypto.randomBytes(length);
    var ret = [];
    for (var i = 0; i < length; i++) {
      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
    }
    return ret.join('');
  }

, number: function(max) {
    return Math.floor(Math.random() * max);
  }

, numberString: function(max) {
    var t = ('' + (max - 1)).length;
    var p = new Array(t + 1).join('0');
    return (p + this.number(max)).slice(-t);
  }
};

},{"crypto":43}],51:[function(require,module,exports){
(function (process){
'use strict';

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:transport');
}

module.exports = function(availableTransports) {
  return {
    filterToEnabled: function(transportsWhitelist, info) {
      var transports = {
        main: []
      , facade: []
      };
      if (!transportsWhitelist) {
        transportsWhitelist = [];
      } else if (typeof transportsWhitelist === 'string') {
        transportsWhitelist = [transportsWhitelist];
      }

      availableTransports.forEach(function(trans) {
        if (!trans) {
          return;
        }

        if (trans.transportName === 'websocket' && info.websocket === false) {
          debug('disabled from server', 'websocket');
          return;
        }

        if (transportsWhitelist.length &&
            transportsWhitelist.indexOf(trans.transportName) === -1) {
          debug('not in whitelist', trans.transportName);
          return;
        }

        if (trans.enabled(info)) {
          debug('enabled', trans.transportName);
          transports.main.push(trans);
          if (trans.facadeTransport) {
            transports.facade.push(trans.facadeTransport);
          }
        } else {
          debug('disabled', trans.transportName);
        }
      });
      return transports;
    }
  };
};

}).call(this,{ env: {} })

},{"debug":55}],52:[function(require,module,exports){
(function (process){
'use strict';

var URL = require('url-parse');

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:url');
}

module.exports = {
  getOrigin: function(url) {
    if (!url) {
      return null;
    }

    var p = new URL(url);
    if (p.protocol === 'file:') {
      return null;
    }

    var port = p.port;
    if (!port) {
      port = (p.protocol === 'https:') ? '443' : '80';
    }

    return p.protocol + '//' + p.hostname + ':' + port;
  }

, isOriginEqual: function(a, b) {
    var res = this.getOrigin(a) === this.getOrigin(b);
    debug('same', a, b, res);
    return res;
  }

, isSchemeEqual: function(a, b) {
    return (a.split(':')[0] === b.split(':')[0]);
  }

, addPath: function (url, path) {
    var qs = url.split('?');
    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
  }

, addQuery: function (url, q) {
    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
  }
};

}).call(this,{ env: {} })

},{"debug":55,"url-parse":61}],53:[function(require,module,exports){
module.exports = '1.4.0';

},{}],54:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

},{}],55:[function(require,module,exports){
(function (process){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console;

  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = require('./common')(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};


}).call(this,{ env: {} })

},{"./common":56}],56:[function(require,module,exports){
"use strict";

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = require('ms');
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // Disabled?
      if (!debug.enabled) {
        return;
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @api public
  */


  function disable() {
    createDebug.enable('');
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;


},{"ms":54}],57:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],58:[function(require,module,exports){
(function (global){
/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],59:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String} The decoded string.
 * @api private
 */
function decode(input) {
  return decodeURIComponent(input.replace(/\+/g, ' '));
}

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g
    , result = {}
    , part;

  while (part = parser.exec(query)) {
    var key = decode(part[1])
      , value = decode(part[2]);

    //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    if (key in result) continue;
    result[key] = value;
  }

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = [];

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (var key in obj) {
    if (has.call(obj, key)) {
      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;

},{}],60:[function(require,module,exports){
'use strict';

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};

},{}],61:[function(require,module,exports){
(function (global){
'use strict';

var required = require('requires-port')
  , qs = require('querystringify')
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i
  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  function sanitize(address) {          // Sanitize what is left of the address
    return address.replace('\\', '/');
  },
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 };

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */
function lolcation(loc) {
  var location = global && global.location || {};
  loc = loc || location;

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @private
 */
function extractProtocol(address) {
  var match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */
function resolve(relative, base) {
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} location Location defaults for relative paths.
 * @param {Boolean|Function} parser Parser for the query string.
 * @private
 */
function Url(address, location, parser) {
  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }
      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
}

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

Url.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.qs = qs;

module.exports = Url;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"querystringify":59,"requires-port":60}]},{},[1])(1)
});


//# sourceMappingURL=sockjs.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(/*! punycode */ "./node_modules/punycode/punycode.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/BaseClient.js":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client/clients/BaseClient.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function BaseClient() {
    _classCallCheck(this, BaseClient);
  }

  _createClass(BaseClient, null, [{
    key: "getClientPath",
    value: function getClientPath(options) {
      throw new Error('Client needs implementation');
    }
  }]);

  return BaseClient;
}();

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js":
/*!***********************************************************!*\
  !*** (webpack)-dev-server/client/clients/SockJSClient.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SockJS = __webpack_require__(/*! sockjs-client/dist/sockjs */ "./node_modules/sockjs-client/dist/sockjs.js");

var BaseClient = __webpack_require__(/*! ./BaseClient */ "./node_modules/webpack-dev-server/client/clients/BaseClient.js");

module.exports =
/*#__PURE__*/
function (_BaseClient) {
  _inherits(SockJSClient, _BaseClient);

  function SockJSClient(url) {
    var _this;

    _classCallCheck(this, SockJSClient);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SockJSClient).call(this));
    _this.sock = new SockJS(url);

    _this.sock.onerror = function (err) {// TODO: use logger to log the error event once client and client-src
      // are reorganized to have the same directory structure
    };

    return _this;
  }

  _createClass(SockJSClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.sock.onopen = f;
    }
  }, {
    key: "onClose",
    value: function onClose(f) {
      this.sock.onclose = f;
    } // call f with the message string as the first argument

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.sock.onmessage = function (e) {
        f(e.data);
      };
    }
  }], [{
    key: "getClientPath",
    value: function getClientPath(options) {
      return /*require.resolve*/(/*! ./SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
    }
  }]);

  return SockJSClient;
}(BaseClient);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?http://localhost:9000":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client?http://localhost:9000 ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {
/* global __resourceQuery WorkerGlobalScope self */

/* eslint prefer-destructuring: off */

var stripAnsi = __webpack_require__(/*! strip-ansi */ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js");

var socket = __webpack_require__(/*! ./socket */ "./node_modules/webpack-dev-server/client/socket.js");

var overlay = __webpack_require__(/*! ./overlay */ "./node_modules/webpack-dev-server/client/overlay.js");

var _require = __webpack_require__(/*! ./utils/log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log,
    setLogLevel = _require.setLogLevel;

var sendMessage = __webpack_require__(/*! ./utils/sendMessage */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");

var reloadApp = __webpack_require__(/*! ./utils/reloadApp */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");

var createSocketUrl = __webpack_require__(/*! ./utils/createSocketUrl */ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js");

var status = {
  isUnloading: false,
  currentHash: ''
};
var options = {
  hot: false,
  hotReload: true,
  liveReload: false,
  initial: true,
  useWarningOverlay: false,
  useErrorOverlay: false,
  useProgress: false
};
var socketUrl = createSocketUrl(__resourceQuery);
self.addEventListener('beforeunload', function () {
  status.isUnloading = true;
});

if (typeof window !== 'undefined') {
  var qs = window.location.search.toLowerCase();
  options.hotReload = qs.indexOf('hotreload=false') === -1;
}

var onSocketMessage = {
  hot: function hot() {
    options.hot = true;
    log.info('[WDS] Hot Module Replacement enabled.');
  },
  liveReload: function liveReload() {
    options.liveReload = true;
    log.info('[WDS] Live Reloading enabled.');
  },
  invalid: function invalid() {
    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('Invalid');
  },
  hash: function hash(_hash) {
    status.currentHash = _hash;
  },
  'still-ok': function stillOk() {
    log.info('[WDS] Nothing changed.');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('StillOk');
  },
  'log-level': function logLevel(level) {
    var hotCtx = __webpack_require__("./node_modules/webpack/hot sync ^\\.\\/log$");

    if (hotCtx.keys().indexOf('./log') !== -1) {
      hotCtx('./log').setLogLevel(level);
    }

    setLogLevel(level);
  },
  overlay: function overlay(value) {
    if (typeof document !== 'undefined') {
      if (typeof value === 'boolean') {
        options.useWarningOverlay = false;
        options.useErrorOverlay = value;
      } else if (value) {
        options.useWarningOverlay = value.warnings;
        options.useErrorOverlay = value.errors;
      }
    }
  },
  progress: function progress(_progress) {
    if (typeof document !== 'undefined') {
      options.useProgress = _progress;
    }
  },
  'progress-update': function progressUpdate(data) {
    if (options.useProgress) {
      log.info("[WDS] ".concat(data.percent, "% - ").concat(data.msg, "."));
    }

    sendMessage('Progress', data);
  },
  ok: function ok() {
    sendMessage('Ok');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  'content-changed': function contentChanged() {
    log.info('[WDS] Content base changed. Reloading...');
    self.location.reload();
  },
  warnings: function warnings(_warnings) {
    log.warn('[WDS] Warnings while compiling.');

    var strippedWarnings = _warnings.map(function (warning) {
      return stripAnsi(warning);
    });

    sendMessage('Warnings', strippedWarnings);

    for (var i = 0; i < strippedWarnings.length; i++) {
      log.warn(strippedWarnings[i]);
    }

    if (options.useWarningOverlay) {
      overlay.showMessage(_warnings);
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  errors: function errors(_errors) {
    log.error('[WDS] Errors while compiling. Reload prevented.');

    var strippedErrors = _errors.map(function (error) {
      return stripAnsi(error);
    });

    sendMessage('Errors', strippedErrors);

    for (var i = 0; i < strippedErrors.length; i++) {
      log.error(strippedErrors[i]);
    }

    if (options.useErrorOverlay) {
      overlay.showMessage(_errors);
    }

    options.initial = false;
  },
  error: function error(_error) {
    log.error(_error);
  },
  close: function close() {
    log.error('[WDS] Disconnected!');
    sendMessage('Close');
  }
};
socket(socketUrl, onSocketMessage);
/* WEBPACK VAR INJECTION */}.call(this, "?http://localhost:9000"))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!**********************************************!*\
  !*** (webpack)-dev-server/client/overlay.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).

var ansiHTML = __webpack_require__(/*! ansi-html */ "./node_modules/ansi-html/index.js");

var _require = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/index.js"),
    AllHtmlEntities = _require.AllHtmlEntities;

var entities = new AllHtmlEntities();
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
var overlayIframe = null;
var overlayDiv = null;
var lastOnOverlayDivReady = null;
ansiHTML.setColors(colors);

function createOverlayIframe(onIframeLoad) {
  var iframe = document.createElement('iframe');
  iframe.id = 'webpack-dev-server-client-overlay';
  iframe.src = 'about:blank';
  iframe.style.position = 'fixed';
  iframe.style.left = 0;
  iframe.style.top = 0;
  iframe.style.right = 0;
  iframe.style.bottom = 0;
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.border = 'none';
  iframe.style.zIndex = 9999999999;
  iframe.onload = onIframeLoad;
  return iframe;
}

function addOverlayDivTo(iframe) {
  var div = iframe.contentDocument.createElement('div');
  div.id = 'webpack-dev-server-client-overlay-div';
  div.style.position = 'fixed';
  div.style.boxSizing = 'border-box';
  div.style.left = 0;
  div.style.top = 0;
  div.style.right = 0;
  div.style.bottom = 0;
  div.style.width = '100vw';
  div.style.height = '100vh';
  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
  div.style.color = '#E8E8E8';
  div.style.fontFamily = 'Menlo, Consolas, monospace';
  div.style.fontSize = 'large';
  div.style.padding = '2rem';
  div.style.lineHeight = '1.2';
  div.style.whiteSpace = 'pre-wrap';
  div.style.overflow = 'auto';
  iframe.contentDocument.body.appendChild(div);
  return div;
}

function ensureOverlayDivExists(onOverlayDivReady) {
  if (overlayDiv) {
    // Everything is ready, call the callback right away.
    onOverlayDivReady(overlayDiv);
    return;
  } // Creating an iframe may be asynchronous so we'll schedule the callback.
  // In case of multiple calls, last callback wins.


  lastOnOverlayDivReady = onOverlayDivReady;

  if (overlayIframe) {
    // We've already created it.
    return;
  } // Create iframe and, when it is ready, a div inside it.


  overlayIframe = createOverlayIframe(function () {
    overlayDiv = addOverlayDivTo(overlayIframe); // Now we can talk!

    lastOnOverlayDivReady(overlayDiv);
  }); // Zalgo alert: onIframeLoad() will be called either synchronously
  // or asynchronously depending on the browser.
  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.

  document.body.appendChild(overlayIframe);
} // Successful compilation.


function clear() {
  if (!overlayDiv) {
    // It is not there in the first place.
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(overlayIframe);
  overlayDiv = null;
  overlayIframe = null;
  lastOnOverlayDivReady = null;
} // Compilation with errors (e.g. syntax error or missing modules).


function showMessage(messages) {
  ensureOverlayDivExists(function (div) {
    // Make it look similar to our terminal.
    div.innerHTML = "<span style=\"color: #".concat(colors.red, "\">Failed to compile.</span><br><br>").concat(ansiHTML(entities.encode(messages[0])));
  });
}

module.exports = {
  clear: clear,
  showMessage: showMessage
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!*********************************************!*\
  !*** (webpack)-dev-server/client/socket.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__webpack_dev_server_client__) {
/* global __webpack_dev_server_client__ */

/* eslint-disable
  camelcase
*/
// this SockJSClient is here as a default fallback, in case inline mode
// is off or the client is not injected. This will be switched to
// WebsocketClient when it becomes the default
// important: the path to SockJSClient here is made to work in the 'client'
// directory, but is updated via the webpack compilation when compiled from
// the 'client-src' directory

var Client = typeof __webpack_dev_server_client__ !== 'undefined' ? __webpack_dev_server_client__ : // eslint-disable-next-line import/no-unresolved
__webpack_require__(/*! ./clients/SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
var retries = 0;
var client = null;

var socket = function initSocket(url, handlers) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(function () {
        socket(url, handlers);
      }, retryInMs);
    }
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (handlers[msg.type]) {
      handlers[msg.type](msg.data);
    }
  });
};

module.exports = socket;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! (webpack)-dev-server/client/clients/SockJSClient.js */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js")))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":
/*!************************************************************!*\
  !*** (webpack)-dev-server/client/utils/createSocketUrl.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global self */

var url = __webpack_require__(/*! url */ "./node_modules/url/url.js");

var querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

var getCurrentScriptSource = __webpack_require__(/*! ./getCurrentScriptSource */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

function createSocketUrl(resourceQuery) {
  var urlParts;

  if (typeof resourceQuery === 'string' && resourceQuery !== '') {
    // If this bundle is inlined, use the resource query to get the correct url.
    urlParts = url.parse(resourceQuery.substr(1));
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptHost = getCurrentScriptSource();

    if (scriptHost) {
      // eslint-disable-next-line no-useless-escape
      scriptHost = scriptHost.replace(/\/[^\/]+$/, '');
    }

    urlParts = url.parse(scriptHost || '/', false, true);
  }

  if (!urlParts.port || urlParts.port === '0') {
    urlParts.port = self.location.port;
  }

  var _urlParts = urlParts,
      auth = _urlParts.auth,
      path = _urlParts.path;
  var _urlParts2 = urlParts,
      hostname = _urlParts2.hostname,
      protocol = _urlParts2.protocol; // check ipv4 and ipv6 `all hostname`
  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384

  var isAnyHostname = (hostname === '0.0.0.0' || hostname === '::') && self.location.hostname && // eslint-disable-next-line no-bitwise
  !!~self.location.protocol.indexOf('http');

  if (isAnyHostname) {
    hostname = self.location.hostname;
  } // `hostname` can be empty when the script path is relative. In that case, specifying
  // a protocol would result in an invalid URL.
  // When https is used in the app, secure websockets are always necessary
  // because the browser doesn't accept non-secure websockets.


  if (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {
    protocol = self.location.protocol;
  } // default values of the sock url if they are not provided


  var sockHost = hostname;
  var sockPath = '/sockjs-node';
  var sockPort = urlParts.port; // eslint-disable-next-line no-undefined

  var shouldParsePath = path !== null && path !== undefined && path !== '/';

  if (shouldParsePath) {
    var parsedQuery = querystring.parse(path); // all of these sock url params are optionally passed in through
    // resourceQuery, so we need to fall back to the default if
    // they are not provided

    sockHost = parsedQuery.sockHost || sockHost;
    sockPath = parsedQuery.sockPath || sockPath;
    sockPort = parsedQuery.sockPort || sockPort;
  }

  return url.format({
    protocol: protocol,
    auth: auth,
    hostname: sockHost,
    port: sockPort,
    // If sockPath is provided it'll be passed in via the resourceQuery as a
    // query param so it has to be parsed out of the querystring in order for the
    // client to open the socket to the correct location.
    pathname: sockPath
  });
}

module.exports = createSocketUrl;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!*******************************************************************!*\
  !*** (webpack)-dev-server/client/utils/getCurrentScriptSource.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute('src');
  } // Fall back to getting all scripts in the document.


  var scriptElements = document.scripts || [];
  var currentScript = scriptElements[scriptElements.length - 1];

  if (currentScript) {
    return currentScript.getAttribute('src');
  } // Fail as there was no script to use.


  throw new Error('[WDS] Failed to get current script source.');
}

module.exports = getCurrentScriptSource;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!************************************************!*\
  !*** (webpack)-dev-server/client/utils/log.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var log = __webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js").getLogger('webpack-dev-server');

var INFO = 'info';
var WARN = 'warn';
var ERROR = 'error';
var DEBUG = 'debug';
var TRACE = 'trace';
var SILENT = 'silent'; // deprecated
// TODO: remove these at major released
// https://github.com/webpack/webpack-dev-server/pull/1825

var WARNING = 'warning';
var NONE = 'none'; // Set the default log level

log.setDefaultLevel(INFO);

function setLogLevel(level) {
  switch (level) {
    case INFO:
    case WARN:
    case ERROR:
    case DEBUG:
    case TRACE:
      log.setLevel(level);
      break;
    // deprecated

    case WARNING:
      // loglevel's warning name is different from webpack's
      log.setLevel('warn');
      break;
    // deprecated

    case NONE:
    case SILENT:
      log.disableAll();
      break;

    default:
      log.error("[WDS] Unknown clientLogLevel '".concat(level, "'"));
  }
}

module.exports = {
  log: log,
  setLogLevel: setLogLevel
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!******************************************************!*\
  !*** (webpack)-dev-server/client/utils/reloadApp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global WorkerGlobalScope self */

var _require = __webpack_require__(/*! ./log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log;

function reloadApp(_ref, _ref2) {
  var hotReload = _ref.hotReload,
      hot = _ref.hot,
      liveReload = _ref.liveReload;
  var isUnloading = _ref2.isUnloading,
      currentHash = _ref2.currentHash;

  if (isUnloading || !hotReload) {
    return;
  }

  if (hot) {
    log.info('[WDS] App hot update...');

    var hotEmitter = __webpack_require__(/*! webpack/hot/emitter */ "./node_modules/webpack/hot/emitter.js");

    hotEmitter.emit('webpackHotUpdate', currentHash);

    if (typeof self !== 'undefined' && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(currentHash), '*');
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload) {
      var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

      var intervalId = self.setInterval(function () {
        if (rootWindow.location.protocol !== 'about:') {
          // reload immediately if protocol is valid
          applyReload(rootWindow, intervalId);
        } else {
          rootWindow = rootWindow.parent;

          if (rootWindow.parent === rootWindow) {
            // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
            applyReload(rootWindow, intervalId);
          }
        }
      });
    }

  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    log.info('[WDS] App updated. Reloading...');
    rootWindow.location.reload();
  }
}

module.exports = reloadApp;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!********************************************************!*\
  !*** (webpack)-dev-server/client/utils/sendMessage.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global __resourceQuery WorkerGlobalScope self */
// Send messages to the outside, so plugins can consume it.

function sendMsg(type, data) {
  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, '*');
  }
}

module.exports = sendMsg;

/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/ansi-regex/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/strip-ansi/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__(/*! ansi-regex */ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!*************************************************!*\
  !*** (webpack)/hot sync nonrecursive ^\.\/log$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!********************************!*\
  !*** (webpack)/hot/emitter.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/node-libs-browser/node_modules/events/events.js");
module.exports = new EventEmitter();


/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!****************************!*\
  !*** (webpack)/hot/log.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
	var shouldLog =
		(logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

function logGroup(logFn) {
	return function(level, msg) {
		if (shouldLog(level)) {
			logFn(msg);
		}
	};
}

module.exports = function(level, msg) {
	if (shouldLog(level)) {
		if (level === "info") {
			console.log(msg);
		} else if (level === "warning") {
			console.warn(msg);
		} else if (level === "error") {
			console.error(msg);
		}
	}
};

/* eslint-disable node/no-unsupported-features/node-builtins */
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function(level) {
	logLevel = level;
};

module.exports.formatError = function(err) {
	var message = err.message;
	var stack = err.stack;
	if (!stack) {
		return message;
	} else if (stack.indexOf(message) < 0) {
		return message + "\n" + stack;
	} else {
		return stack;
	}
};


/***/ }),

/***/ "./node_modules/worker-loader/dist/workers/InlineWorker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/worker-loader/dist/workers/InlineWorker.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string

var URL = window.URL || window.webkitURL;

module.exports = function (content, url) {
  try {
    try {
      var blob;

      try {
        // BlobBuilder = Deprecated, but widely implemented
        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;

        blob = new BlobBuilder();

        blob.append(content);

        blob = blob.getBlob();
      } catch (e) {
        // The proposed API
        blob = new Blob([content]);
      }

      return new Worker(URL.createObjectURL(blob));
    } catch (e) {
      return new Worker('data:application/javascript,' + encodeURIComponent(content));
    }
  } catch (e) {
    if (!url) {
      throw Error('Inline worker is not supported');
    }

    return new Worker(url);
  }
};

/***/ }),

/***/ "./src/Animated_GIF.js":
/*!*****************************!*\
  !*** ./src/Animated_GIF.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var omggif__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! omggif */ "./node_modules/omggif/omggif.js");
/* harmony import */ var omggif__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(omggif__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var image_q__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! image-q */ "./node_modules/image-q/dist/esm/image-q.js");
/* harmony import */ var _Animated_GIF_worker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Animated_GIF.worker */ "./src/Animated_GIF.worker.js");
/* harmony import */ var _Animated_GIF_worker__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Animated_GIF_worker__WEBPACK_IMPORTED_MODULE_2__);



// A library/utility for generating GIF files
// Uses Dean McNamee's omggif library
// and image-q's RGBQuant quantizer
//
// @author sole / http://soledadpenades.com
// Updated by Adrian De Lisle to support transparency & slight modernization
const Animated_GIF = function Animated_GIF(globalOptions) {
  'use strict'

  globalOptions = globalOptions || {}

  let globalWidth = globalOptions.width || 160
  let globalHeight = globalOptions.height || 120
  const globalDithering = globalOptions.dithering || undefined
  const globalPalette = globalOptions.palette || null
  const globalDisposal = globalOptions.disposal || 0
  const globalTransparencyCutOff = globalOptions.transparencyCutOff || 0.7 // used for normalizing pixels to be full transparent or opaque
  let canvas = null,
    ctx = null,
    repeat = 0,
    delay = 250
  const frames = []
  let numRenderedFrames = 0
  let onRenderCompleteCallback = function() {}
  let onRenderProgressCallback = function() {}
  let workers = [],
    availableWorkers = [],
    numWorkers
  let generatingGIF = false

  // We'll try to be a little lenient with the palette so as to make the library easy to use
  // The only thing we can't cope with is having a non-array so we'll bail on that one.
  if (globalPalette) {
    if (!(globalPalette instanceof Array)) {
      throw ('Palette MUST be an array but it is: ', globalPalette)
    } else {
      // Now there are other two constraints that we will warn about
      // and silently fix them... somehow:

      // a) Must contain between 2 and 256 colours
      if (globalPalette.length < 2 || globalPalette.length > 256) {
        console.error('Palette must hold only between 2 and 256 colours')

        while (globalPalette.length < 2) {
          globalPalette.push(0x000000)
        }

        if (globalPalette.length > 256) {
          globalPalette = globalPalette.slice(0, 256)
        }
      }

      // b) Must be power of 2
      if (!powerOfTwo(globalPalette.length)) {
        console.error('Palette must have a power of two number of colours')

        while (!powerOfTwo(globalPalette.length)) {
          globalPalette.splice(globalPalette.length - 1, 1)
        }
      }
    }
  }

  globalOptions = globalOptions || {}
  numWorkers = globalOptions.numWorkers || 2

  for (let i = 0; i < numWorkers; i++) {
    const w = new _Animated_GIF_worker__WEBPACK_IMPORTED_MODULE_2___default.a()
    workers.push(w)
    availableWorkers.push(w)
  }

  // ---

  // Return a worker for processing a frame
  function getWorker() {
    if (availableWorkers.length === 0) {
      throw 'No workers left!'
    }

    return availableWorkers.pop()
  }

  // Restore a worker to the pool
  function freeWorker(worker) {
    availableWorkers.push(worker)
  }

  // Faster/closurized bufferToString function
  // (caching the String.fromCharCode values)
  const bufferToString = (function() {
    let byteMap = []
    for (let i = 0; i < 256; i++) {
      byteMap[i] = String.fromCharCode(i)
    }

    return function(buffer) {
      const numberValues = buffer.length
      let str = ''

      for (let i = 0; i < numberValues; i++) {
        str += byteMap[buffer[i]]
      }

      return str
    }
  })()

  function startRendering(completeCallback) {
    onRenderCompleteCallback = completeCallback

    for (let i = 0; i < numWorkers && i < frames.length; i++) {
      processFrame(i)
    }
  }

  function processFrame(position) {
    let frame
    let worker

    frame = frames[position]

    if (frame.beingProcessed || frame.done) {
      console.error('Frame already being processed or done!', frame.position)
      onFrameFinished()
      return
    }

    frame.beingProcessed = true

    worker = getWorker()

    worker.onmessage = function(ev) {
      const data = ev.data

      // Delete original data, and free memory
      delete frame.data

      // TODO grrr... HACK for object -> Array
      frame.pixels = Array.prototype.slice.call(data.pixels)
      frame.palette = Array.prototype.slice.call(data.palette)
      frame.transparencyIndex = data.transparencyIndex
      frame.done = true
      frame.beingProcessed = false

      freeWorker(worker)

      onFrameFinished()
    }

    worker.postMessage(frame)
  }

  function processNextFrame() {
    let position = -1

    for (let i = 0; i < frames.length; i++) {
      var frame = frames[i]
      if (!frame.done && !frame.beingProcessed) {
        position = i
        break
      }
    }

    if (position >= 0) {
      processFrame(position)
    }
  }

  function onFrameFinished() {
    // ~~~ taskFinished

    // The GIF is not written until we're done with all the frames
    // because they might not be processed in the same order
    const allDone = frames.every(function(frame) {
      return !frame.beingProcessed && frame.done
    })

    numRenderedFrames++
    onRenderProgressCallback((numRenderedFrames * 0.75) / frames.length)

    if (allDone) {
      if (!generatingGIF) {
        generateGIF(frames, onRenderCompleteCallback)
      }
    } else {
      setTimeout(processNextFrame, 1)
    }
  }

  // Takes the already processed data in frames and feeds it to a new
  // GifWriter instance in order to get the binary GIF file
  function generateGIF(frames, callback) {
    // TODO: Weird: using a simple JS array instead of a typed array,
    // the files are WAY smaller o_o. Patches/explanations welcome!
    const buffer = [] // new Uint8Array(width * height * frames.length * 5);
    const gifOptions = { loop: repeat }

    // Using global palette but only if we're also using dithering
    if (globalDithering !== null && globalPalette !== null) {
      gifOptions.palette = globalPalette
    }

    const gifWriter = new omggif__WEBPACK_IMPORTED_MODULE_0__["GifWriter"](
      buffer,
      globalWidth,
      globalHeight,
      gifOptions
    )

    generatingGIF = true

    frames.forEach(function(frame) {
      let framePalette = globalPalette ? globalPalette : frame.palette

      onRenderProgressCallback(
        0.75 + (0.25 * frame.position * 1.0) / frames.length
      )

      while (!powerOfTwo(framePalette.length) && framePalette.length < 256) {
        framePalette.push(0x000000)
      }

      gifWriter.addFrame(0, 0, globalWidth, globalHeight, frame.pixels, {
        palette: framePalette,
        delay: delay,
        transparent: frame.transparencyIndex,
        disposal: frame.disposal,
      })
    })

    gifWriter.end()
    onRenderProgressCallback(1.0)

    frames = []
    generatingGIF = false

    callback(buffer)
  }

  function powerOfTwo(value) {
    return value !== 0 && (value & (value - 1)) === 0
  }

  // ---

  this.setSize = function(w, h) {
    globalWidth = w
    globalHeight = h
    canvas = document.createElement('canvas')
    canvas.width = w
    canvas.height = h
    ctx = canvas.getContext('2d')
  }

  // Internally, GIF uses tenths of seconds to store the delay
  this.setDelay = function(seconds) {
    delay = seconds * 0.1
  }

  // From GIF: 0 = loop forever, null = not looping, n > 0 = loop n times and stop
  this.setRepeat = function(r) {
    repeat = r
  }

  this.addFrame = function(element, options = {}) {
    if (ctx === null) {
      this.setSize(globalWidth, globalHeight)
    }
    // clear the canvas because drawing over other frames breaks transparency
    ctx.clearRect(0, 0, globalWidth, globalHeight)
    ctx.drawImage(element, 0, 0, globalWidth, globalHeight)
    const imageData = ctx.getImageData(0, 0, globalWidth, globalHeight)

    this.addFrameImageData(imageData, options)
  }

  this.addFrameImageData = function(imageData, options = {}) {
    const imageDataArray = new Uint8Array(imageData.data)

    frames.push({
      data: imageDataArray,
      width: imageData.width,
      height: imageData.height,
      palette: options.palette || globalPalette,
      dithering: options.dithering || globalDithering,
      disposal: options.disposal || globalDisposal,
      transparencyCutOff:
        options.transparencyCutOff || globalTransparencyCutOff,
      done: false,
      beingProcessed: false,
      position: frames.length,
    })
  }

  this.onRenderProgress = function(callback) {
    onRenderProgressCallback = callback
  }

  this.isRendering = function() {
    return generatingGIF
  }

  this.getBase64GIF = function(completeCallback) {
    const onRenderComplete = function(buffer) {
      const str = bufferToString(buffer)
      const gif = 'data:image/gif;base64,' + btoa(str)
      completeCallback(gif)
    }

    startRendering(onRenderComplete)
  }

  this.getBlobGIF = function(completeCallback) {
    const onRenderComplete = function(buffer) {
      const array = new Uint8Array(buffer)
      const blob = new Blob([array], { type: 'image/gif' })
      completeCallback(blob)
    }

    startRendering(onRenderComplete)
  }

  // Once this function is called, the object becomes unusable
  // and you'll need to create a new one.
  this.destroy = function() {
    // Explicitly ask web workers to die so they are explicitly GC'ed
    workers.forEach(function(w) {
      w.terminate()
    })
  }
}

window.Animated_GIF = Animated_GIF
/* harmony default export */ __webpack_exports__["default"] = (Animated_GIF);


/***/ }),

/***/ "./src/Animated_GIF.worker.js":
/*!************************************!*\
  !*** ./src/Animated_GIF.worker.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return __webpack_require__(/*! !./node_modules/worker-loader/dist/workers/InlineWorker.js */ "./node_modules/worker-loader/dist/workers/InlineWorker.js")("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/Animated_GIF.worker.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/core-js/fn/set-immediate.js\":\n/*!**************************************************!*\\\n  !*** ./node_modules/core-js/fn/set-immediate.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(/*! ../modules/web.immediate */ \"./node_modules/core-js/modules/web.immediate.js\");\nmodule.exports = __webpack_require__(/*! ../modules/_core */ \"./node_modules/core-js/modules/_core.js\").setImmediate;\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_a-function.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_a-function.js ***!\n  \\*****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_an-object.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_an-object.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(/*! ./_is-object */ \"./node_modules/core-js/modules/_is-object.js\");\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_cof.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/core-js/modules/_cof.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_core.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/core-js/modules/_core.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar core = module.exports = { version: '2.5.2' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_ctx.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/core-js/modules/_ctx.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n// optional / simple context binding\nvar aFunction = __webpack_require__(/*! ./_a-function */ \"./node_modules/core-js/modules/_a-function.js\");\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_descriptors.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/core-js/modules/_descriptors.js ***!\n  \\******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(/*! ./_fails */ \"./node_modules/core-js/modules/_fails.js\")(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_dom-create.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_dom-create.js ***!\n  \\*****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(/*! ./_is-object */ \"./node_modules/core-js/modules/_is-object.js\");\nvar document = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\").document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_export.js\":\n/*!*************************************************!*\\\n  !*** ./node_modules/core-js/modules/_export.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\");\nvar core = __webpack_require__(/*! ./_core */ \"./node_modules/core-js/modules/_core.js\");\nvar hide = __webpack_require__(/*! ./_hide */ \"./node_modules/core-js/modules/_hide.js\");\nvar redefine = __webpack_require__(/*! ./_redefine */ \"./node_modules/core-js/modules/_redefine.js\");\nvar ctx = __webpack_require__(/*! ./_ctx */ \"./node_modules/core-js/modules/_ctx.js\");\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_fails.js\":\n/*!************************************************!*\\\n  !*** ./node_modules/core-js/modules/_fails.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_global.js\":\n/*!*************************************************!*\\\n  !*** ./node_modules/core-js/modules/_global.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_has.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/core-js/modules/_has.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_hide.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/core-js/modules/_hide.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(/*! ./_object-dp */ \"./node_modules/core-js/modules/_object-dp.js\");\nvar createDesc = __webpack_require__(/*! ./_property-desc */ \"./node_modules/core-js/modules/_property-desc.js\");\nmodule.exports = __webpack_require__(/*! ./_descriptors */ \"./node_modules/core-js/modules/_descriptors.js\") ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_html.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/core-js/modules/_html.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar document = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\").document;\nmodule.exports = document && document.documentElement;\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_ie8-dom-define.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = !__webpack_require__(/*! ./_descriptors */ \"./node_modules/core-js/modules/_descriptors.js\") && !__webpack_require__(/*! ./_fails */ \"./node_modules/core-js/modules/_fails.js\")(function () {\n  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ \"./node_modules/core-js/modules/_dom-create.js\")('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_invoke.js\":\n/*!*************************************************!*\\\n  !*** ./node_modules/core-js/modules/_invoke.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_is-object.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_is-object.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_object-dp.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_object-dp.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(/*! ./_an-object */ \"./node_modules/core-js/modules/_an-object.js\");\nvar IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ \"./node_modules/core-js/modules/_ie8-dom-define.js\");\nvar toPrimitive = __webpack_require__(/*! ./_to-primitive */ \"./node_modules/core-js/modules/_to-primitive.js\");\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(/*! ./_descriptors */ \"./node_modules/core-js/modules/_descriptors.js\") ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_property-desc.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/core-js/modules/_property-desc.js ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_redefine.js\":\n/*!***************************************************!*\\\n  !*** ./node_modules/core-js/modules/_redefine.js ***!\n  \\***************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\");\nvar hide = __webpack_require__(/*! ./_hide */ \"./node_modules/core-js/modules/_hide.js\");\nvar has = __webpack_require__(/*! ./_has */ \"./node_modules/core-js/modules/_has.js\");\nvar SRC = __webpack_require__(/*! ./_uid */ \"./node_modules/core-js/modules/_uid.js\")('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n__webpack_require__(/*! ./_core */ \"./node_modules/core-js/modules/_core.js\").inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_task.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/core-js/modules/_task.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ctx = __webpack_require__(/*! ./_ctx */ \"./node_modules/core-js/modules/_ctx.js\");\nvar invoke = __webpack_require__(/*! ./_invoke */ \"./node_modules/core-js/modules/_invoke.js\");\nvar html = __webpack_require__(/*! ./_html */ \"./node_modules/core-js/modules/_html.js\");\nvar cel = __webpack_require__(/*! ./_dom-create */ \"./node_modules/core-js/modules/_dom-create.js\");\nvar global = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\");\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (__webpack_require__(/*! ./_cof */ \"./node_modules/core-js/modules/_cof.js\")(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_to-primitive.js\":\n/*!*******************************************************!*\\\n  !*** ./node_modules/core-js/modules/_to-primitive.js ***!\n  \\*******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(/*! ./_is-object */ \"./node_modules/core-js/modules/_is-object.js\");\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_uid.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/core-js/modules/_uid.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/web.immediate.js\":\n/*!*******************************************************!*\\\n  !*** ./node_modules/core-js/modules/web.immediate.js ***!\n  \\*******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(/*! ./_export */ \"./node_modules/core-js/modules/_export.js\");\nvar $task = __webpack_require__(/*! ./_task */ \"./node_modules/core-js/modules/_task.js\");\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/basicAPI.js\":\n/*!***************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/basicAPI.js ***!\n  \\***************************************************/\n/*! exports provided: buildPaletteSync, buildPalette, applyPaletteSync, applyPalette */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildPaletteSync\", function() { return buildPaletteSync; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildPalette\", function() { return buildPalette; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyPaletteSync\", function() { return applyPaletteSync; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyPalette\", function() { return applyPalette; });\n/* harmony import */ var core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/fn/set-immediate */ \"./node_modules/core-js/fn/set-immediate.js\");\n/* harmony import */ var core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./distance */ \"./node_modules/image-q/dist/esm/distance/index.js\");\n/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./image */ \"./node_modules/image-q/dist/esm/image/index.js\");\n/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./palette */ \"./node_modules/image-q/dist/esm/palette/index.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * helper.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\nfunction buildPaletteSync(images, { colorDistanceFormula, paletteQuantization, colors } = {}) {\r\n    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\r\n    const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);\r\n    images.forEach(image => paletteQuantizer.sample(image));\r\n    return paletteQuantizer.quantizeSync();\r\n}\r\nasync function buildPalette(images, { colorDistanceFormula, paletteQuantization, colors, onProgress } = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\r\n        const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);\r\n        images.forEach(image => paletteQuantizer.sample(image));\r\n        let palette;\r\n        let timerId;\r\n        const iterator = paletteQuantizer.quantize();\r\n        const next = () => {\r\n            try {\r\n                const result = iterator.next();\r\n                if (result.done) {\r\n                    resolve(palette);\r\n                }\r\n                else {\r\n                    if (result.value.palette)\r\n                        palette = result.value.palette;\r\n                    if (onProgress)\r\n                        onProgress(result.value.progress);\r\n                    timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);\r\n                }\r\n            }\r\n            catch (error) {\r\n                clearTimeout(timerId);\r\n                reject(error);\r\n            }\r\n        };\r\n        timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);\r\n    });\r\n}\r\nfunction applyPaletteSync(image, palette, { colorDistanceFormula, imageQuantization } = {}) {\r\n    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\r\n    const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);\r\n    return imageQuantizer.quantizeSync(image, palette);\r\n}\r\nasync function applyPalette(image, palette, { colorDistanceFormula, imageQuantization, onProgress } = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\r\n        const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);\r\n        let outPointContainer;\r\n        let timerId;\r\n        const iterator = imageQuantizer.quantize(image, palette);\r\n        const next = () => {\r\n            try {\r\n                const result = iterator.next();\r\n                if (result.done) {\r\n                    resolve(outPointContainer);\r\n                }\r\n                else {\r\n                    if (result.value.pointContainer)\r\n                        outPointContainer = result.value.pointContainer;\r\n                    if (onProgress)\r\n                        onProgress(result.value.progress);\r\n                    timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);\r\n                }\r\n            }\r\n            catch (error) {\r\n                clearTimeout(timerId);\r\n                reject(error);\r\n            }\r\n        };\r\n        timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);\r\n    });\r\n}\r\nfunction colorDistanceFormulaToColorDistance(colorDistanceFormula = 'euclidean-bt709') {\r\n    switch (colorDistanceFormula) {\r\n        case 'cie94-graphic-arts': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"CIE94GraphicArts\"]();\r\n        case 'cie94-textiles': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"CIE94Textiles\"]();\r\n        case 'ciede2000': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"CIEDE2000\"]();\r\n        case 'color-metric': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"CMetric\"]();\r\n        case 'euclidean': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"Euclidean\"]();\r\n        case 'euclidean-bt709': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"EuclideanBT709\"]();\r\n        case 'euclidean-bt709-noalpha': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"EuclideanBT709NoAlpha\"]();\r\n        case 'manhattan': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"Manhattan\"]();\r\n        case 'manhattan-bt709': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"ManhattanBT709\"]();\r\n        case 'manhattan-nommyde': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"ManhattanNommyde\"]();\r\n        case 'pngquant': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"PNGQuant\"]();\r\n        default: throw new Error(`Unknown colorDistanceFormula ${colorDistanceFormula}`);\r\n    }\r\n}\r\nfunction imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization = 'floyd-steinberg') {\r\n    switch (imageQuantization) {\r\n        case 'nearest': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"NearestColor\"](distanceCalculator);\r\n        case 'riemersma': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionRiemersma\"](distanceCalculator);\r\n        case 'floyd-steinberg': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].FloydSteinberg);\r\n        case 'false-floyd-steinberg': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].FalseFloydSteinberg);\r\n        case 'stucki': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Stucki);\r\n        case 'atkinson': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Atkinson);\r\n        case 'jarvis': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Jarvis);\r\n        case 'burkes': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Burkes);\r\n        case 'sierra': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Sierra);\r\n        case 'two-sierra': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].TwoSierra);\r\n        case 'sierra-lite': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].SierraLite);\r\n        default: throw new Error(`Unknown imageQuantization ${imageQuantization}`);\r\n    }\r\n}\r\nfunction paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization = 'wuquant', colors = 256) {\r\n    switch (paletteQuantization) {\r\n        case 'neuquant': return new _palette__WEBPACK_IMPORTED_MODULE_3__[\"NeuQuant\"](distanceCalculator, colors);\r\n        case 'rgbquant': return new _palette__WEBPACK_IMPORTED_MODULE_3__[\"RGBQuant\"](distanceCalculator, colors);\r\n        case 'wuquant': return new _palette__WEBPACK_IMPORTED_MODULE_3__[\"WuQuant\"](distanceCalculator, colors);\r\n        case 'neuquant-float': return new _palette__WEBPACK_IMPORTED_MODULE_3__[\"NeuQuantFloat\"](distanceCalculator, colors);\r\n        default: throw new Error(`Unknown paletteQuantization ${paletteQuantization}`);\r\n    }\r\n}\r\n//# sourceMappingURL=basicAPI.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/constants/bt709.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/constants/bt709.js ***!\n  \\**********************************************************/\n/*! exports provided: Y, x, y */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y\", function() { return Y; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return x; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return y; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * constants.ts - part of Image Quantization Library\r\n */\r\n/**\r\n * sRGB (based on ITU-R Recommendation BT.709)\r\n * http://en.wikipedia.org/wiki/SRGB\r\n */\r\nvar Y;\r\n(function (Y) {\r\n    Y[Y[\"RED\"] = 0.2126] = \"RED\";\r\n    Y[Y[\"GREEN\"] = 0.7152] = \"GREEN\";\r\n    Y[Y[\"BLUE\"] = 0.0722] = \"BLUE\";\r\n    Y[Y[\"WHITE\"] = 1] = \"WHITE\";\r\n})(Y || (Y = {}));\r\n// tslint:disable-next-line:naming-convention\r\nvar x;\r\n(function (x) {\r\n    x[x[\"RED\"] = 0.64] = \"RED\";\r\n    x[x[\"GREEN\"] = 0.3] = \"GREEN\";\r\n    x[x[\"BLUE\"] = 0.15] = \"BLUE\";\r\n    x[x[\"WHITE\"] = 0.3127] = \"WHITE\";\r\n})(x || (x = {}));\r\n// tslint:disable-next-line:naming-convention\r\nvar y;\r\n(function (y) {\r\n    y[y[\"RED\"] = 0.33] = \"RED\";\r\n    y[y[\"GREEN\"] = 0.6] = \"GREEN\";\r\n    y[y[\"BLUE\"] = 0.06] = \"BLUE\";\r\n    y[y[\"WHITE\"] = 0.329] = \"WHITE\";\r\n})(y || (y = {}));\r\n//# sourceMappingURL=bt709.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/constants/index.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/constants/index.js ***!\n  \\**********************************************************/\n/*! exports provided: bt709 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bt709__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"bt709\", function() { return _bt709__WEBPACK_IMPORTED_MODULE_0__; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * constants.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/index.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/index.js ***!\n  \\***********************************************************/\n/*! exports provided: rgb2xyz, rgb2hsl, rgb2lab, lab2xyz, lab2rgb, xyz2lab, xyz2rgb */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _rgb2xyz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rgb2xyz */ \"./node_modules/image-q/dist/esm/conversion/rgb2xyz.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rgb2xyz\", function() { return _rgb2xyz__WEBPACK_IMPORTED_MODULE_0__[\"rgb2xyz\"]; });\n\n/* harmony import */ var _rgb2hsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rgb2hsl */ \"./node_modules/image-q/dist/esm/conversion/rgb2hsl.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rgb2hsl\", function() { return _rgb2hsl__WEBPACK_IMPORTED_MODULE_1__[\"rgb2hsl\"]; });\n\n/* harmony import */ var _rgb2lab__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rgb2lab */ \"./node_modules/image-q/dist/esm/conversion/rgb2lab.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rgb2lab\", function() { return _rgb2lab__WEBPACK_IMPORTED_MODULE_2__[\"rgb2lab\"]; });\n\n/* harmony import */ var _lab2xyz__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lab2xyz */ \"./node_modules/image-q/dist/esm/conversion/lab2xyz.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lab2xyz\", function() { return _lab2xyz__WEBPACK_IMPORTED_MODULE_3__[\"lab2xyz\"]; });\n\n/* harmony import */ var _lab2rgb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lab2rgb */ \"./node_modules/image-q/dist/esm/conversion/lab2rgb.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lab2rgb\", function() { return _lab2rgb__WEBPACK_IMPORTED_MODULE_4__[\"lab2rgb\"]; });\n\n/* harmony import */ var _xyz2lab__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./xyz2lab */ \"./node_modules/image-q/dist/esm/conversion/xyz2lab.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"xyz2lab\", function() { return _xyz2lab__WEBPACK_IMPORTED_MODULE_5__[\"xyz2lab\"]; });\n\n/* harmony import */ var _xyz2rgb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./xyz2rgb */ \"./node_modules/image-q/dist/esm/conversion/xyz2rgb.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"xyz2rgb\", function() { return _xyz2rgb__WEBPACK_IMPORTED_MODULE_6__[\"xyz2rgb\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/lab2rgb.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/lab2rgb.js ***!\n  \\*************************************************************/\n/*! exports provided: lab2rgb */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lab2rgb\", function() { return lab2rgb; });\n/* harmony import */ var _lab2xyz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lab2xyz */ \"./node_modules/image-q/dist/esm/conversion/lab2xyz.js\");\n/* harmony import */ var _xyz2rgb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xyz2rgb */ \"./node_modules/image-q/dist/esm/conversion/xyz2rgb.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * lab2rgb.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n// tslint:disable-next-line:naming-convention\r\nfunction lab2rgb(L, a, b) {\r\n    const xyz = Object(_lab2xyz__WEBPACK_IMPORTED_MODULE_0__[\"lab2xyz\"])(L, a, b);\r\n    return Object(_xyz2rgb__WEBPACK_IMPORTED_MODULE_1__[\"xyz2rgb\"])(xyz.x, xyz.y, xyz.z);\r\n}\r\n//# sourceMappingURL=lab2rgb.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/lab2xyz.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/lab2xyz.js ***!\n  \\*************************************************************/\n/*! exports provided: lab2xyz */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lab2xyz\", function() { return lab2xyz; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * lab2xyz.ts - part of Image Quantization Library\r\n */\r\nconst refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant = D65\r\nconst refY = 1.00000; // ref_Y = 100.000\r\nconst refZ = 1.08883; // ref_Z = 108.883\r\nfunction pivot(n) {\r\n    return n > 0.206893034 ? Math.pow(n, 3) : (n - 16 / 116) / 7.787;\r\n}\r\n// tslint:disable-next-line:naming-convention\r\nfunction lab2xyz(L, a, b) {\r\n    const y = (L + 16) / 116;\r\n    const x = a / 500 + y;\r\n    const z = y - b / 200;\r\n    return {\r\n        x: refX * pivot(x),\r\n        y: refY * pivot(y),\r\n        z: refZ * pivot(z),\r\n    };\r\n}\r\n//# sourceMappingURL=lab2xyz.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/rgb2hsl.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/rgb2hsl.js ***!\n  \\*************************************************************/\n/*! exports provided: rgb2hsl */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgb2hsl\", function() { return rgb2hsl; });\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * rgb2hsl.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * Calculate HSL from RGB\r\n * Hue is in degrees [0..360]\r\n * Lightness: [0..1]\r\n * Saturation: [0..1]\r\n * http://web.archive.org/web/20060914040436/http://local.wasp.uwa.edu.au/~pbourke/colour/hsl/\r\n */\r\nfunction rgb2hsl(r, g, b) {\r\n    const min = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"min3\"])(r, g, b);\r\n    const max = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"max3\"])(r, g, b);\r\n    const delta = max - min;\r\n    const l = (min + max) / 510;\r\n    let s = 0;\r\n    if (l > 0 && l < 1)\r\n        s = delta / (l < 0.5 ? (max + min) : (510 - max - min));\r\n    let h = 0;\r\n    if (delta > 0) {\r\n        if (max === r) {\r\n            h = (g - b) / delta;\r\n        }\r\n        else if (max === g) {\r\n            h = (2 + (b - r) / delta);\r\n        }\r\n        else {\r\n            h = (4 + (r - g) / delta);\r\n        }\r\n        h *= 60;\r\n        if (h < 0)\r\n            h += 360;\r\n    }\r\n    return { h, s, l };\r\n}\r\n//# sourceMappingURL=rgb2hsl.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/rgb2lab.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/rgb2lab.js ***!\n  \\*************************************************************/\n/*! exports provided: rgb2lab */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgb2lab\", function() { return rgb2lab; });\n/* harmony import */ var _rgb2xyz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rgb2xyz */ \"./node_modules/image-q/dist/esm/conversion/rgb2xyz.js\");\n/* harmony import */ var _xyz2lab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xyz2lab */ \"./node_modules/image-q/dist/esm/conversion/xyz2lab.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * rgb2lab.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\nfunction rgb2lab(r, g, b) {\r\n    const xyz = Object(_rgb2xyz__WEBPACK_IMPORTED_MODULE_0__[\"rgb2xyz\"])(r, g, b);\r\n    return Object(_xyz2lab__WEBPACK_IMPORTED_MODULE_1__[\"xyz2lab\"])(xyz.x, xyz.y, xyz.z);\r\n}\r\n//# sourceMappingURL=rgb2lab.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/rgb2xyz.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/rgb2xyz.js ***!\n  \\*************************************************************/\n/*! exports provided: rgb2xyz */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgb2xyz\", function() { return rgb2xyz; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * rgb2xyz.ts - part of Image Quantization Library\r\n */\r\nfunction correctGamma(n) {\r\n    return n > 0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92;\r\n}\r\nfunction rgb2xyz(r, g, b) {\r\n    // gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\r\n    r = correctGamma(r / 255);\r\n    g = correctGamma(g / 255);\r\n    b = correctGamma(b / 255);\r\n    // Observer. = 2°, Illuminant = D65\r\n    return {\r\n        x: r * 0.4124 + g * 0.3576 + b * 0.1805,\r\n        y: r * 0.2126 + g * 0.7152 + b * 0.0722,\r\n        z: r * 0.0193 + g * 0.1192 + b * 0.9505,\r\n    };\r\n}\r\n//# sourceMappingURL=rgb2xyz.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/xyz2lab.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/xyz2lab.js ***!\n  \\*************************************************************/\n/*! exports provided: xyz2lab */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"xyz2lab\", function() { return xyz2lab; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * xyz2lab.ts - part of Image Quantization Library\r\n */\r\nconst refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant= D65\r\nconst refY = 1.00000; // ref_Y = 100.000\r\nconst refZ = 1.08883; // ref_Z = 108.883\r\nfunction pivot(n) {\r\n    return n > 0.008856 ? Math.pow(n, 1 / 3) : (7.787 * n + 16 / 116);\r\n}\r\nfunction xyz2lab(x, y, z) {\r\n    x = pivot(x / refX);\r\n    y = pivot(y / refY);\r\n    z = pivot(z / refZ);\r\n    if ((116 * y) - 16 < 0)\r\n        throw new Error('xxx');\r\n    return {\r\n        L: Math.max(0, (116 * y) - 16),\r\n        a: 500 * (x - y),\r\n        b: 200 * (y - z),\r\n    };\r\n}\r\n//# sourceMappingURL=xyz2lab.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/xyz2rgb.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/xyz2rgb.js ***!\n  \\*************************************************************/\n/*! exports provided: xyz2rgb */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"xyz2rgb\", function() { return xyz2rgb; });\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * xyz2rgb.ts - part of Image Quantization Library\r\n */\r\n\r\n// gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\r\nfunction correctGamma(n) {\r\n    return n > 0.0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - 0.055 : 12.92 * n;\r\n}\r\nfunction xyz2rgb(x, y, z) {\r\n    // Observer. = 2°, Illuminant = D65\r\n    const r = correctGamma(x * 3.2406 + y * -1.5372 + z * -0.4986);\r\n    const g = correctGamma(x * -0.9689 + y * 1.8758 + z * 0.0415);\r\n    const b = correctGamma(x * 0.0557 + y * -0.2040 + z * 1.0570);\r\n    return {\r\n        r: Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"inRange0to255Rounded\"])(r * 255),\r\n        g: Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"inRange0to255Rounded\"])(g * 255),\r\n        b: Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"inRange0to255Rounded\"])(b * 255),\r\n    };\r\n}\r\n//# sourceMappingURL=xyz2rgb.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/cie94.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/cie94.js ***!\n  \\*********************************************************/\n/*! exports provided: AbstractCIE94, CIE94Textiles, CIE94GraphicArts */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractCIE94\", function() { return AbstractCIE94; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CIE94Textiles\", function() { return CIE94Textiles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CIE94GraphicArts\", function() { return CIE94GraphicArts; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony import */ var _conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conversion/rgb2lab */ \"./node_modules/image-q/dist/esm/conversion/rgb2lab.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * cie94.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n/**\r\n * CIE94 method of delta-e\r\n * http://en.wikipedia.org/wiki/Color_difference#CIE94\r\n */\r\nclass AbstractCIE94 extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const lab1 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__[\"rgb2lab\"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(r1 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(g1 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(b1 * this._whitePoint.b));\r\n        const lab2 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__[\"rgb2lab\"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(r2 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(g2 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(b2 * this._whitePoint.b));\r\n        const dL = lab1.L - lab2.L;\r\n        const dA = lab1.a - lab2.a;\r\n        const dB = lab1.b - lab2.b;\r\n        const c1 = Math.sqrt(lab1.a * lab1.a + lab1.b * lab1.b);\r\n        const c2 = Math.sqrt(lab2.a * lab2.a + lab2.b * lab2.b);\r\n        const dC = c1 - c2;\r\n        let deltaH = dA * dA + dB * dB - dC * dC;\r\n        deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\r\n        const dAlpha = (a2 - a1) * this._whitePoint.a * this._kA;\r\n        // TODO: add alpha channel support\r\n        return Math.sqrt(Math.pow(dL / this._Kl, 2) +\r\n            Math.pow(dC / (1.0 + this._K1 * c1), 2) +\r\n            Math.pow(deltaH / (1.0 + this._K2 * c1), 2) +\r\n            Math.pow(dAlpha, 2));\r\n    }\r\n}\r\nclass CIE94Textiles extends AbstractCIE94 {\r\n    _setDefaults() {\r\n        this._Kl = 2.0;\r\n        this._K1 = 0.048;\r\n        this._K2 = 0.014;\r\n        this._kA = 0.25 * 50 / 255;\r\n    }\r\n}\r\nclass CIE94GraphicArts extends AbstractCIE94 {\r\n    _setDefaults() {\r\n        this._Kl = 1.0;\r\n        this._K1 = 0.045;\r\n        this._K2 = 0.015;\r\n        this._kA = 0.25 * 100 / 255;\r\n    }\r\n}\r\n//# sourceMappingURL=cie94.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/ciede2000.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/ciede2000.js ***!\n  \\*************************************************************/\n/*! exports provided: CIEDE2000 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CIEDE2000\", function() { return CIEDE2000; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony import */ var _conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conversion/rgb2lab */ \"./node_modules/image-q/dist/esm/conversion/rgb2lab.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * ciede2000.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n// tslint:disable:variable-name\r\n// tslint:disable:naming-convention\r\n/**\r\n * CIEDE2000 algorithm - Adapted from Sharma et al's MATLAB implementation at\r\n * http://www.ece.rochester.edu/~gsharma/ciede2000/\r\n */\r\nclass CIEDE2000 extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    _setDefaults() { }\r\n    static _calculatehp(b, ap) {\r\n        const hp = Math.atan2(b, ap);\r\n        if (hp >= 0)\r\n            return hp;\r\n        return hp + CIEDE2000._deg360InRad;\r\n    }\r\n    static _calculateRT(ahp, aCp) {\r\n        const aCp_to_7 = Math.pow(aCp, 7.0);\r\n        const R_C = 2.0 * Math.sqrt(aCp_to_7 / (aCp_to_7 + CIEDE2000._pow25to7)); // 25^7\r\n        const delta_theta = CIEDE2000._deg30InRad * Math.exp(-Math.pow((ahp - CIEDE2000._deg275InRad) / CIEDE2000._deg25InRad, 2.0));\r\n        return -Math.sin(2.0 * delta_theta) * R_C;\r\n    }\r\n    static _calculateT(ahp) {\r\n        return 1.0 - .17 * Math.cos(ahp - CIEDE2000._deg30InRad) + .24 * Math.cos(ahp * 2.0) + .32 * Math.cos(ahp * 3.0 + CIEDE2000._deg6InRad) - .2 * Math.cos(ahp * 4.0 - CIEDE2000._deg63InRad);\r\n    }\r\n    static _calculate_ahp(C1pC2p, h_bar, h1p, h2p) {\r\n        const hpSum = h1p + h2p;\r\n        if (C1pC2p === 0)\r\n            return hpSum;\r\n        if (h_bar <= CIEDE2000._deg180InRad)\r\n            return hpSum / 2.0;\r\n        if (hpSum < CIEDE2000._deg360InRad)\r\n            return (hpSum + CIEDE2000._deg360InRad) / 2.0;\r\n        return (hpSum - CIEDE2000._deg360InRad) / 2.0;\r\n    }\r\n    static _calculate_dHp(C1pC2p, h_bar, h2p, h1p) {\r\n        let dhp;\r\n        if (C1pC2p === 0) {\r\n            dhp = 0;\r\n        }\r\n        else if (h_bar <= CIEDE2000._deg180InRad) {\r\n            dhp = h2p - h1p;\r\n        }\r\n        else if (h2p <= h1p) {\r\n            dhp = h2p - h1p + CIEDE2000._deg360InRad;\r\n        }\r\n        else {\r\n            dhp = h2p - h1p - CIEDE2000._deg360InRad;\r\n        }\r\n        return 2.0 * Math.sqrt(C1pC2p) * Math.sin(dhp / 2.0);\r\n    }\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const lab1 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__[\"rgb2lab\"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(r1 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(g1 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(b1 * this._whitePoint.b));\r\n        const lab2 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__[\"rgb2lab\"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(r2 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(g2 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(b2 * this._whitePoint.b));\r\n        const dA = (a2 - a1) * this._whitePoint.a * CIEDE2000._kA;\r\n        const dE2 = this.calculateRawInLab(lab1, lab2);\r\n        return Math.sqrt(dE2 + dA * dA);\r\n    }\r\n    calculateRawInLab(Lab1, Lab2) {\r\n        // Get L,a,b values for color 1\r\n        const L1 = Lab1.L;\r\n        const a1 = Lab1.a;\r\n        const b1 = Lab1.b;\r\n        // Get L,a,b values for color 2\r\n        const L2 = Lab2.L;\r\n        const a2 = Lab2.a;\r\n        const b2 = Lab2.b;\r\n        // Calculate Cprime1, Cprime2, Cabbar\r\n        const C1 = Math.sqrt(a1 * a1 + b1 * b1);\r\n        const C2 = Math.sqrt(a2 * a2 + b2 * b2);\r\n        const pow_a_C1_C2_to_7 = Math.pow((C1 + C2) / 2.0, 7.0);\r\n        const G = 0.5 * (1.0 - Math.sqrt(pow_a_C1_C2_to_7 / (pow_a_C1_C2_to_7 + CIEDE2000._pow25to7))); // 25^7\r\n        const a1p = (1.0 + G) * a1;\r\n        const a2p = (1.0 + G) * a2;\r\n        const C1p = Math.sqrt(a1p * a1p + b1 * b1);\r\n        const C2p = Math.sqrt(a2p * a2p + b2 * b2);\r\n        const C1pC2p = C1p * C2p;\r\n        // Angles in Degree.\r\n        const h1p = CIEDE2000._calculatehp(b1, a1p);\r\n        const h2p = CIEDE2000._calculatehp(b2, a2p);\r\n        const h_bar = Math.abs(h1p - h2p);\r\n        const dLp = L2 - L1;\r\n        const dCp = C2p - C1p;\r\n        const dHp = CIEDE2000._calculate_dHp(C1pC2p, h_bar, h2p, h1p);\r\n        const ahp = CIEDE2000._calculate_ahp(C1pC2p, h_bar, h1p, h2p);\r\n        const T = CIEDE2000._calculateT(ahp);\r\n        const aCp = (C1p + C2p) / 2.0;\r\n        const aLp_minus_50_square = Math.pow((L1 + L2) / 2.0 - 50.0, 2.0);\r\n        const S_L = 1.0 + (.015 * aLp_minus_50_square) / Math.sqrt(20.0 + aLp_minus_50_square);\r\n        const S_C = 1.0 + .045 * aCp;\r\n        const S_H = 1.0 + .015 * T * aCp;\r\n        const R_T = CIEDE2000._calculateRT(ahp, aCp);\r\n        const dLpSL = dLp / S_L; // S_L * kL, where kL is 1.0\r\n        const dCpSC = dCp / S_C; // S_C * kC, where kC is 1.0\r\n        const dHpSH = dHp / S_H; // S_H * kH, where kH is 1.0\r\n        return Math.pow(dLpSL, 2) + Math.pow(dCpSC, 2) + Math.pow(dHpSH, 2) + R_T * dCpSC * dHpSH;\r\n    }\r\n}\r\n/**\r\n * Weight in distance: 0.25\r\n * Max DeltaE: 100\r\n * Max DeltaA: 255\r\n */\r\nCIEDE2000._kA = 0.25 * 100 / 255;\r\nCIEDE2000._pow25to7 = Math.pow(25, 7);\r\nCIEDE2000._deg360InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(360);\r\nCIEDE2000._deg180InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(180);\r\nCIEDE2000._deg30InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(30);\r\nCIEDE2000._deg6InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(6);\r\nCIEDE2000._deg63InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(63);\r\nCIEDE2000._deg275InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(275);\r\nCIEDE2000._deg25InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(25);\r\n//# sourceMappingURL=ciede2000.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/cmetric.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/cmetric.js ***!\n  \\***********************************************************/\n/*! exports provided: CMetric */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CMetric\", function() { return CMetric; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * cmetric.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * TODO: Name it: http://www.compuphase.com/cmetric.htm\r\n */\r\nclass CMetric extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const rmean = (r1 + r2) / 2 * this._whitePoint.r;\r\n        const r = (r1 - r2) * this._whitePoint.r;\r\n        const g = (g1 - g2) * this._whitePoint.g;\r\n        const b = (b1 - b2) * this._whitePoint.b;\r\n        const dE = ((((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8));\r\n        const dA = (a2 - a1) * this._whitePoint.a;\r\n        return Math.sqrt(dE + dA * dA);\r\n    }\r\n    _setDefaults() { }\r\n}\r\n//# sourceMappingURL=cmetric.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\":\n/*!**********************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/distanceCalculator.js ***!\n  \\**********************************************************************/\n/*! exports provided: AbstractDistanceCalculator */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractDistanceCalculator\", function() { return AbstractDistanceCalculator; });\nclass AbstractDistanceCalculator {\r\n    constructor() {\r\n        this._setDefaults();\r\n        // set default maximal color component deltas (255 - 0 = 255)\r\n        this.setWhitePoint(255, 255, 255, 255);\r\n    }\r\n    setWhitePoint(r, g, b, a) {\r\n        this._whitePoint = {\r\n            r: (r > 0) ? 255 / r : 0,\r\n            g: (g > 0) ? 255 / g : 0,\r\n            b: (b > 0) ? 255 / b : 0,\r\n            a: (a > 0) ? 255 / a : 0,\r\n        };\r\n        this._maxDistance = this.calculateRaw(r, g, b, a, 0, 0, 0, 0);\r\n    }\r\n    calculateNormalized(colorA, colorB) {\r\n        return this.calculateRaw(colorA.r, colorA.g, colorA.b, colorA.a, colorB.r, colorB.g, colorB.b, colorB.a) / this._maxDistance;\r\n    }\r\n}\r\n//# sourceMappingURL=distanceCalculator.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/euclidean.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/euclidean.js ***!\n  \\*************************************************************/\n/*! exports provided: AbstractEuclidean, Euclidean, EuclideanBT709, EuclideanBT709NoAlpha */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractEuclidean\", function() { return AbstractEuclidean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Euclidean\", function() { return Euclidean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EuclideanBT709\", function() { return EuclideanBT709; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EuclideanBT709NoAlpha\", function() { return EuclideanBT709NoAlpha; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * euclidean.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n/**\r\n * Euclidean color distance\r\n */\r\nclass AbstractEuclidean extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const dR = r2 - r1;\r\n        const dG = g2 - g1;\r\n        const dB = b2 - b1;\r\n        const dA = a2 - a1;\r\n        return Math.sqrt(this._kR * dR * dR + this._kG * dG * dG + this._kB * dB * dB + this._kA * dA * dA);\r\n    }\r\n}\r\nclass Euclidean extends AbstractEuclidean {\r\n    _setDefaults() {\r\n        this._kR = 1;\r\n        this._kG = 1;\r\n        this._kB = 1;\r\n        this._kA = 1;\r\n    }\r\n}\r\n/**\r\n * Euclidean color distance (RGBQuant modification w Alpha)\r\n */\r\nclass EuclideanBT709 extends AbstractEuclidean {\r\n    _setDefaults() {\r\n        this._kR = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].RED;\r\n        this._kG = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].GREEN;\r\n        this._kB = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].BLUE;\r\n        // TODO: what is the best coefficient below?\r\n        this._kA = 1;\r\n    }\r\n}\r\n/**\r\n * Euclidean color distance (RGBQuant modification w/o Alpha)\r\n */\r\nclass EuclideanBT709NoAlpha extends AbstractEuclidean {\r\n    _setDefaults() {\r\n        this._kR = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].RED;\r\n        this._kG = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].GREEN;\r\n        this._kB = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].BLUE;\r\n        this._kA = 0;\r\n    }\r\n}\r\n//# sourceMappingURL=euclidean.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/index.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/index.js ***!\n  \\*********************************************************/\n/*! exports provided: AbstractDistanceCalculator, CIE94Textiles, CIE94GraphicArts, CIEDE2000, CMetric, AbstractEuclidean, Euclidean, EuclideanBT709NoAlpha, EuclideanBT709, AbstractManhattan, Manhattan, ManhattanBT709, ManhattanNommyde, PNGQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractDistanceCalculator\", function() { return _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"]; });\n\n/* harmony import */ var _cie94__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cie94 */ \"./node_modules/image-q/dist/esm/distance/cie94.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CIE94Textiles\", function() { return _cie94__WEBPACK_IMPORTED_MODULE_1__[\"CIE94Textiles\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CIE94GraphicArts\", function() { return _cie94__WEBPACK_IMPORTED_MODULE_1__[\"CIE94GraphicArts\"]; });\n\n/* harmony import */ var _ciede2000__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ciede2000 */ \"./node_modules/image-q/dist/esm/distance/ciede2000.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CIEDE2000\", function() { return _ciede2000__WEBPACK_IMPORTED_MODULE_2__[\"CIEDE2000\"]; });\n\n/* harmony import */ var _cmetric__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cmetric */ \"./node_modules/image-q/dist/esm/distance/cmetric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CMetric\", function() { return _cmetric__WEBPACK_IMPORTED_MODULE_3__[\"CMetric\"]; });\n\n/* harmony import */ var _euclidean__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./euclidean */ \"./node_modules/image-q/dist/esm/distance/euclidean.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractEuclidean\", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__[\"AbstractEuclidean\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Euclidean\", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__[\"Euclidean\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EuclideanBT709NoAlpha\", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__[\"EuclideanBT709NoAlpha\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EuclideanBT709\", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__[\"EuclideanBT709\"]; });\n\n/* harmony import */ var _manhattan__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./manhattan */ \"./node_modules/image-q/dist/esm/distance/manhattan.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractManhattan\", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__[\"AbstractManhattan\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Manhattan\", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__[\"Manhattan\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ManhattanBT709\", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__[\"ManhattanBT709\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ManhattanNommyde\", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__[\"ManhattanNommyde\"]; });\n\n/* harmony import */ var _pngQuant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pngQuant */ \"./node_modules/image-q/dist/esm/distance/pngQuant.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PNGQuant\", function() { return _pngQuant__WEBPACK_IMPORTED_MODULE_6__[\"PNGQuant\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/manhattan.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/manhattan.js ***!\n  \\*************************************************************/\n/*! exports provided: AbstractManhattan, Manhattan, ManhattanNommyde, ManhattanBT709 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractManhattan\", function() { return AbstractManhattan; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Manhattan\", function() { return Manhattan; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ManhattanNommyde\", function() { return ManhattanNommyde; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ManhattanBT709\", function() { return ManhattanBT709; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * manhattanNeuQuant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n/**\r\n * Manhattan distance (NeuQuant modification) - w/o sRGB coefficients\r\n */\r\nclass AbstractManhattan extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        let dR = r2 - r1;\r\n        let dG = g2 - g1;\r\n        let dB = b2 - b1;\r\n        let dA = a2 - a1;\r\n        if (dR < 0)\r\n            dR = 0 - dR;\r\n        if (dG < 0)\r\n            dG = 0 - dG;\r\n        if (dB < 0)\r\n            dB = 0 - dB;\r\n        if (dA < 0)\r\n            dA = 0 - dA;\r\n        return this._kR * dR + this._kG * dG + this._kB * dB + this._kA * dA;\r\n    }\r\n}\r\nclass Manhattan extends AbstractManhattan {\r\n    _setDefaults() {\r\n        this._kR = 1;\r\n        this._kG = 1;\r\n        this._kB = 1;\r\n        this._kA = 1;\r\n    }\r\n}\r\n/**\r\n * Manhattan distance (Nommyde modification)\r\n * https://github.com/igor-bezkrovny/image-quantization/issues/4#issuecomment-235155320\r\n */\r\nclass ManhattanNommyde extends AbstractManhattan {\r\n    _setDefaults() {\r\n        this._kR = 0.4984;\r\n        this._kG = 0.8625;\r\n        this._kB = 0.2979;\r\n        // TODO: what is the best coefficient below?\r\n        this._kA = 1;\r\n    }\r\n}\r\n/**\r\n * Manhattan distance (sRGB coefficients)\r\n */\r\nclass ManhattanBT709 extends AbstractManhattan {\r\n    _setDefaults() {\r\n        this._kR = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].RED;\r\n        this._kG = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].GREEN;\r\n        this._kB = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].BLUE;\r\n        // TODO: what is the best coefficient below?\r\n        this._kA = 1;\r\n    }\r\n}\r\n//# sourceMappingURL=manhattan.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/pngQuant.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/pngQuant.js ***!\n  \\************************************************************/\n/*! exports provided: PNGQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PNGQuant\", function() { return PNGQuant; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * pngQuant.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * TODO: check quality of this distance equation\r\n * TODO: ask author for usage rights\r\n * taken from:\r\n * {@link http://stackoverflow.com/questions/4754506/color-similarity-distance-in-rgba-color-space/8796867#8796867}\r\n * {@link https://github.com/pornel/pngquant/blob/cc39b47799a7ff2ef17b529f9415ff6e6b213b8f/lib/pam.h#L148}\r\n */\r\nclass PNGQuant extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    /**\r\n     * Author's comments\r\n     * px_b.rgb = px.rgb + 0*(1-px.a) // blend px on black\r\n     * px_b.a   = px.a   + 1*(1-px.a)\r\n     * px_w.rgb = px.rgb + 1*(1-px.a) // blend px on white\r\n     * px_w.a   = px.a   + 1*(1-px.a)\r\n     *\r\n     * px_b.rgb = px.rgb              // difference same as in opaque RGB\r\n     * px_b.a   = 1\r\n     * px_w.rgb = px.rgb - px.a       // difference simplifies to formula below\r\n     * px_w.a   = 1\r\n     *\r\n     * (px.rgb - px.a) - (py.rgb - py.a)\r\n     * (px.rgb - py.rgb) + (py.a - px.a)\r\n     *\r\n     */\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const alphas = (a2 - a1) * this._whitePoint.a;\r\n        return this._colordifferenceCh(r1 * this._whitePoint.r, r2 * this._whitePoint.r, alphas) +\r\n            this._colordifferenceCh(g1 * this._whitePoint.g, g2 * this._whitePoint.g, alphas) +\r\n            this._colordifferenceCh(b1 * this._whitePoint.b, b2 * this._whitePoint.b, alphas);\r\n    }\r\n    _colordifferenceCh(x, y, alphas) {\r\n        // maximum of channel blended on white, and blended on black\r\n        // premultiplied alpha and backgrounds 0/1 shorten the formula\r\n        const black = x - y;\r\n        const white = black + alphas;\r\n        return black * black + white * white;\r\n    }\r\n    _setDefaults() { }\r\n}\r\n//# sourceMappingURL=pngQuant.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image-q.js\":\n/*!**************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image-q.js ***!\n  \\**************************************************/\n/*! exports provided: buildPalette, buildPaletteSync, applyPalette, applyPaletteSync, constants, conversion, distance, palette, image, quality, utils */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/image-q/dist/esm/constants/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"constants\", function() { return _constants__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _conversion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conversion */ \"./node_modules/image-q/dist/esm/conversion/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"conversion\", function() { return _conversion__WEBPACK_IMPORTED_MODULE_1__; });\n/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./distance */ \"./node_modules/image-q/dist/esm/distance/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return _distance__WEBPACK_IMPORTED_MODULE_2__; });\n/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./palette */ \"./node_modules/image-q/dist/esm/palette/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"palette\", function() { return _palette__WEBPACK_IMPORTED_MODULE_3__; });\n/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./image */ \"./node_modules/image-q/dist/esm/image/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"image\", function() { return _image__WEBPACK_IMPORTED_MODULE_4__; });\n/* harmony import */ var _quality__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./quality */ \"./node_modules/image-q/dist/esm/quality/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"quality\", function() { return _quality__WEBPACK_IMPORTED_MODULE_5__; });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"utils\", function() { return _utils__WEBPACK_IMPORTED_MODULE_6__; });\n/* harmony import */ var _basicAPI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./basicAPI */ \"./node_modules/image-q/dist/esm/basicAPI.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildPalette\", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__[\"buildPalette\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildPaletteSync\", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__[\"buildPaletteSync\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"applyPalette\", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__[\"applyPalette\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"applyPaletteSync\", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__[\"applyPaletteSync\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=image-q.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/array.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/array.js ***!\n  \\******************************************************/\n/*! exports provided: ErrorDiffusionArrayKernel, ErrorDiffusionArray */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionArrayKernel\", function() { return ErrorDiffusionArrayKernel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionArray\", function() { return ErrorDiffusionArray; });\n/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/* harmony import */ var _utils_progressTracker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/progressTracker */ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * ditherErrorDiffusionArray.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n// TODO: is it the best name for this enum \"kernel\"?\r\nvar ErrorDiffusionArrayKernel;\r\n(function (ErrorDiffusionArrayKernel) {\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"FloydSteinberg\"] = 0] = \"FloydSteinberg\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"FalseFloydSteinberg\"] = 1] = \"FalseFloydSteinberg\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Stucki\"] = 2] = \"Stucki\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Atkinson\"] = 3] = \"Atkinson\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Jarvis\"] = 4] = \"Jarvis\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Burkes\"] = 5] = \"Burkes\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Sierra\"] = 6] = \"Sierra\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"TwoSierra\"] = 7] = \"TwoSierra\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"SierraLite\"] = 8] = \"SierraLite\";\r\n})(ErrorDiffusionArrayKernel || (ErrorDiffusionArrayKernel = {}));\r\n// http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/\r\nclass ErrorDiffusionArray extends _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractImageQuantizer\"] {\r\n    constructor(colorDistanceCalculator, kernel, serpentine = true, minimumColorDistanceToDither = 0, calculateErrorLikeGIMP = false) {\r\n        super();\r\n        this._setKernel(kernel);\r\n        this._distance = colorDistanceCalculator;\r\n        this._minColorDistance = minimumColorDistanceToDither;\r\n        this._serpentine = serpentine;\r\n        this._calculateErrorLikeGIMP = calculateErrorLikeGIMP;\r\n    }\r\n    /**\r\n     * adapted from http://jsbin.com/iXofIji/2/edit by PAEz\r\n     * fixed version. it doesn't use image pixels as error storage, also it doesn't have 0.3 + 0.3 + 0.3 + 0.3 = 0 error\r\n     * Mutates pointContainer\r\n     */\r\n    *quantize(pointContainer, palette) {\r\n        const pointArray = pointContainer.getPointArray();\r\n        const originalPoint = new _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"]();\r\n        const width = pointContainer.getWidth();\r\n        const height = pointContainer.getHeight();\r\n        const errorLines = [];\r\n        let dir = 1;\r\n        let maxErrorLines = 1;\r\n        // initial error lines (number is taken from dithering kernel)\r\n        for (const kernel of this._kernel) {\r\n            const kernelErrorLines = kernel[2] + 1;\r\n            if (maxErrorLines < kernelErrorLines)\r\n                maxErrorLines = kernelErrorLines;\r\n        }\r\n        for (let i = 0; i < maxErrorLines; i++) {\r\n            this._fillErrorLine(errorLines[i] = [], width);\r\n        }\r\n        const tracker = new _utils_progressTracker__WEBPACK_IMPORTED_MODULE_3__[\"ProgressTracker\"](height, 99);\r\n        for (let y = 0; y < height; y++) {\r\n            if (tracker.shouldNotify(y)) {\r\n                yield {\r\n                    progress: tracker.progress,\r\n                };\r\n            }\r\n            // always serpentine\r\n            if (this._serpentine)\r\n                dir = dir * -1;\r\n            const lni = y * width;\r\n            const xStart = dir === 1 ? 0 : width - 1;\r\n            const xEnd = dir === 1 ? width : -1;\r\n            // cyclic shift with erasing\r\n            this._fillErrorLine(errorLines[0], width);\r\n            // TODO: why it is needed to cast types here?\r\n            errorLines.push(errorLines.shift());\r\n            const errorLine = errorLines[0];\r\n            for (let x = xStart, idx = lni + xStart; x !== xEnd; x += dir, idx += dir) {\r\n                // Image pixel\r\n                const point = pointArray[idx];\r\n                // originalPoint = new Utils.Point(),\r\n                const error = errorLine[x];\r\n                originalPoint.from(point);\r\n                const correctedPoint = _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByRGBA(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255Rounded\"])(point.r + error[0]), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255Rounded\"])(point.g + error[1]), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255Rounded\"])(point.b + error[2]), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255Rounded\"])(point.a + error[3]));\r\n                // Reduced pixel\r\n                const palettePoint = palette.getNearestColor(this._distance, correctedPoint);\r\n                point.from(palettePoint);\r\n                // dithering strength\r\n                if (this._minColorDistance) {\r\n                    const dist = this._distance.calculateNormalized(point, palettePoint);\r\n                    if (dist < this._minColorDistance)\r\n                        continue;\r\n                }\r\n                // Component distance\r\n                let er;\r\n                let eg;\r\n                let eb;\r\n                let ea;\r\n                if (this._calculateErrorLikeGIMP) {\r\n                    er = correctedPoint.r - palettePoint.r;\r\n                    eg = correctedPoint.g - palettePoint.g;\r\n                    eb = correctedPoint.b - palettePoint.b;\r\n                    ea = correctedPoint.a - palettePoint.a;\r\n                }\r\n                else {\r\n                    er = originalPoint.r - palettePoint.r;\r\n                    eg = originalPoint.g - palettePoint.g;\r\n                    eb = originalPoint.b - palettePoint.b;\r\n                    ea = originalPoint.a - palettePoint.a;\r\n                }\r\n                const dStart = dir === 1 ? 0 : this._kernel.length - 1;\r\n                const dEnd = dir === 1 ? this._kernel.length : -1;\r\n                for (let i = dStart; i !== dEnd; i += dir) {\r\n                    const x1 = this._kernel[i][1] * dir;\r\n                    const y1 = this._kernel[i][2];\r\n                    if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\r\n                        const d = this._kernel[i][0];\r\n                        const e = errorLines[y1][x1 + x];\r\n                        e[0] = e[0] + er * d;\r\n                        e[1] = e[1] + eg * d;\r\n                        e[2] = e[2] + eb * d;\r\n                        e[3] = e[3] + ea * d;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        yield {\r\n            pointContainer,\r\n            progress: 100,\r\n        };\r\n    }\r\n    _fillErrorLine(errorLine, width) {\r\n        // shrink\r\n        if (errorLine.length > width) {\r\n            errorLine.length = width;\r\n        }\r\n        // reuse existing arrays\r\n        const l = errorLine.length;\r\n        for (let i = 0; i < l; i++) {\r\n            const error = errorLine[i];\r\n            error[0] = error[1] = error[2] = error[3] = 0;\r\n        }\r\n        // create missing arrays\r\n        for (let i = l; i < width; i++) {\r\n            errorLine[i] = [0.0, 0.0, 0.0, 0.0];\r\n        }\r\n    }\r\n    _setKernel(kernel) {\r\n        switch (kernel) {\r\n            case ErrorDiffusionArrayKernel.FloydSteinberg:\r\n                this._kernel = [\r\n                    [7 / 16, 1, 0],\r\n                    [3 / 16, -1, 1],\r\n                    [5 / 16, 0, 1],\r\n                    [1 / 16, 1, 1],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.FalseFloydSteinberg:\r\n                this._kernel = [\r\n                    [3 / 8, 1, 0],\r\n                    [3 / 8, 0, 1],\r\n                    [2 / 8, 1, 1],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Stucki:\r\n                this._kernel = [\r\n                    [8 / 42, 1, 0],\r\n                    [4 / 42, 2, 0],\r\n                    [2 / 42, -2, 1],\r\n                    [4 / 42, -1, 1],\r\n                    [8 / 42, 0, 1],\r\n                    [4 / 42, 1, 1],\r\n                    [2 / 42, 2, 1],\r\n                    [1 / 42, -2, 2],\r\n                    [2 / 42, -1, 2],\r\n                    [4 / 42, 0, 2],\r\n                    [2 / 42, 1, 2],\r\n                    [1 / 42, 2, 2],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Atkinson:\r\n                this._kernel = [\r\n                    [1 / 8, 1, 0],\r\n                    [1 / 8, 2, 0],\r\n                    [1 / 8, -1, 1],\r\n                    [1 / 8, 0, 1],\r\n                    [1 / 8, 1, 1],\r\n                    [1 / 8, 0, 2],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Jarvis:\r\n                this._kernel = [\r\n                    [7 / 48, 1, 0],\r\n                    [5 / 48, 2, 0],\r\n                    [3 / 48, -2, 1],\r\n                    [5 / 48, -1, 1],\r\n                    [7 / 48, 0, 1],\r\n                    [5 / 48, 1, 1],\r\n                    [3 / 48, 2, 1],\r\n                    [1 / 48, -2, 2],\r\n                    [3 / 48, -1, 2],\r\n                    [5 / 48, 0, 2],\r\n                    [3 / 48, 1, 2],\r\n                    [1 / 48, 2, 2],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Burkes:\r\n                this._kernel = [\r\n                    [8 / 32, 1, 0],\r\n                    [4 / 32, 2, 0],\r\n                    [2 / 32, -2, 1],\r\n                    [4 / 32, -1, 1],\r\n                    [8 / 32, 0, 1],\r\n                    [4 / 32, 1, 1],\r\n                    [2 / 32, 2, 1],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Sierra:\r\n                this._kernel = [\r\n                    [5 / 32, 1, 0],\r\n                    [3 / 32, 2, 0],\r\n                    [2 / 32, -2, 1],\r\n                    [4 / 32, -1, 1],\r\n                    [5 / 32, 0, 1],\r\n                    [4 / 32, 1, 1],\r\n                    [2 / 32, 2, 1],\r\n                    [2 / 32, -1, 2],\r\n                    [3 / 32, 0, 2],\r\n                    [2 / 32, 1, 2],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.TwoSierra:\r\n                this._kernel = [\r\n                    [4 / 16, 1, 0],\r\n                    [3 / 16, 2, 0],\r\n                    [1 / 16, -2, 1],\r\n                    [2 / 16, -1, 1],\r\n                    [3 / 16, 0, 1],\r\n                    [2 / 16, 1, 1],\r\n                    [1 / 16, 2, 1],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.SierraLite:\r\n                this._kernel = [\r\n                    [2 / 4, 1, 0],\r\n                    [1 / 4, -1, 1],\r\n                    [1 / 4, 0, 1],\r\n                ];\r\n                break;\r\n            default:\r\n                throw new Error('ErrorDiffusionArray: unknown kernel = ' + kernel);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=array.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\":\n/*!***************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/imageQuantizer.js ***!\n  \\***************************************************************/\n/*! exports provided: AbstractImageQuantizer */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractImageQuantizer\", function() { return AbstractImageQuantizer; });\nclass AbstractImageQuantizer {\r\n    quantizeSync(pointContainer, palette) {\r\n        for (const value of this.quantize(pointContainer, palette)) {\r\n            if (value.pointContainer) {\r\n                return value.pointContainer;\r\n            }\r\n        }\r\n        throw new Error('unreachable');\r\n    }\r\n}\r\n//# sourceMappingURL=imageQuantizer.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/index.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/index.js ***!\n  \\******************************************************/\n/*! exports provided: AbstractImageQuantizer, NearestColor, ErrorDiffusionArray, ErrorDiffusionArrayKernel, ErrorDiffusionRiemersma */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractImageQuantizer\", function() { return _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractImageQuantizer\"]; });\n\n/* harmony import */ var _nearestColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nearestColor */ \"./node_modules/image-q/dist/esm/image/nearestColor.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NearestColor\", function() { return _nearestColor__WEBPACK_IMPORTED_MODULE_1__[\"NearestColor\"]; });\n\n/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./array */ \"./node_modules/image-q/dist/esm/image/array.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionArray\", function() { return _array__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionArrayKernel\", function() { return _array__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"]; });\n\n/* harmony import */ var _riemersma__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./riemersma */ \"./node_modules/image-q/dist/esm/image/riemersma.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionRiemersma\", function() { return _riemersma__WEBPACK_IMPORTED_MODULE_3__[\"ErrorDiffusionRiemersma\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/nearestColor.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/nearestColor.js ***!\n  \\*************************************************************/\n/*! exports provided: NearestColor */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NearestColor\", function() { return NearestColor; });\n/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\");\n/* harmony import */ var _utils_progressTracker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/progressTracker */ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * nearestColor.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\nclass NearestColor extends _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractImageQuantizer\"] {\r\n    constructor(colorDistanceCalculator) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n    }\r\n    /**\r\n     * Mutates pointContainer\r\n     */\r\n    *quantize(pointContainer, palette) {\r\n        const pointArray = pointContainer.getPointArray();\r\n        const width = pointContainer.getWidth();\r\n        const height = pointContainer.getHeight();\r\n        const tracker = new _utils_progressTracker__WEBPACK_IMPORTED_MODULE_1__[\"ProgressTracker\"](height, 99);\r\n        for (let y = 0; y < height; y++) {\r\n            if (tracker.shouldNotify(y)) {\r\n                yield {\r\n                    progress: tracker.progress,\r\n                };\r\n            }\r\n            for (let x = 0, idx = y * width; x < width; x++, idx++) {\r\n                // Image pixel\r\n                const point = pointArray[idx];\r\n                // Reduced pixel\r\n                point.from(palette.getNearestColor(this._distance, point));\r\n            }\r\n        }\r\n        yield {\r\n            pointContainer,\r\n            progress: 100,\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=nearestColor.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/riemersma.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/riemersma.js ***!\n  \\**********************************************************/\n/*! exports provided: ErrorDiffusionRiemersma */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionRiemersma\", function() { return ErrorDiffusionRiemersma; });\n/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\");\n/* harmony import */ var _spaceFillingCurves_hilbertCurve__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spaceFillingCurves/hilbertCurve */ \"./node_modules/image-q/dist/esm/image/spaceFillingCurves/hilbertCurve.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * MIT License\r\n *\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n *\r\n * riemersma.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\nclass ErrorDiffusionRiemersma extends _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractImageQuantizer\"] {\r\n    constructor(colorDistanceCalculator, errorQueueSize = 16, errorPropagation = 1) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        this._errorQueueSize = errorQueueSize;\r\n        this._weights = ErrorDiffusionRiemersma._createWeights(errorPropagation, errorQueueSize);\r\n    }\r\n    /**\r\n     * Mutates pointContainer\r\n     */\r\n    *quantize(pointContainer, palette) {\r\n        const pointArray = pointContainer.getPointArray();\r\n        const width = pointContainer.getWidth();\r\n        const height = pointContainer.getHeight();\r\n        const errorQueue = [];\r\n        let head = 0;\r\n        for (let i = 0; i < this._errorQueueSize; i++) {\r\n            errorQueue[i] = { r: 0, g: 0, b: 0, a: 0 };\r\n        }\r\n        yield* Object(_spaceFillingCurves_hilbertCurve__WEBPACK_IMPORTED_MODULE_1__[\"hilbertCurve\"])(width, height, (x, y) => {\r\n            const p = pointArray[x + y * width];\r\n            let r = p.r;\r\n            let g = p.g;\r\n            let b = p.b;\r\n            let a = p.a;\r\n            for (let i = 0; i < this._errorQueueSize; i++) {\r\n                const weight = this._weights[i];\r\n                const e = errorQueue[(i + head) % this._errorQueueSize];\r\n                r += e.r * weight;\r\n                g += e.g * weight;\r\n                b += e.b * weight;\r\n                a += e.a * weight;\r\n            }\r\n            const correctedPoint = _utils_point__WEBPACK_IMPORTED_MODULE_2__[\"Point\"].createByRGBA(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__[\"inRange0to255Rounded\"])(r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__[\"inRange0to255Rounded\"])(g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__[\"inRange0to255Rounded\"])(b), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__[\"inRange0to255Rounded\"])(a));\r\n            const quantizedPoint = palette.getNearestColor(this._distance, correctedPoint);\r\n            // update head and calculate tail\r\n            head = (head + 1) % this._errorQueueSize;\r\n            const tail = (head + this._errorQueueSize - 1) % this._errorQueueSize;\r\n            // update error with new value\r\n            errorQueue[tail].r = p.r - quantizedPoint.r;\r\n            errorQueue[tail].g = p.g - quantizedPoint.g;\r\n            errorQueue[tail].b = p.b - quantizedPoint.b;\r\n            errorQueue[tail].a = p.a - quantizedPoint.a;\r\n            // update point\r\n            p.from(quantizedPoint);\r\n        });\r\n        yield {\r\n            pointContainer,\r\n            progress: 100,\r\n        };\r\n    }\r\n    static _createWeights(errorPropagation, errorQueueSize) {\r\n        const weights = [];\r\n        const multiplier = Math.exp(Math.log(errorQueueSize) / (errorQueueSize - 1));\r\n        for (let i = 0, next = 1; i < errorQueueSize; i++) {\r\n            weights[i] = (((next + 0.5) | 0) / errorQueueSize) * errorPropagation;\r\n            next *= multiplier;\r\n        }\r\n        return weights;\r\n    }\r\n}\r\n//# sourceMappingURL=riemersma.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/spaceFillingCurves/hilbertCurve.js\":\n/*!********************************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/spaceFillingCurves/hilbertCurve.js ***!\n  \\********************************************************************************/\n/*! exports provided: hilbertCurve */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hilbertCurve\", function() { return hilbertCurve; });\n/* harmony import */ var _utils_progressTracker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/progressTracker */ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\");\n\r\nvar Direction;\r\n(function (Direction) {\r\n    Direction[Direction[\"NONE\"] = 0] = \"NONE\";\r\n    Direction[Direction[\"UP\"] = 1] = \"UP\";\r\n    Direction[Direction[\"LEFT\"] = 2] = \"LEFT\";\r\n    Direction[Direction[\"RIGHT\"] = 3] = \"RIGHT\";\r\n    Direction[Direction[\"DOWN\"] = 4] = \"DOWN\";\r\n})(Direction || (Direction = {}));\r\nfunction* hilbertCurve(width, height, callback) {\r\n    const maxBound = Math.max(width, height);\r\n    const level = Math.floor(Math.log(maxBound) / Math.log(2) + 1);\r\n    const tracker = new _utils_progressTracker__WEBPACK_IMPORTED_MODULE_0__[\"ProgressTracker\"](width * height, 99);\r\n    const data = {\r\n        width,\r\n        height,\r\n        level,\r\n        callback,\r\n        tracker,\r\n        index: 0,\r\n        x: 0,\r\n        y: 0,\r\n    };\r\n    yield* walkHilbert(data, Direction.UP);\r\n    visit(data, Direction.NONE);\r\n}\r\nfunction* walkHilbert(data, direction) {\r\n    if (data.level < 1)\r\n        return;\r\n    if (data.tracker.shouldNotify(data.index))\r\n        yield { progress: data.tracker.progress };\r\n    data.level--;\r\n    switch (direction) {\r\n        case Direction.LEFT:\r\n            yield* walkHilbert(data, Direction.UP);\r\n            visit(data, Direction.RIGHT);\r\n            yield* walkHilbert(data, Direction.LEFT);\r\n            visit(data, Direction.DOWN);\r\n            yield* walkHilbert(data, Direction.LEFT);\r\n            visit(data, Direction.LEFT);\r\n            yield* walkHilbert(data, Direction.DOWN);\r\n            break;\r\n        case Direction.RIGHT:\r\n            yield* walkHilbert(data, Direction.DOWN);\r\n            visit(data, Direction.LEFT);\r\n            yield* walkHilbert(data, Direction.RIGHT);\r\n            visit(data, Direction.UP);\r\n            yield* walkHilbert(data, Direction.RIGHT);\r\n            visit(data, Direction.RIGHT);\r\n            yield* walkHilbert(data, Direction.UP);\r\n            break;\r\n        case Direction.UP:\r\n            yield* walkHilbert(data, Direction.LEFT);\r\n            visit(data, Direction.DOWN);\r\n            yield* walkHilbert(data, Direction.UP);\r\n            visit(data, Direction.RIGHT);\r\n            yield* walkHilbert(data, Direction.UP);\r\n            visit(data, Direction.UP);\r\n            yield* walkHilbert(data, Direction.RIGHT);\r\n            break;\r\n        case Direction.DOWN:\r\n            yield* walkHilbert(data, Direction.RIGHT);\r\n            visit(data, Direction.UP);\r\n            yield* walkHilbert(data, Direction.DOWN);\r\n            visit(data, Direction.LEFT);\r\n            yield* walkHilbert(data, Direction.DOWN);\r\n            visit(data, Direction.DOWN);\r\n            yield* walkHilbert(data, Direction.LEFT);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    data.level++;\r\n}\r\nfunction visit(data, direction) {\r\n    if (data.x >= 0 && data.x < data.width && data.y >= 0 && data.y < data.height) {\r\n        data.callback(data.x, data.y);\r\n        data.index++;\r\n    }\r\n    switch (direction) {\r\n        case Direction.LEFT:\r\n            data.x--;\r\n            break;\r\n        case Direction.RIGHT:\r\n            data.x++;\r\n            break;\r\n        case Direction.UP:\r\n            data.y--;\r\n            break;\r\n        case Direction.DOWN:\r\n            data.y++;\r\n            break;\r\n    }\r\n}\r\n//# sourceMappingURL=hilbertCurve.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/index.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/index.js ***!\n  \\********************************************************/\n/*! exports provided: AbstractPaletteQuantizer, NeuQuant, NeuQuantFloat, RGBQuant, ColorHistogram, WuQuant, WuColorCube */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractPaletteQuantizer\", function() { return _paletteQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractPaletteQuantizer\"]; });\n\n/* harmony import */ var _neuquant_neuquant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./neuquant/neuquant */ \"./node_modules/image-q/dist/esm/palette/neuquant/neuquant.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NeuQuant\", function() { return _neuquant_neuquant__WEBPACK_IMPORTED_MODULE_1__[\"NeuQuant\"]; });\n\n/* harmony import */ var _neuquant_neuquantFloat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./neuquant/neuquantFloat */ \"./node_modules/image-q/dist/esm/palette/neuquant/neuquantFloat.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NeuQuantFloat\", function() { return _neuquant_neuquantFloat__WEBPACK_IMPORTED_MODULE_2__[\"NeuQuantFloat\"]; });\n\n/* harmony import */ var _rgbquant_rgbquant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rgbquant/rgbquant */ \"./node_modules/image-q/dist/esm/palette/rgbquant/rgbquant.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RGBQuant\", function() { return _rgbquant_rgbquant__WEBPACK_IMPORTED_MODULE_3__[\"RGBQuant\"]; });\n\n/* harmony import */ var _rgbquant_colorHistogram__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rgbquant/colorHistogram */ \"./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ColorHistogram\", function() { return _rgbquant_colorHistogram__WEBPACK_IMPORTED_MODULE_4__[\"ColorHistogram\"]; });\n\n/* harmony import */ var _wu_wuQuant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wu/wuQuant */ \"./node_modules/image-q/dist/esm/palette/wu/wuQuant.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"WuQuant\", function() { return _wu_wuQuant__WEBPACK_IMPORTED_MODULE_5__[\"WuQuant\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"WuColorCube\", function() { return _wu_wuQuant__WEBPACK_IMPORTED_MODULE_5__[\"WuColorCube\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/neuquant/neuquant.js\":\n/*!********************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/neuquant/neuquant.js ***!\n  \\********************************************************************/\n/*! exports provided: NeuQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NeuQuant\", function() { return NeuQuant; });\n/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/*\r\n * NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\r\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\r\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\r\n * the algorithm.\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\r\n * this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons who\r\n * receive copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n */\r\n/**\r\n * @preserve TypeScript port:\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * neuquant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n// bias for colour values\r\nconst networkBiasShift = 3;\r\nclass Neuron {\r\n    constructor(defaultValue) {\r\n        this.r = this.g = this.b = this.a = defaultValue;\r\n    }\r\n    /**\r\n     * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\r\n     * @example\r\n     * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);\r\n     */\r\n    toPoint() {\r\n        return _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);\r\n    }\r\n    subtract(r, g, b, a) {\r\n        this.r -= r | 0;\r\n        this.g -= g | 0;\r\n        this.b -= b | 0;\r\n        this.a -= a | 0;\r\n    }\r\n}\r\nclass NeuQuant extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__[\"AbstractPaletteQuantizer\"] {\r\n    constructor(colorDistanceCalculator, colors = 256) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        this._pointArray = [];\r\n        this._sampleFactor = 1;\r\n        this._networkSize = colors;\r\n        this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);\r\n    }\r\n    sample(pointContainer) {\r\n        this._pointArray = this._pointArray.concat(pointContainer.getPointArray());\r\n    }\r\n    *quantize() {\r\n        this._init();\r\n        yield* this._learn();\r\n        yield {\r\n            palette: this._buildPalette(),\r\n            progress: 100,\r\n        };\r\n    }\r\n    _init() {\r\n        this._freq = [];\r\n        this._bias = [];\r\n        this._radPower = [];\r\n        this._network = [];\r\n        for (let i = 0; i < this._networkSize; i++) {\r\n            this._network[i] = new Neuron((i << (networkBiasShift + 8)) / this._networkSize | 0);\r\n            // 1/this._networkSize\r\n            this._freq[i] = NeuQuant._initialBias / this._networkSize | 0;\r\n            this._bias[i] = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Main Learning Loop\r\n     */\r\n    *_learn() {\r\n        let sampleFactor = this._sampleFactor;\r\n        const pointsNumber = this._pointArray.length;\r\n        if (pointsNumber < NeuQuant._minpicturebytes)\r\n            sampleFactor = 1;\r\n        const alphadec = 30 + (sampleFactor - 1) / 3 | 0;\r\n        const pointsToSample = pointsNumber / sampleFactor | 0;\r\n        let delta = pointsToSample / NeuQuant._nCycles | 0;\r\n        let alpha = NeuQuant._initAlpha;\r\n        let radius = (this._networkSize >> 3) * NeuQuant._radiusBias;\r\n        let rad = radius >> NeuQuant._radiusBiasShift;\r\n        if (rad <= 1)\r\n            rad = 0;\r\n        for (let i = 0; i < rad; i++) {\r\n            this._radPower[i] = alpha * (((rad * rad - i * i) * NeuQuant._radBias) / (rad * rad)) >>> 0;\r\n        }\r\n        let step;\r\n        if (pointsNumber < NeuQuant._minpicturebytes) {\r\n            step = 1;\r\n        }\r\n        else if (pointsNumber % NeuQuant._prime1 !== 0) {\r\n            step = NeuQuant._prime1;\r\n        }\r\n        else if ((pointsNumber % NeuQuant._prime2) !== 0) {\r\n            step = NeuQuant._prime2;\r\n        }\r\n        else if ((pointsNumber % NeuQuant._prime3) !== 0) {\r\n            step = NeuQuant._prime3;\r\n        }\r\n        else {\r\n            step = NeuQuant._prime4;\r\n        }\r\n        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_3__[\"ProgressTracker\"](pointsToSample, 99);\r\n        for (let i = 0, pointIndex = 0; i < pointsToSample;) {\r\n            if (tracker.shouldNotify(i)) {\r\n                yield {\r\n                    progress: tracker.progress,\r\n                };\r\n            }\r\n            const point = this._pointArray[pointIndex];\r\n            const b = point.b << networkBiasShift;\r\n            const g = point.g << networkBiasShift;\r\n            const r = point.r << networkBiasShift;\r\n            const a = point.a << networkBiasShift;\r\n            const neuronIndex = this._contest(b, g, r, a);\r\n            this._alterSingle(alpha, neuronIndex, b, g, r, a);\r\n            if (rad !== 0)\r\n                this._alterNeighbour(rad, neuronIndex, b, g, r, a);\r\n            /* alter neighbours */\r\n            pointIndex += step;\r\n            if (pointIndex >= pointsNumber)\r\n                pointIndex -= pointsNumber;\r\n            i++;\r\n            if (delta === 0)\r\n                delta = 1;\r\n            if (i % delta === 0) {\r\n                alpha -= (alpha / alphadec) | 0;\r\n                radius -= (radius / NeuQuant._radiusDecrease) | 0;\r\n                rad = radius >> NeuQuant._radiusBiasShift;\r\n                if (rad <= 1)\r\n                    rad = 0;\r\n                for (let j = 0; j < rad; j++)\r\n                    this._radPower[j] = alpha * (((rad * rad - j * j) * NeuQuant._radBias) / (rad * rad)) >>> 0;\r\n            }\r\n        }\r\n    }\r\n    _buildPalette() {\r\n        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__[\"Palette\"]();\r\n        this._network.forEach(neuron => {\r\n            palette.add(neuron.toPoint());\r\n        });\r\n        palette.sort();\r\n        return palette;\r\n    }\r\n    /**\r\n     * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]\r\n     */\r\n    _alterNeighbour(rad, i, b, g, r, al) {\r\n        let lo = i - rad;\r\n        if (lo < -1)\r\n            lo = -1;\r\n        let hi = i + rad;\r\n        if (hi > this._networkSize)\r\n            hi = this._networkSize;\r\n        let j = i + 1;\r\n        let k = i - 1;\r\n        let m = 1;\r\n        while (j < hi || k > lo) {\r\n            const a = this._radPower[m++] / NeuQuant._alphaRadBias;\r\n            if (j < hi) {\r\n                const p = this._network[j++];\r\n                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));\r\n            }\r\n            if (k > lo) {\r\n                const p = this._network[k--];\r\n                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Move neuron i towards biased (b,g,r) by factor alpha\r\n     */\r\n    _alterSingle(alpha, i, b, g, r, a) {\r\n        alpha /= NeuQuant._initAlpha;\r\n        /* alter hit neuron */\r\n        const n = this._network[i];\r\n        n.subtract(alpha * (n.r - r), alpha * (n.g - g), alpha * (n.b - b), alpha * (n.a - a));\r\n    }\r\n    /**\r\n     * Search for biased BGR values\r\n     * description:\r\n     *    finds closest neuron (min dist) and updates freq\r\n     *    finds best neuron (min dist-bias) and returns position\r\n     *    for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n     *    bias[i] = _gamma*((1/this._networkSize)-freq[i])\r\n     *\r\n     * Original distance equation:\r\n     *        dist = abs(dR) + abs(dG) + abs(dB)\r\n     */\r\n    _contest(b, g, r, a) {\r\n        const multiplier = (255 * 4) << networkBiasShift;\r\n        let bestd = ~(1 << 31);\r\n        let bestbiasd = bestd;\r\n        let bestpos = -1;\r\n        let bestbiaspos = bestpos;\r\n        for (let i = 0; i < this._networkSize; i++) {\r\n            const n = this._network[i];\r\n            const dist = this._distance.calculateNormalized(n, { r, g, b, a }) * multiplier | 0;\r\n            if (dist < bestd) {\r\n                bestd = dist;\r\n                bestpos = i;\r\n            }\r\n            const biasdist = dist - ((this._bias[i]) >> (NeuQuant._initialBiasShift - networkBiasShift));\r\n            if (biasdist < bestbiasd) {\r\n                bestbiasd = biasdist;\r\n                bestbiaspos = i;\r\n            }\r\n            const betafreq = (this._freq[i] >> NeuQuant._betaShift);\r\n            this._freq[i] -= betafreq;\r\n            this._bias[i] += (betafreq << NeuQuant._gammaShift);\r\n        }\r\n        this._freq[bestpos] += NeuQuant._beta;\r\n        this._bias[bestpos] -= NeuQuant._betaGamma;\r\n        return bestbiaspos;\r\n    }\r\n}\r\n/*\r\n four primes near 500 - assume no image has a length so large\r\n that it is divisible by all four primes\r\n */\r\nNeuQuant._prime1 = 499;\r\nNeuQuant._prime2 = 491;\r\nNeuQuant._prime3 = 487;\r\nNeuQuant._prime4 = 503;\r\nNeuQuant._minpicturebytes = NeuQuant._prime4;\r\n// no. of learning cycles\r\nNeuQuant._nCycles = 100;\r\n// defs for freq and bias\r\nNeuQuant._initialBiasShift = 16;\r\n// bias for fractions\r\nNeuQuant._initialBias = (1 << NeuQuant._initialBiasShift);\r\nNeuQuant._gammaShift = 10;\r\n// gamma = 1024\r\n// TODO: why gamma is never used?\r\n// private static _gamma : number     = (1 << NeuQuant._gammaShift);\r\nNeuQuant._betaShift = 10;\r\nNeuQuant._beta = (NeuQuant._initialBias >> NeuQuant._betaShift);\r\n// beta = 1/1024\r\nNeuQuant._betaGamma = (NeuQuant._initialBias << (NeuQuant._gammaShift - NeuQuant._betaShift));\r\n/*\r\n * for 256 cols, radius starts\r\n */\r\nNeuQuant._radiusBiasShift = 6;\r\n// at 32.0 biased by 6 bits\r\nNeuQuant._radiusBias = 1 << NeuQuant._radiusBiasShift;\r\n// and decreases by a factor of 1/30 each cycle\r\nNeuQuant._radiusDecrease = 30;\r\n/* defs for decreasing alpha factor */\r\n// alpha starts at 1.0\r\nNeuQuant._alphaBiasShift = 10;\r\n// biased by 10 bits\r\nNeuQuant._initAlpha = (1 << NeuQuant._alphaBiasShift);\r\n/* radBias and alphaRadBias used for radpower calculation */\r\nNeuQuant._radBiasShift = 8;\r\nNeuQuant._radBias = 1 << NeuQuant._radBiasShift;\r\nNeuQuant._alphaRadBiasShift = NeuQuant._alphaBiasShift + NeuQuant._radBiasShift;\r\nNeuQuant._alphaRadBias = 1 << NeuQuant._alphaRadBiasShift;\r\n//# sourceMappingURL=neuquant.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/neuquant/neuquantFloat.js\":\n/*!*************************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/neuquant/neuquantFloat.js ***!\n  \\*************************************************************************/\n/*! exports provided: NeuQuantFloat */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NeuQuantFloat\", function() { return NeuQuantFloat; });\n/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/*\r\n * NeuQuantFloat Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\r\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\r\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\r\n * the algorithm.\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\r\n * this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons who\r\n * receive copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n */\r\n/**\r\n * @preserve TypeScript port:\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * neuquant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n// bias for colour values\r\nconst networkBiasShift = 3;\r\nclass NeuronFloat {\r\n    constructor(defaultValue) {\r\n        this.r = this.g = this.b = this.a = defaultValue;\r\n    }\r\n    /**\r\n     * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\r\n     * @example\r\n     * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);\r\n     */\r\n    toPoint() {\r\n        return _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);\r\n    }\r\n    subtract(r, g, b, a) {\r\n        this.r -= r;\r\n        this.g -= g;\r\n        this.b -= b;\r\n        this.a -= a;\r\n    }\r\n}\r\nclass NeuQuantFloat extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__[\"AbstractPaletteQuantizer\"] {\r\n    constructor(colorDistanceCalculator, colors = 256) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        this._pointArray = [];\r\n        this._sampleFactor = 1;\r\n        this._networkSize = colors;\r\n        this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);\r\n    }\r\n    sample(pointContainer) {\r\n        this._pointArray = this._pointArray.concat(pointContainer.getPointArray());\r\n    }\r\n    *quantize() {\r\n        this._init();\r\n        yield* this._learn();\r\n        yield {\r\n            palette: this._buildPalette(),\r\n            progress: 100,\r\n        };\r\n    }\r\n    _init() {\r\n        this._freq = [];\r\n        this._bias = [];\r\n        this._radPower = [];\r\n        this._network = [];\r\n        for (let i = 0; i < this._networkSize; i++) {\r\n            this._network[i] = new NeuronFloat((i << (networkBiasShift + 8)) / this._networkSize);\r\n            // 1/this._networkSize\r\n            this._freq[i] = NeuQuantFloat._initialBias / this._networkSize;\r\n            this._bias[i] = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Main Learning Loop\r\n     */\r\n    *_learn() {\r\n        let sampleFactor = this._sampleFactor;\r\n        const pointsNumber = this._pointArray.length;\r\n        if (pointsNumber < NeuQuantFloat._minpicturebytes)\r\n            sampleFactor = 1;\r\n        const alphadec = 30 + (sampleFactor - 1) / 3;\r\n        const pointsToSample = pointsNumber / sampleFactor;\r\n        let delta = pointsToSample / NeuQuantFloat._nCycles | 0;\r\n        let alpha = NeuQuantFloat._initAlpha;\r\n        let radius = (this._networkSize >> 3) * NeuQuantFloat._radiusBias;\r\n        let rad = radius >> NeuQuantFloat._radiusBiasShift;\r\n        if (rad <= 1)\r\n            rad = 0;\r\n        for (let i = 0; i < rad; i++) {\r\n            this._radPower[i] = alpha * (((rad * rad - i * i) * NeuQuantFloat._radBias) / (rad * rad));\r\n        }\r\n        let step;\r\n        if (pointsNumber < NeuQuantFloat._minpicturebytes) {\r\n            step = 1;\r\n        }\r\n        else if (pointsNumber % NeuQuantFloat._prime1 !== 0) {\r\n            step = NeuQuantFloat._prime1;\r\n        }\r\n        else if ((pointsNumber % NeuQuantFloat._prime2) !== 0) {\r\n            step = NeuQuantFloat._prime2;\r\n        }\r\n        else if ((pointsNumber % NeuQuantFloat._prime3) !== 0) {\r\n            step = NeuQuantFloat._prime3;\r\n        }\r\n        else {\r\n            step = NeuQuantFloat._prime4;\r\n        }\r\n        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_3__[\"ProgressTracker\"](pointsToSample, 99);\r\n        for (let i = 0, pointIndex = 0; i < pointsToSample;) {\r\n            if (tracker.shouldNotify(i)) {\r\n                yield {\r\n                    progress: tracker.progress,\r\n                };\r\n            }\r\n            const point = this._pointArray[pointIndex];\r\n            const b = point.b << networkBiasShift;\r\n            const g = point.g << networkBiasShift;\r\n            const r = point.r << networkBiasShift;\r\n            const a = point.a << networkBiasShift;\r\n            const neuronIndex = this._contest(b, g, r, a);\r\n            this._alterSingle(alpha, neuronIndex, b, g, r, a);\r\n            if (rad !== 0)\r\n                this._alterNeighbour(rad, neuronIndex, b, g, r, a);\r\n            /* alter neighbours */\r\n            pointIndex += step;\r\n            if (pointIndex >= pointsNumber)\r\n                pointIndex -= pointsNumber;\r\n            i++;\r\n            if (delta === 0)\r\n                delta = 1;\r\n            if (i % delta === 0) {\r\n                alpha -= (alpha / alphadec);\r\n                radius -= (radius / NeuQuantFloat._radiusDecrease);\r\n                rad = radius >> NeuQuantFloat._radiusBiasShift;\r\n                if (rad <= 1)\r\n                    rad = 0;\r\n                for (let j = 0; j < rad; j++)\r\n                    this._radPower[j] = alpha * (((rad * rad - j * j) * NeuQuantFloat._radBias) / (rad * rad));\r\n            }\r\n        }\r\n    }\r\n    _buildPalette() {\r\n        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__[\"Palette\"]();\r\n        this._network.forEach(neuron => {\r\n            palette.add(neuron.toPoint());\r\n        });\r\n        palette.sort();\r\n        return palette;\r\n    }\r\n    /**\r\n     * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]\r\n     */\r\n    _alterNeighbour(rad, i, b, g, r, al) {\r\n        let lo = i - rad;\r\n        if (lo < -1)\r\n            lo = -1;\r\n        let hi = i + rad;\r\n        if (hi > this._networkSize)\r\n            hi = this._networkSize;\r\n        let j = i + 1;\r\n        let k = i - 1;\r\n        let m = 1;\r\n        while (j < hi || k > lo) {\r\n            const a = this._radPower[m++] / NeuQuantFloat._alphaRadBias;\r\n            if (j < hi) {\r\n                const p = this._network[j++];\r\n                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));\r\n            }\r\n            if (k > lo) {\r\n                const p = this._network[k--];\r\n                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Move neuron i towards biased (b,g,r) by factor alpha\r\n     */\r\n    _alterSingle(alpha, i, b, g, r, a) {\r\n        alpha /= NeuQuantFloat._initAlpha;\r\n        /* alter hit neuron */\r\n        const n = this._network[i];\r\n        n.subtract(alpha * (n.r - r), alpha * (n.g - g), alpha * (n.b - b), alpha * (n.a - a));\r\n    }\r\n    /**\r\n     * Search for biased BGR values\r\n     * description:\r\n     *    finds closest neuron (min dist) and updates freq\r\n     *    finds best neuron (min dist-bias) and returns position\r\n     *    for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n     *    bias[i] = _gamma*((1/this._networkSize)-freq[i])\r\n     *\r\n     * Original distance equation:\r\n     *        dist = abs(dR) + abs(dG) + abs(dB)\r\n     */\r\n    _contest(b, g, r, al) {\r\n        const multiplier = (255 * 4) << networkBiasShift;\r\n        let bestd = ~(1 << 31);\r\n        let bestbiasd = bestd;\r\n        let bestpos = -1;\r\n        let bestbiaspos = bestpos;\r\n        for (let i = 0; i < this._networkSize; i++) {\r\n            const n = this._network[i];\r\n            const dist = this._distance.calculateNormalized(n, { r, g, b, a: al }) * multiplier;\r\n            if (dist < bestd) {\r\n                bestd = dist;\r\n                bestpos = i;\r\n            }\r\n            const biasdist = dist - ((this._bias[i]) >> (NeuQuantFloat._initialBiasShift - networkBiasShift));\r\n            if (biasdist < bestbiasd) {\r\n                bestbiasd = biasdist;\r\n                bestbiaspos = i;\r\n            }\r\n            const betafreq = (this._freq[i] >> NeuQuantFloat._betaShift);\r\n            this._freq[i] -= betafreq;\r\n            this._bias[i] += (betafreq << NeuQuantFloat._gammaShift);\r\n        }\r\n        this._freq[bestpos] += NeuQuantFloat._beta;\r\n        this._bias[bestpos] -= NeuQuantFloat._betaGamma;\r\n        return bestbiaspos;\r\n    }\r\n}\r\n/*\r\n four primes near 500 - assume no image has a length so large\r\n that it is divisible by all four primes\r\n */\r\nNeuQuantFloat._prime1 = 499;\r\nNeuQuantFloat._prime2 = 491;\r\nNeuQuantFloat._prime3 = 487;\r\nNeuQuantFloat._prime4 = 503;\r\nNeuQuantFloat._minpicturebytes = NeuQuantFloat._prime4;\r\n// no. of learning cycles\r\nNeuQuantFloat._nCycles = 100;\r\n// defs for freq and bias\r\nNeuQuantFloat._initialBiasShift = 16;\r\n// bias for fractions\r\nNeuQuantFloat._initialBias = (1 << NeuQuantFloat._initialBiasShift);\r\nNeuQuantFloat._gammaShift = 10;\r\n// gamma = 1024\r\n// TODO: why gamma is never used?\r\n// private static _gamma : number     = (1 << NeuQuantFloat._gammaShift);\r\nNeuQuantFloat._betaShift = 10;\r\nNeuQuantFloat._beta = (NeuQuantFloat._initialBias >> NeuQuantFloat._betaShift);\r\n// beta = 1/1024\r\nNeuQuantFloat._betaGamma = (NeuQuantFloat._initialBias << (NeuQuantFloat._gammaShift - NeuQuantFloat._betaShift));\r\n/*\r\n * for 256 cols, radius starts\r\n */\r\nNeuQuantFloat._radiusBiasShift = 6;\r\n// at 32.0 biased by 6 bits\r\nNeuQuantFloat._radiusBias = 1 << NeuQuantFloat._radiusBiasShift;\r\n// and decreases by a factor of 1/30 each cycle\r\nNeuQuantFloat._radiusDecrease = 30;\r\n/* defs for decreasing alpha factor */\r\n// alpha starts at 1.0\r\nNeuQuantFloat._alphaBiasShift = 10;\r\n// biased by 10 bits\r\nNeuQuantFloat._initAlpha = (1 << NeuQuantFloat._alphaBiasShift);\r\n/* radBias and alphaRadBias used for radpower calculation */\r\nNeuQuantFloat._radBiasShift = 8;\r\nNeuQuantFloat._radBias = 1 << NeuQuantFloat._radBiasShift;\r\nNeuQuantFloat._alphaRadBiasShift = NeuQuantFloat._alphaBiasShift + NeuQuantFloat._radBiasShift;\r\nNeuQuantFloat._alphaRadBias = 1 << NeuQuantFloat._alphaRadBiasShift;\r\n//# sourceMappingURL=neuquantFloat.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/paletteQuantizer.js ***!\n  \\*******************************************************************/\n/*! exports provided: AbstractPaletteQuantizer */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractPaletteQuantizer\", function() { return AbstractPaletteQuantizer; });\nclass AbstractPaletteQuantizer {\r\n    quantizeSync() {\r\n        for (const value of this.quantize()) {\r\n            if (value.palette) {\r\n                return value.palette;\r\n            }\r\n        }\r\n        throw new Error('unreachable');\r\n    }\r\n}\r\n//# sourceMappingURL=paletteQuantizer.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js\":\n/*!**************************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js ***!\n  \\**************************************************************************/\n/*! exports provided: ColorHistogram */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorHistogram\", function() { return ColorHistogram; });\n/* harmony import */ var _utils_hueStatistics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/hueStatistics */ \"./node_modules/image-q/dist/esm/utils/hueStatistics.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/*\r\n * Copyright (c) 2015, Leon Sorokin\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * ColorHistogram.js - an image quantization lib\r\n */\r\n/**\r\n * @preserve TypeScript port:\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * colorHistogram.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\nclass ColorHistogram {\r\n    constructor(method, colors) {\r\n        // 1 = by global population, 2 = subregion population threshold\r\n        this._method = method;\r\n        // if > 0, enables hues stats and min-color retention per group\r\n        this._minHueCols = colors << 2; // opts.minHueCols || 0;\r\n        // # of highest-frequency colors to start with for palette reduction\r\n        this._initColors = colors << 2;\r\n        // HueStatistics instance\r\n        this._hueStats = new _utils_hueStatistics__WEBPACK_IMPORTED_MODULE_0__[\"HueStatistics\"](ColorHistogram._hueGroups, this._minHueCols);\r\n        this._histogram = Object.create(null); // tslint:disable-line:no-null-keyword\r\n    }\r\n    sample(pointContainer) {\r\n        switch (this._method) {\r\n            case 1:\r\n                this._colorStats1D(pointContainer);\r\n                break;\r\n            case 2:\r\n                this._colorStats2D(pointContainer);\r\n                break;\r\n        }\r\n    }\r\n    getImportanceSortedColorsIDXI32() {\r\n        // TODO: fix typing issue in stableSort func\r\n        const sorted = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_1__[\"stableSort\"])(Object.keys(this._histogram), (a, b) => this._histogram[b] - this._histogram[a]);\r\n        if (sorted.length === 0) {\r\n            return [];\r\n        }\r\n        let idxi32;\r\n        switch (this._method) {\r\n            case 1:\r\n                const initialColorsLimit = Math.min(sorted.length, this._initColors);\r\n                const last = sorted[initialColorsLimit - 1];\r\n                const freq = this._histogram[last];\r\n                idxi32 = sorted.slice(0, initialColorsLimit);\r\n                // add any cut off colors with same freq as last\r\n                let pos = initialColorsLimit;\r\n                const len = sorted.length;\r\n                while (pos < len && this._histogram[sorted[pos]] === freq) {\r\n                    idxi32.push(sorted[pos++]);\r\n                }\r\n                // inject min huegroup colors\r\n                this._hueStats.injectIntoArray(idxi32);\r\n                break;\r\n            case 2:\r\n                idxi32 = sorted;\r\n                break;\r\n            default:\r\n                // TODO: rethink errors\r\n                throw new Error('Incorrect method');\r\n        }\r\n        // int32-ify values\r\n        return idxi32.map(function (v) {\r\n            return +v;\r\n        });\r\n    }\r\n    // global top-population\r\n    _colorStats1D(pointContainer) {\r\n        const histG = this._histogram;\r\n        const pointArray = pointContainer.getPointArray();\r\n        const len = pointArray.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const col = pointArray[i].uint32;\r\n            // collect hue stats\r\n            this._hueStats.check(col);\r\n            if (col in histG) {\r\n                histG[col]++;\r\n            }\r\n            else {\r\n                histG[col] = 1;\r\n            }\r\n        }\r\n    }\r\n    // population threshold within subregions\r\n    // FIXME: this can over-reduce (few/no colors same?), need a way to keep\r\n    // important colors that dont ever reach local thresholds (gradients?)\r\n    _colorStats2D(pointContainer) {\r\n        const width = pointContainer.getWidth();\r\n        const height = pointContainer.getHeight();\r\n        const pointArray = pointContainer.getPointArray();\r\n        const boxW = ColorHistogram._boxSize[0];\r\n        const boxH = ColorHistogram._boxSize[1];\r\n        const area = boxW * boxH;\r\n        const boxes = this._makeBoxes(width, height, boxW, boxH);\r\n        const histG = this._histogram;\r\n        boxes.forEach(box => {\r\n            let effc = Math.round((box.w * box.h) / area) * ColorHistogram._boxPixels;\r\n            if (effc < 2)\r\n                effc = 2;\r\n            const histL = {};\r\n            this._iterateBox(box, width, (i) => {\r\n                const col = pointArray[i].uint32;\r\n                // collect hue stats\r\n                this._hueStats.check(col);\r\n                if (col in histG) {\r\n                    histG[col]++;\r\n                }\r\n                else if (col in histL) {\r\n                    if (++histL[col] >= effc) {\r\n                        histG[col] = histL[col];\r\n                    }\r\n                }\r\n                else {\r\n                    histL[col] = 1;\r\n                }\r\n            });\r\n        });\r\n        // inject min huegroup colors\r\n        this._hueStats.injectIntoDictionary(histG);\r\n    }\r\n    // iterates @bbox within a parent rect of width @wid; calls @fn, passing index within parent\r\n    _iterateBox(bbox, wid, fn) {\r\n        const b = bbox;\r\n        const i0 = b.y * wid + b.x;\r\n        const i1 = (b.y + b.h - 1) * wid + (b.x + b.w - 1);\r\n        const incr = wid - b.w + 1;\r\n        let cnt = 0;\r\n        let i = i0;\r\n        do {\r\n            fn.call(this, i);\r\n            i += (++cnt % b.w === 0) ? incr : 1;\r\n        } while (i <= i1);\r\n    }\r\n    /**\r\n     *    partitions a rectangle of width x height into\r\n     *    array of boxes stepX x stepY (or less)\r\n     */\r\n    _makeBoxes(width, height, stepX, stepY) {\r\n        const wrem = width % stepX;\r\n        const hrem = height % stepY;\r\n        const xend = width - wrem;\r\n        const yend = height - hrem;\r\n        const boxesArray = [];\r\n        for (let y = 0; y < height; y += stepY) {\r\n            for (let x = 0; x < width; x += stepX) {\r\n                boxesArray.push({ x, y, w: (x === xend ? wrem : stepX), h: (y === yend ? hrem : stepY) });\r\n            }\r\n        }\r\n        return boxesArray;\r\n    }\r\n}\r\nColorHistogram._boxSize = [64, 64];\r\nColorHistogram._boxPixels = 2;\r\nColorHistogram._hueGroups = 10;\r\n//# sourceMappingURL=colorHistogram.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/rgbquant/rgbquant.js\":\n/*!********************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/rgbquant/rgbquant.js ***!\n  \\********************************************************************/\n/*! exports provided: RGBQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBQuant\", function() { return RGBQuant; });\n/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _colorHistogram__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./colorHistogram */ \"./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js\");\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/*\r\n * Copyright (c) 2015, Leon Sorokin\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * RGBQuant.js - an image quantization lib\r\n */\r\n/**\r\n * @preserve TypeScript port:\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * rgbquant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass RemovedColor {\r\n    constructor(index, color, distance) {\r\n        this.index = index;\r\n        this.color = color;\r\n        this.distance = distance;\r\n    }\r\n}\r\n// TODO: make input/output image and input/output palettes with instances of class Point only!\r\nclass RGBQuant extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_3__[\"AbstractPaletteQuantizer\"] {\r\n    constructor(colorDistanceCalculator, colors = 256, method = 2) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        // desired final palette size\r\n        this._colors = colors;\r\n        // histogram to accumulate\r\n        this._histogram = new _colorHistogram__WEBPACK_IMPORTED_MODULE_2__[\"ColorHistogram\"](method, colors);\r\n        this._initialDistance = 0.01;\r\n        this._distanceIncrement = 0.005;\r\n    }\r\n    // gathers histogram info\r\n    sample(image) {\r\n        /*\r\n         var pointArray = image.getPointArray(), max = [0, 0, 0, 0], min = [255, 255, 255, 255];\r\n    \r\n         for (var i = 0, l = pointArray.length; i < l; i++) {\r\n         var color = pointArray[i];\r\n         for (var componentIndex = 0; componentIndex < 4; componentIndex++) {\r\n         if (max[componentIndex] < color.rgba[componentIndex]) max[componentIndex] = color.rgba[componentIndex];\r\n         if (min[componentIndex] > color.rgba[componentIndex]) min[componentIndex] = color.rgba[componentIndex];\r\n         }\r\n         }\r\n         var rd = max[0] - min[0], gd = max[1] - min[1], bd = max[2] - min[2], ad = max[3] - min[3];\r\n         this._distance.setWhitePoint(rd, gd, bd, ad);\r\n    \r\n         this._initialDistance = (Math.sqrt(rd * rd + gd * gd + bd * bd + ad * ad) / Math.sqrt(255 * 255 + 255 * 255 + 255 * 255)) * 0.01;\r\n         */\r\n        this._histogram.sample(image);\r\n    }\r\n    // reduces histogram to palette, remaps & memoizes reduced colors\r\n    *quantize() {\r\n        const idxi32 = this._histogram.getImportanceSortedColorsIDXI32();\r\n        if (idxi32.length === 0) {\r\n            throw new Error('No colors in image');\r\n        }\r\n        yield* this._buildPalette(idxi32);\r\n    }\r\n    // reduces similar colors from an importance-sorted Uint32 rgba array\r\n    *_buildPalette(idxi32) {\r\n        // reduce histogram to create initial palette\r\n        // build full rgb palette\r\n        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__[\"Palette\"]();\r\n        const colorArray = palette.getPointContainer().getPointArray();\r\n        const usageArray = new Array(idxi32.length); // tslint:disable-line:prefer-array-literal\r\n        for (let i = 0; i < idxi32.length; i++) {\r\n            colorArray.push(_utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByUint32(idxi32[i]));\r\n            usageArray[i] = 1;\r\n        }\r\n        const len = colorArray.length;\r\n        const memDist = [];\r\n        let palLen = len;\r\n        let thold = this._initialDistance;\r\n        // palette already at or below desired length\r\n        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_5__[\"ProgressTracker\"](palLen - this._colors, 99);\r\n        while (palLen > this._colors) {\r\n            memDist.length = 0;\r\n            // iterate palette\r\n            for (let i = 0; i < len; i++) {\r\n                if (tracker.shouldNotify(len - palLen)) {\r\n                    yield {\r\n                        progress: tracker.progress,\r\n                    };\r\n                }\r\n                if (usageArray[i] === 0)\r\n                    continue;\r\n                const pxi = colorArray[i];\r\n                // if (!pxi) continue;\r\n                for (let j = i + 1; j < len; j++) {\r\n                    if (usageArray[j] === 0)\r\n                        continue;\r\n                    const pxj = colorArray[j];\r\n                    // if (!pxj) continue;\r\n                    const dist = this._distance.calculateNormalized(pxi, pxj);\r\n                    if (dist < thold) {\r\n                        // store index,rgb,dist\r\n                        memDist.push(new RemovedColor(j, pxj, dist));\r\n                        usageArray[j] = 0;\r\n                        palLen--;\r\n                    }\r\n                }\r\n            }\r\n            // palette reduction pass\r\n            // console.log(\"palette length: \" + palLen);\r\n            // if palette is still much larger than target, increment by larger initDist\r\n            thold += (palLen > this._colors * 3) ? this._initialDistance : this._distanceIncrement;\r\n        }\r\n        // if palette is over-reduced, re-add removed colors with largest distances from last round\r\n        if (palLen < this._colors) {\r\n            // sort descending\r\n            Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_4__[\"stableSort\"])(memDist, function (a, b) {\r\n                return b.distance - a.distance;\r\n            });\r\n            let k = 0;\r\n            while (palLen < this._colors && k < memDist.length) {\r\n                const removedColor = memDist[k];\r\n                // re-inject rgb into final palette\r\n                usageArray[removedColor.index] = 1;\r\n                palLen++;\r\n                k++;\r\n            }\r\n        }\r\n        let colors = colorArray.length;\r\n        for (let colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {\r\n            if (usageArray[colorIndex] === 0) {\r\n                if (colorIndex !== colors - 1) {\r\n                    colorArray[colorIndex] = colorArray[colors - 1];\r\n                }\r\n                --colors;\r\n            }\r\n        }\r\n        colorArray.length = colors;\r\n        palette.sort();\r\n        yield {\r\n            palette,\r\n            progress: 100,\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=rgbquant.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/wu/wuQuant.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/wu/wuQuant.js ***!\n  \\*************************************************************/\n/*! exports provided: WuColorCube, WuQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WuColorCube\", function() { return WuColorCube; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WuQuant\", function() { return WuQuant; });\n/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * wuQuant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\nfunction createArray1D(dimension1) {\r\n    const a = [];\r\n    for (let k = 0; k < dimension1; k++) {\r\n        a[k] = 0;\r\n    }\r\n    return a;\r\n}\r\nfunction createArray4D(dimension1, dimension2, dimension3, dimension4) {\r\n    const a = new Array(dimension1);\r\n    for (let i = 0; i < dimension1; i++) {\r\n        a[i] = new Array(dimension2);\r\n        for (let j = 0; j < dimension2; j++) {\r\n            a[i][j] = new Array(dimension3);\r\n            for (let k = 0; k < dimension3; k++) {\r\n                a[i][j][k] = new Array(dimension4);\r\n                for (let l = 0; l < dimension4; l++) {\r\n                    a[i][j][k][l] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return a;\r\n}\r\nfunction createArray3D(dimension1, dimension2, dimension3) {\r\n    const a = new Array(dimension1);\r\n    for (let i = 0; i < dimension1; i++) {\r\n        a[i] = new Array(dimension2);\r\n        for (let j = 0; j < dimension2; j++) {\r\n            a[i][j] = new Array(dimension3);\r\n            for (let k = 0; k < dimension3; k++) {\r\n                a[i][j][k] = 0;\r\n            }\r\n        }\r\n    }\r\n    return a;\r\n}\r\nfunction fillArray3D(a, dimension1, dimension2, dimension3, value) {\r\n    for (let i = 0; i < dimension1; i++) {\r\n        a[i] = [];\r\n        for (let j = 0; j < dimension2; j++) {\r\n            a[i][j] = [];\r\n            for (let k = 0; k < dimension3; k++) {\r\n                a[i][j][k] = value;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction fillArray1D(a, dimension1, value) {\r\n    for (let i = 0; i < dimension1; i++) {\r\n        a[i] = value;\r\n    }\r\n}\r\nclass WuColorCube {\r\n}\r\nclass WuQuant extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__[\"AbstractPaletteQuantizer\"] {\r\n    constructor(colorDistanceCalculator, colors = 256, significantBitsPerChannel = 5) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        this._setQuality(significantBitsPerChannel);\r\n        this._initialize(colors);\r\n    }\r\n    sample(image) {\r\n        const pointArray = image.getPointArray();\r\n        for (let i = 0, l = pointArray.length; i < l; i++) {\r\n            this._addColor(pointArray[i]);\r\n        }\r\n        this._pixels = this._pixels.concat(pointArray);\r\n    }\r\n    *quantize() {\r\n        yield* this._preparePalette();\r\n        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__[\"Palette\"]();\r\n        // generates palette\r\n        for (let paletteIndex = 0; paletteIndex < this._colors; paletteIndex++) {\r\n            if (this._sums[paletteIndex] > 0) {\r\n                const sum = this._sums[paletteIndex];\r\n                const r = this._reds[paletteIndex] / sum;\r\n                const g = this._greens[paletteIndex] / sum;\r\n                const b = this._blues[paletteIndex] / sum;\r\n                const a = this._alphas[paletteIndex] / sum;\r\n                const color = _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByRGBA(r | 0, g | 0, b | 0, a | 0);\r\n                palette.add(color);\r\n            }\r\n        }\r\n        palette.sort();\r\n        yield {\r\n            palette,\r\n            progress: 100,\r\n        };\r\n    }\r\n    *_preparePalette() {\r\n        // preprocess the colors\r\n        yield* this._calculateMoments();\r\n        let next = 0;\r\n        const volumeVariance = createArray1D(this._colors);\r\n        // processes the cubes\r\n        for (let cubeIndex = 1; cubeIndex < this._colors; ++cubeIndex) {\r\n            // if cut is possible; make it\r\n            if (this._cut(this._cubes[next], this._cubes[cubeIndex])) {\r\n                volumeVariance[next] = this._cubes[next].volume > 1 ? this._calculateVariance(this._cubes[next]) : 0.0;\r\n                volumeVariance[cubeIndex] = this._cubes[cubeIndex].volume > 1 ? this._calculateVariance(this._cubes[cubeIndex]) : 0.0;\r\n            }\r\n            else {\r\n                // the cut was not possible, revert the index\r\n                volumeVariance[next] = 0.0;\r\n                cubeIndex--;\r\n            }\r\n            next = 0;\r\n            let temp = volumeVariance[0];\r\n            for (let index = 1; index <= cubeIndex; ++index) {\r\n                if (volumeVariance[index] > temp) {\r\n                    temp = volumeVariance[index];\r\n                    next = index;\r\n                }\r\n            }\r\n            if (temp <= 0.0) {\r\n                this._colors = cubeIndex + 1;\r\n                break;\r\n            }\r\n        }\r\n        const lookupRed = [];\r\n        const lookupGreen = [];\r\n        const lookupBlue = [];\r\n        const lookupAlpha = [];\r\n        // precalculates lookup tables\r\n        for (let k = 0; k < this._colors; ++k) {\r\n            const weight = WuQuant._volume(this._cubes[k], this._weights);\r\n            if (weight > 0) {\r\n                lookupRed[k] = (WuQuant._volume(this._cubes[k], this._momentsRed) / weight) | 0;\r\n                lookupGreen[k] = (WuQuant._volume(this._cubes[k], this._momentsGreen) / weight) | 0;\r\n                lookupBlue[k] = (WuQuant._volume(this._cubes[k], this._momentsBlue) / weight) | 0;\r\n                lookupAlpha[k] = (WuQuant._volume(this._cubes[k], this._momentsAlpha) / weight) | 0;\r\n            }\r\n            else {\r\n                lookupRed[k] = 0;\r\n                lookupGreen[k] = 0;\r\n                lookupBlue[k] = 0;\r\n                lookupAlpha[k] = 0;\r\n            }\r\n        }\r\n        this._reds = createArray1D(this._colors + 1);\r\n        this._greens = createArray1D(this._colors + 1);\r\n        this._blues = createArray1D(this._colors + 1);\r\n        this._alphas = createArray1D(this._colors + 1);\r\n        this._sums = createArray1D(this._colors + 1);\r\n        // scans and adds colors\r\n        for (let index = 0, l = this._pixels.length; index < l; index++) {\r\n            const color = this._pixels[index];\r\n            const match = -1;\r\n            let bestMatch = match;\r\n            let bestDistance = Number.MAX_VALUE;\r\n            for (let lookup = 0; lookup < this._colors; lookup++) {\r\n                const foundRed = lookupRed[lookup];\r\n                const foundGreen = lookupGreen[lookup];\r\n                const foundBlue = lookupBlue[lookup];\r\n                const foundAlpha = lookupAlpha[lookup];\r\n                const distance = this._distance.calculateRaw(foundRed, foundGreen, foundBlue, foundAlpha, color.r, color.g, color.b, color.a);\r\n                if (distance < bestDistance) {\r\n                    bestDistance = distance;\r\n                    bestMatch = lookup;\r\n                }\r\n            }\r\n            this._reds[bestMatch] += color.r;\r\n            this._greens[bestMatch] += color.g;\r\n            this._blues[bestMatch] += color.b;\r\n            this._alphas[bestMatch] += color.a;\r\n            this._sums[bestMatch]++;\r\n        }\r\n    }\r\n    _addColor(color) {\r\n        const bitsToRemove = 8 - this._significantBitsPerChannel;\r\n        const indexRed = (color.r >> bitsToRemove) + 1;\r\n        const indexGreen = (color.g >> bitsToRemove) + 1;\r\n        const indexBlue = (color.b >> bitsToRemove) + 1;\r\n        const indexAlpha = (color.a >> bitsToRemove) + 1;\r\n        // if(color.a > 10) {\r\n        this._weights[indexAlpha][indexRed][indexGreen][indexBlue]++;\r\n        this._momentsRed[indexAlpha][indexRed][indexGreen][indexBlue] += color.r;\r\n        this._momentsGreen[indexAlpha][indexRed][indexGreen][indexBlue] += color.g;\r\n        this._momentsBlue[indexAlpha][indexRed][indexGreen][indexBlue] += color.b;\r\n        this._momentsAlpha[indexAlpha][indexRed][indexGreen][indexBlue] += color.a;\r\n        this._moments[indexAlpha][indexRed][indexGreen][indexBlue] += this._table[color.r] + this._table[color.g] + this._table[color.b] + this._table[color.a];\r\n        // }\r\n    }\r\n    /**\r\n     * Converts the histogram to a series of _moments.\r\n     */\r\n    *_calculateMoments() {\r\n        const area = [];\r\n        const areaRed = [];\r\n        const areaGreen = [];\r\n        const areaBlue = [];\r\n        const areaAlpha = [];\r\n        const area2 = [];\r\n        const xarea = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xareaRed = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xareaGreen = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xareaBlue = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xareaAlpha = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xarea2 = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        let trackerProgress = 0;\r\n        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_3__[\"ProgressTracker\"](this._alphaMaxSideIndex * this._maxSideIndex, 99);\r\n        for (let alphaIndex = 1; alphaIndex <= this._alphaMaxSideIndex; ++alphaIndex) {\r\n            fillArray3D(xarea, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xareaRed, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xareaGreen, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xareaBlue, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xareaAlpha, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xarea2, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            for (let redIndex = 1; redIndex <= this._maxSideIndex; ++redIndex, ++trackerProgress) {\r\n                if (tracker.shouldNotify(trackerProgress)) {\r\n                    yield {\r\n                        progress: tracker.progress,\r\n                    };\r\n                }\r\n                fillArray1D(area, this._sideSize, 0);\r\n                fillArray1D(areaRed, this._sideSize, 0);\r\n                fillArray1D(areaGreen, this._sideSize, 0);\r\n                fillArray1D(areaBlue, this._sideSize, 0);\r\n                fillArray1D(areaAlpha, this._sideSize, 0);\r\n                fillArray1D(area2, this._sideSize, 0);\r\n                for (let greenIndex = 1; greenIndex <= this._maxSideIndex; ++greenIndex) {\r\n                    let line = 0;\r\n                    let lineRed = 0;\r\n                    let lineGreen = 0;\r\n                    let lineBlue = 0;\r\n                    let lineAlpha = 0;\r\n                    let line2 = 0.0;\r\n                    for (let blueIndex = 1; blueIndex <= this._maxSideIndex; ++blueIndex) {\r\n                        line += this._weights[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        lineRed += this._momentsRed[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        lineGreen += this._momentsGreen[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        lineBlue += this._momentsBlue[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        lineAlpha += this._momentsAlpha[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        line2 += this._moments[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        area[blueIndex] += line;\r\n                        areaRed[blueIndex] += lineRed;\r\n                        areaGreen[blueIndex] += lineGreen;\r\n                        areaBlue[blueIndex] += lineBlue;\r\n                        areaAlpha[blueIndex] += lineAlpha;\r\n                        area2[blueIndex] += line2;\r\n                        xarea[redIndex][greenIndex][blueIndex] = xarea[redIndex - 1][greenIndex][blueIndex] + area[blueIndex];\r\n                        xareaRed[redIndex][greenIndex][blueIndex] = xareaRed[redIndex - 1][greenIndex][blueIndex] + areaRed[blueIndex];\r\n                        xareaGreen[redIndex][greenIndex][blueIndex] = xareaGreen[redIndex - 1][greenIndex][blueIndex] + areaGreen[blueIndex];\r\n                        xareaBlue[redIndex][greenIndex][blueIndex] = xareaBlue[redIndex - 1][greenIndex][blueIndex] + areaBlue[blueIndex];\r\n                        xareaAlpha[redIndex][greenIndex][blueIndex] = xareaAlpha[redIndex - 1][greenIndex][blueIndex] + areaAlpha[blueIndex];\r\n                        xarea2[redIndex][greenIndex][blueIndex] = xarea2[redIndex - 1][greenIndex][blueIndex] + area2[blueIndex];\r\n                        this._weights[alphaIndex][redIndex][greenIndex][blueIndex] = this._weights[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xarea[redIndex][greenIndex][blueIndex];\r\n                        this._momentsRed[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsRed[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaRed[redIndex][greenIndex][blueIndex];\r\n                        this._momentsGreen[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsGreen[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaGreen[redIndex][greenIndex][blueIndex];\r\n                        this._momentsBlue[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsBlue[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaBlue[redIndex][greenIndex][blueIndex];\r\n                        this._momentsAlpha[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsAlpha[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaAlpha[redIndex][greenIndex][blueIndex];\r\n                        this._moments[alphaIndex][redIndex][greenIndex][blueIndex] = this._moments[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xarea2[redIndex][greenIndex][blueIndex];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Computes the volume of the cube in a specific moment.\r\n     */\r\n    static _volumeFloat(cube, moment) {\r\n        return (moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] -\r\n            moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] -\r\n            moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] +\r\n            moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum] -\r\n            moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] +\r\n            moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] +\r\n            moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] -\r\n            moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n            (moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] -\r\n                moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] -\r\n                moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] -\r\n                moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +\r\n                moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +\r\n                moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum] -\r\n                moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n    }\r\n    /**\r\n     * Computes the volume of the cube in a specific moment.\r\n     */\r\n    static _volume(cube, moment) {\r\n        return WuQuant._volumeFloat(cube, moment) | 0;\r\n    }\r\n    /**\r\n     * Splits the cube in given position][and color direction.\r\n     */\r\n    static _top(cube, direction, position, moment) {\r\n        let result;\r\n        switch (direction) {\r\n            case WuQuant._alpha:\r\n                result = (moment[position][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] -\r\n                    moment[position][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] -\r\n                    moment[position][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] +\r\n                    moment[position][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (moment[position][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[position][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] -\r\n                        moment[position][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[position][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n                break;\r\n            case WuQuant._red:\r\n                result = (moment[cube.alphaMaximum][position][cube.greenMaximum][cube.blueMaximum] -\r\n                    moment[cube.alphaMaximum][position][cube.greenMinimum][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][position][cube.greenMaximum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][position][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (moment[cube.alphaMaximum][position][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[cube.alphaMaximum][position][cube.greenMinimum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][position][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][position][cube.greenMinimum][cube.blueMinimum]);\r\n                break;\r\n            case WuQuant._green:\r\n                result = (moment[cube.alphaMaximum][cube.redMaximum][position][cube.blueMaximum] -\r\n                    moment[cube.alphaMaximum][cube.redMinimum][position][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][cube.redMaximum][position][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMinimum][position][cube.blueMaximum]) -\r\n                    (moment[cube.alphaMaximum][cube.redMaximum][position][cube.blueMinimum] -\r\n                        moment[cube.alphaMaximum][cube.redMinimum][position][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMaximum][position][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][position][cube.blueMinimum]);\r\n                break;\r\n            case WuQuant._blue:\r\n                result = (moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][position] -\r\n                    moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][position] -\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][position] +\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][position]) -\r\n                    (moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][position] -\r\n                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][position] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][position] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][position]);\r\n                break;\r\n            default:\r\n                throw new Error('impossible');\r\n        }\r\n        return result | 0;\r\n    }\r\n    /**\r\n     * Splits the cube in a given color direction at its minimum.\r\n     */\r\n    static _bottom(cube, direction, moment) {\r\n        switch (direction) {\r\n            case WuQuant._alpha:\r\n                return (-moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (-moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n            case WuQuant._red:\r\n                return (-moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] +\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (-moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n            case WuQuant._green:\r\n                return (-moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] +\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (-moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n            case WuQuant._blue:\r\n                return (-moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] +\r\n                    moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]) -\r\n                    (-moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n            default:\r\n                // TODO: why here is return 0, and in this._top there is no default at all (now it is throw error)?\r\n                return 0;\r\n        }\r\n    }\r\n    /**\r\n     * Calculates statistical variance for a given cube.\r\n     */\r\n    _calculateVariance(cube) {\r\n        const volumeRed = WuQuant._volume(cube, this._momentsRed);\r\n        const volumeGreen = WuQuant._volume(cube, this._momentsGreen);\r\n        const volumeBlue = WuQuant._volume(cube, this._momentsBlue);\r\n        const volumeAlpha = WuQuant._volume(cube, this._momentsAlpha);\r\n        const volumeMoment = WuQuant._volumeFloat(cube, this._moments);\r\n        const volumeWeight = WuQuant._volume(cube, this._weights);\r\n        const distance = volumeRed * volumeRed + volumeGreen * volumeGreen + volumeBlue * volumeBlue + volumeAlpha * volumeAlpha;\r\n        return volumeMoment - (distance / volumeWeight);\r\n    }\r\n    /**\r\n     * Finds the optimal (maximal) position for the cut.\r\n     */\r\n    _maximize(cube, direction, first, last, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight) {\r\n        const bottomRed = WuQuant._bottom(cube, direction, this._momentsRed) | 0;\r\n        const bottomGreen = WuQuant._bottom(cube, direction, this._momentsGreen) | 0;\r\n        const bottomBlue = WuQuant._bottom(cube, direction, this._momentsBlue) | 0;\r\n        const bottomAlpha = WuQuant._bottom(cube, direction, this._momentsAlpha) | 0;\r\n        const bottomWeight = WuQuant._bottom(cube, direction, this._weights) | 0;\r\n        let result = 0.0;\r\n        let cutPosition = -1;\r\n        for (let position = first; position < last; ++position) {\r\n            // determines the cube cut at a certain position\r\n            let halfRed = bottomRed + WuQuant._top(cube, direction, position, this._momentsRed);\r\n            let halfGreen = bottomGreen + WuQuant._top(cube, direction, position, this._momentsGreen);\r\n            let halfBlue = bottomBlue + WuQuant._top(cube, direction, position, this._momentsBlue);\r\n            let halfAlpha = bottomAlpha + WuQuant._top(cube, direction, position, this._momentsAlpha);\r\n            let halfWeight = bottomWeight + WuQuant._top(cube, direction, position, this._weights);\r\n            // the cube cannot be cut at bottom (this would lead to empty cube)\r\n            if (halfWeight !== 0) {\r\n                let halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;\r\n                let temp = halfDistance / halfWeight;\r\n                halfRed = wholeRed - halfRed;\r\n                halfGreen = wholeGreen - halfGreen;\r\n                halfBlue = wholeBlue - halfBlue;\r\n                halfAlpha = wholeAlpha - halfAlpha;\r\n                halfWeight = wholeWeight - halfWeight;\r\n                if (halfWeight !== 0) {\r\n                    halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;\r\n                    temp += halfDistance / halfWeight;\r\n                    if (temp > result) {\r\n                        result = temp;\r\n                        cutPosition = position;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return { max: result, position: cutPosition };\r\n    }\r\n    // Cuts a cube with another one.\r\n    _cut(first, second) {\r\n        let direction;\r\n        const wholeRed = WuQuant._volume(first, this._momentsRed);\r\n        const wholeGreen = WuQuant._volume(first, this._momentsGreen);\r\n        const wholeBlue = WuQuant._volume(first, this._momentsBlue);\r\n        const wholeAlpha = WuQuant._volume(first, this._momentsAlpha);\r\n        const wholeWeight = WuQuant._volume(first, this._weights);\r\n        const red = this._maximize(first, WuQuant._red, first.redMinimum + 1, first.redMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\r\n        const green = this._maximize(first, WuQuant._green, first.greenMinimum + 1, first.greenMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\r\n        const blue = this._maximize(first, WuQuant._blue, first.blueMinimum + 1, first.blueMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\r\n        const alpha = this._maximize(first, WuQuant._alpha, first.alphaMinimum + 1, first.alphaMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\r\n        if (alpha.max >= red.max && alpha.max >= green.max && alpha.max >= blue.max) {\r\n            direction = WuQuant._alpha;\r\n            // cannot split empty cube\r\n            if (alpha.position < 0)\r\n                return false;\r\n        }\r\n        else {\r\n            if (red.max >= alpha.max && red.max >= green.max && red.max >= blue.max) {\r\n                direction = WuQuant._red;\r\n            }\r\n            else if (green.max >= alpha.max && green.max >= red.max && green.max >= blue.max) {\r\n                direction = WuQuant._green;\r\n            }\r\n            else {\r\n                direction = WuQuant._blue;\r\n            }\r\n        }\r\n        second.redMaximum = first.redMaximum;\r\n        second.greenMaximum = first.greenMaximum;\r\n        second.blueMaximum = first.blueMaximum;\r\n        second.alphaMaximum = first.alphaMaximum;\r\n        // cuts in a certain direction\r\n        switch (direction) {\r\n            case WuQuant._red:\r\n                second.redMinimum = first.redMaximum = red.position;\r\n                second.greenMinimum = first.greenMinimum;\r\n                second.blueMinimum = first.blueMinimum;\r\n                second.alphaMinimum = first.alphaMinimum;\r\n                break;\r\n            case WuQuant._green:\r\n                second.greenMinimum = first.greenMaximum = green.position;\r\n                second.redMinimum = first.redMinimum;\r\n                second.blueMinimum = first.blueMinimum;\r\n                second.alphaMinimum = first.alphaMinimum;\r\n                break;\r\n            case WuQuant._blue:\r\n                second.blueMinimum = first.blueMaximum = blue.position;\r\n                second.redMinimum = first.redMinimum;\r\n                second.greenMinimum = first.greenMinimum;\r\n                second.alphaMinimum = first.alphaMinimum;\r\n                break;\r\n            case WuQuant._alpha:\r\n                second.alphaMinimum = first.alphaMaximum = alpha.position;\r\n                second.blueMinimum = first.blueMinimum;\r\n                second.redMinimum = first.redMinimum;\r\n                second.greenMinimum = first.greenMinimum;\r\n                break;\r\n        }\r\n        // determines the volumes after cut\r\n        first.volume = (first.redMaximum - first.redMinimum) * (first.greenMaximum - first.greenMinimum) * (first.blueMaximum - first.blueMinimum) * (first.alphaMaximum - first.alphaMinimum);\r\n        second.volume = (second.redMaximum - second.redMinimum) * (second.greenMaximum - second.greenMinimum) * (second.blueMaximum - second.blueMinimum) * (second.alphaMaximum - second.alphaMinimum);\r\n        // the cut was successful\r\n        return true;\r\n    }\r\n    _initialize(colors) {\r\n        this._colors = colors;\r\n        // creates all the _cubes\r\n        this._cubes = [];\r\n        // initializes all the _cubes\r\n        for (let cubeIndex = 0; cubeIndex < colors; cubeIndex++) {\r\n            this._cubes[cubeIndex] = new WuColorCube();\r\n        }\r\n        // resets the reference minimums\r\n        this._cubes[0].redMinimum = 0;\r\n        this._cubes[0].greenMinimum = 0;\r\n        this._cubes[0].blueMinimum = 0;\r\n        this._cubes[0].alphaMinimum = 0;\r\n        // resets the reference maximums\r\n        this._cubes[0].redMaximum = this._maxSideIndex;\r\n        this._cubes[0].greenMaximum = this._maxSideIndex;\r\n        this._cubes[0].blueMaximum = this._maxSideIndex;\r\n        this._cubes[0].alphaMaximum = this._alphaMaxSideIndex;\r\n        this._weights = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._momentsRed = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._momentsGreen = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._momentsBlue = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._momentsAlpha = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._moments = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._table = [];\r\n        for (let tableIndex = 0; tableIndex < 256; ++tableIndex) {\r\n            this._table[tableIndex] = tableIndex * tableIndex;\r\n        }\r\n        this._pixels = [];\r\n    }\r\n    _setQuality(significantBitsPerChannel = 5) {\r\n        this._significantBitsPerChannel = significantBitsPerChannel;\r\n        this._maxSideIndex = 1 << this._significantBitsPerChannel;\r\n        this._alphaMaxSideIndex = this._maxSideIndex;\r\n        this._sideSize = this._maxSideIndex + 1;\r\n        this._alphaSideSize = this._alphaMaxSideIndex + 1;\r\n    }\r\n}\r\nWuQuant._alpha = 3;\r\nWuQuant._red = 2;\r\nWuQuant._green = 1;\r\nWuQuant._blue = 0;\r\n//# sourceMappingURL=wuQuant.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/quality/index.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/quality/index.js ***!\n  \\********************************************************/\n/*! exports provided: ssim */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ssim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssim */ \"./node_modules/image-q/dist/esm/quality/ssim.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ssim\", function() { return _ssim__WEBPACK_IMPORTED_MODULE_0__[\"ssim\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/quality/ssim.js\":\n/*!*******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/quality/ssim.js ***!\n  \\*******************************************************/\n/*! exports provided: ssim */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ssim\", function() { return ssim; });\n/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n\r\n// based on https://github.com/rhys-e/structural-similarity\r\n// http://en.wikipedia.org/wiki/Structural_similarity\r\nconst K1 = 0.01; // tslint:disable-line:naming-convention\r\nconst K2 = 0.03; // tslint:disable-line:naming-convention\r\nfunction ssim(image1, image2) {\r\n    if (image1.getHeight() !== image2.getHeight() || image1.getWidth() !== image2.getWidth()) {\r\n        throw new Error('Images have different sizes!');\r\n    }\r\n    const bitsPerComponent = 8;\r\n    const L = (1 << bitsPerComponent) - 1; // tslint:disable-line:naming-convention\r\n    const c1 = Math.pow((K1 * L), 2);\r\n    const c2 = Math.pow((K2 * L), 2);\r\n    let numWindows = 0;\r\n    let mssim = 0.0;\r\n    // calculate ssim for each window\r\n    iterate(image1, image2, (lumaValues1, lumaValues2, averageLumaValue1, averageLumaValue2) => {\r\n        // calculate variance and covariance\r\n        let sigxy = 0.0;\r\n        let sigsqx = 0.0;\r\n        let sigsqy = 0.0;\r\n        for (let i = 0; i < lumaValues1.length; i++) {\r\n            sigsqx += Math.pow((lumaValues1[i] - averageLumaValue1), 2);\r\n            sigsqy += Math.pow((lumaValues2[i] - averageLumaValue2), 2);\r\n            sigxy += (lumaValues1[i] - averageLumaValue1) * (lumaValues2[i] - averageLumaValue2);\r\n        }\r\n        const numPixelsInWin = lumaValues1.length - 1;\r\n        sigsqx /= numPixelsInWin;\r\n        sigsqy /= numPixelsInWin;\r\n        sigxy /= numPixelsInWin;\r\n        // perform ssim calculation on window\r\n        const numerator = (2 * averageLumaValue1 * averageLumaValue2 + c1) * (2 * sigxy + c2);\r\n        const denominator = (Math.pow(averageLumaValue1, 2) + Math.pow(averageLumaValue2, 2) + c1) * (sigsqx + sigsqy + c2);\r\n        const ssim = numerator / denominator;\r\n        mssim += ssim;\r\n        numWindows++;\r\n    });\r\n    return mssim / numWindows;\r\n}\r\nfunction iterate(image1, image2, callback) {\r\n    const windowSize = 8;\r\n    const width = image1.getWidth();\r\n    const height = image1.getHeight();\r\n    for (let y = 0; y < height; y += windowSize) {\r\n        for (let x = 0; x < width; x += windowSize) {\r\n            // avoid out-of-width/height\r\n            const windowWidth = Math.min(windowSize, width - x);\r\n            const windowHeight = Math.min(windowSize, height - y);\r\n            const lumaValues1 = calculateLumaValuesForWindow(image1, x, y, windowWidth, windowHeight);\r\n            const lumaValues2 = calculateLumaValuesForWindow(image2, x, y, windowWidth, windowHeight);\r\n            const averageLuma1 = calculateAverageLuma(lumaValues1);\r\n            const averageLuma2 = calculateAverageLuma(lumaValues2);\r\n            callback(lumaValues1, lumaValues2, averageLuma1, averageLuma2);\r\n        }\r\n    }\r\n}\r\nfunction calculateLumaValuesForWindow(image, x, y, width, height) {\r\n    const pointArray = image.getPointArray();\r\n    const lumaValues = [];\r\n    let counter = 0;\r\n    for (let j = y; j < y + height; j++) {\r\n        const offset = j * image.getWidth();\r\n        for (let i = x; i < x + width; i++) {\r\n            const point = pointArray[offset + i];\r\n            lumaValues[counter] = point.r * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].RED + point.g * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].GREEN + point.b * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].BLUE;\r\n            counter++;\r\n        }\r\n    }\r\n    return lumaValues;\r\n}\r\nfunction calculateAverageLuma(lumaValues) {\r\n    let sumLuma = 0.0;\r\n    for (const luma of lumaValues) {\r\n        sumLuma += luma;\r\n    }\r\n    return sumLuma / lumaValues.length;\r\n}\r\n//# sourceMappingURL=ssim.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/arithmetic.js ***!\n  \\***********************************************************/\n/*! exports provided: degrees2radians, max3, min3, intInRange, inRange0to255Rounded, inRange0to255, stableSort */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"degrees2radians\", function() { return degrees2radians; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max3\", function() { return max3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min3\", function() { return min3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intInRange\", function() { return intInRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inRange0to255Rounded\", function() { return inRange0to255Rounded; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inRange0to255\", function() { return inRange0to255; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stableSort\", function() { return stableSort; });\nfunction degrees2radians(n) {\r\n    return n * (Math.PI / 180);\r\n}\r\nfunction max3(a, b, c) {\r\n    let m = a;\r\n    if (m < b)\r\n        m = b;\r\n    if (m < c)\r\n        m = c;\r\n    return m;\r\n}\r\nfunction min3(a, b, c) {\r\n    let m = a;\r\n    if (m > b)\r\n        m = b;\r\n    if (m > c)\r\n        m = c;\r\n    return m;\r\n}\r\nfunction intInRange(value, low, high) {\r\n    if (value > high)\r\n        value = high;\r\n    if (value < low)\r\n        value = low;\r\n    return value | 0;\r\n}\r\nfunction inRange0to255Rounded(n) {\r\n    n = Math.round(n);\r\n    if (n > 255)\r\n        n = 255;\r\n    else if (n < 0)\r\n        n = 0;\r\n    return n;\r\n}\r\nfunction inRange0to255(n) {\r\n    if (n > 255)\r\n        n = 255;\r\n    else if (n < 0)\r\n        n = 0;\r\n    return n;\r\n}\r\nfunction stableSort(arrayToSort, callback) {\r\n    const type = typeof arrayToSort[0];\r\n    let sorted;\r\n    if (type === 'number' || type === 'string') {\r\n        const ord = Object.create(null); // tslint:disable-line:no-null-keyword\r\n        for (let i = 0, l = arrayToSort.length; i < l; i++) {\r\n            const val = arrayToSort[i]; // tslint:disable-line:no-any\r\n            if (ord[val] || ord[val] === 0)\r\n                continue;\r\n            ord[val] = i;\r\n        }\r\n        sorted = arrayToSort.sort(function (a, b) {\r\n            return callback(a, b) || ord[a] - ord[b];\r\n        });\r\n    }\r\n    else {\r\n        const ord2 = arrayToSort.slice(0);\r\n        sorted = arrayToSort.sort(function (a, b) {\r\n            return callback(a, b) || ord2.indexOf(a) - ord2.indexOf(b);\r\n        });\r\n    }\r\n    return sorted;\r\n}\r\n//# sourceMappingURL=arithmetic.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/hueStatistics.js\":\n/*!**************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/hueStatistics.js ***!\n  \\**************************************************************/\n/*! exports provided: HueStatistics */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HueStatistics\", function() { return HueStatistics; });\n/* harmony import */ var _conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../conversion/rgb2hsl */ \"./node_modules/image-q/dist/esm/conversion/rgb2hsl.js\");\n/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * hueStatistics.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\nclass HueGroup {\r\n    constructor() {\r\n        this.num = 0;\r\n        this.cols = [];\r\n    }\r\n}\r\nclass HueStatistics {\r\n    constructor(numGroups, minCols) {\r\n        this._numGroups = numGroups;\r\n        this._minCols = minCols;\r\n        this._stats = [];\r\n        for (let i = 0; i <= numGroups; i++) {\r\n            this._stats[i] = new HueGroup();\r\n        }\r\n        this._groupsFull = 0;\r\n    }\r\n    check(i32) {\r\n        if (this._groupsFull === this._numGroups + 1) {\r\n            this.check = function () {\r\n            };\r\n        }\r\n        const r = (i32 & 0xff);\r\n        const g = (i32 >>> 8) & 0xff;\r\n        const b = (i32 >>> 16) & 0xff;\r\n        const hg = (r === g && g === b) ? 0 : 1 + Object(_palette__WEBPACK_IMPORTED_MODULE_1__[\"hueGroup\"])(Object(_conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_0__[\"rgb2hsl\"])(r, g, b).h, this._numGroups);\r\n        const gr = this._stats[hg];\r\n        const min = this._minCols;\r\n        gr.num++;\r\n        if (gr.num > min) {\r\n            return;\r\n        }\r\n        if (gr.num === min) {\r\n            this._groupsFull++;\r\n        }\r\n        if (gr.num <= min) {\r\n            this._stats[hg].cols.push(i32);\r\n        }\r\n    }\r\n    injectIntoDictionary(histG) {\r\n        for (let i = 0; i <= this._numGroups; i++) {\r\n            if (this._stats[i].num <= this._minCols) {\r\n                this._stats[i].cols.forEach((col) => {\r\n                    if (!histG[col]) {\r\n                        histG[col] = 1;\r\n                    }\r\n                    else {\r\n                        histG[col]++;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    injectIntoArray(histG) {\r\n        for (let i = 0; i <= this._numGroups; i++) {\r\n            if (this._stats[i].num <= this._minCols) {\r\n                this._stats[i].cols.forEach((col) => {\r\n                    if (histG.indexOf(col) === -1) {\r\n                        histG.push(col);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=hueStatistics.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/index.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/index.js ***!\n  \\******************************************************/\n/*! exports provided: Point, PointContainer, Palette, HueStatistics, ProgressTracker, arithmetic */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _arithmetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"arithmetic\", function() { return _arithmetic__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _hueStatistics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hueStatistics */ \"./node_modules/image-q/dist/esm/utils/hueStatistics.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"HueStatistics\", function() { return _hueStatistics__WEBPACK_IMPORTED_MODULE_1__[\"HueStatistics\"]; });\n\n/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Palette\", function() { return _palette__WEBPACK_IMPORTED_MODULE_2__[\"Palette\"]; });\n\n/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return _point__WEBPACK_IMPORTED_MODULE_3__[\"Point\"]; });\n\n/* harmony import */ var _pointContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pointContainer */ \"./node_modules/image-q/dist/esm/utils/pointContainer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PointContainer\", function() { return _pointContainer__WEBPACK_IMPORTED_MODULE_4__[\"PointContainer\"]; });\n\n/* harmony import */ var _progressTracker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./progressTracker */ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ProgressTracker\", function() { return _progressTracker__WEBPACK_IMPORTED_MODULE_5__[\"ProgressTracker\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/palette.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/palette.js ***!\n  \\********************************************************/\n/*! exports provided: hueGroup, Palette */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hueGroup\", function() { return hueGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Palette\", function() { return Palette; });\n/* harmony import */ var _pointContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointContainer */ \"./node_modules/image-q/dist/esm/utils/pointContainer.js\");\n/* harmony import */ var _conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conversion/rgb2hsl */ \"./node_modules/image-q/dist/esm/conversion/rgb2hsl.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * palette.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n// TODO: make paletteArray via pointContainer, so, export will be available via pointContainer.exportXXX\r\nconst hueGroups = 10;\r\nfunction hueGroup(hue, segmentsNumber) {\r\n    const maxHue = 360;\r\n    const seg = maxHue / segmentsNumber;\r\n    const half = seg / 2;\r\n    for (let i = 1, mid = seg - half; i < segmentsNumber; i++, mid += seg) {\r\n        if (hue >= mid && hue < mid + seg)\r\n            return i;\r\n    }\r\n    return 0;\r\n}\r\nclass Palette {\r\n    constructor() {\r\n        this._pointArray = [];\r\n        this._i32idx = {};\r\n        this._pointContainer = new _pointContainer__WEBPACK_IMPORTED_MODULE_0__[\"PointContainer\"]();\r\n        this._pointContainer.setHeight(1);\r\n        this._pointArray = this._pointContainer.getPointArray();\r\n    }\r\n    add(color) {\r\n        this._pointArray.push(color);\r\n        this._pointContainer.setWidth(this._pointArray.length);\r\n    }\r\n    has(color) {\r\n        for (let i = this._pointArray.length - 1; i >= 0; i--) {\r\n            if (color.uint32 === this._pointArray[i].uint32)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    // TOTRY: use HUSL - http://boronine.com/husl/ http://www.husl-colors.org/ https://github.com/husl-colors/husl\r\n    getNearestColor(colorDistanceCalculator, color) {\r\n        return this._pointArray[this._getNearestIndex(colorDistanceCalculator, color) | 0];\r\n    }\r\n    getPointContainer() {\r\n        return this._pointContainer;\r\n    }\r\n    // TOTRY: use HUSL - http://boronine.com/husl/\r\n    /*\r\n     public nearestIndexByUint32(i32) {\r\n     var idx : number = this._nearestPointFromCache(\"\" + i32);\r\n     if (idx >= 0) return idx;\r\n  \r\n     var min = 1000,\r\n     rgb = [\r\n     (i32 & 0xff),\r\n     (i32 >>> 8) & 0xff,\r\n     (i32 >>> 16) & 0xff,\r\n     (i32 >>> 24) & 0xff\r\n     ],\r\n     len = this._pointArray.length;\r\n  \r\n     idx = 0;\r\n     for (var i = 0; i < len; i++) {\r\n     var dist = Utils.distEuclidean(rgb, this._pointArray[i].rgba);\r\n  \r\n     if (dist < min) {\r\n     min = dist;\r\n     idx = i;\r\n     }\r\n     }\r\n  \r\n     this._i32idx[i32] = idx;\r\n     return idx;\r\n     }\r\n     */\r\n    _nearestPointFromCache(key) {\r\n        return typeof this._i32idx[key] === 'number' ? this._i32idx[key] : -1;\r\n    }\r\n    _getNearestIndex(colorDistanceCalculator, point) {\r\n        let idx = this._nearestPointFromCache('' + point.uint32);\r\n        if (idx >= 0)\r\n            return idx;\r\n        let minimalDistance = Number.MAX_VALUE;\r\n        idx = 0;\r\n        for (let i = 0, l = this._pointArray.length; i < l; i++) {\r\n            const p = this._pointArray[i];\r\n            const distance = colorDistanceCalculator.calculateRaw(point.r, point.g, point.b, point.a, p.r, p.g, p.b, p.a);\r\n            if (distance < minimalDistance) {\r\n                minimalDistance = distance;\r\n                idx = i;\r\n            }\r\n        }\r\n        this._i32idx[point.uint32] = idx;\r\n        return idx;\r\n    }\r\n    /*\r\n     public reduce(histogram : ColorHistogram, colors : number) {\r\n     if (this._pointArray.length > colors) {\r\n     var idxi32 = histogram.getImportanceSortedColorsIDXI32();\r\n  \r\n     // quantize histogram to existing palette\r\n     var keep = [], uniqueColors = 0, idx, pruned = false;\r\n  \r\n     for (var i = 0, len = idxi32.length; i < len; i++) {\r\n     // palette length reached, unset all remaining colors (sparse palette)\r\n     if (uniqueColors >= colors) {\r\n     this.prunePal(keep);\r\n     pruned = true;\r\n     break;\r\n     } else {\r\n     idx = this.nearestIndexByUint32(idxi32[i]);\r\n     if (keep.indexOf(idx) < 0) {\r\n     keep.push(idx);\r\n     uniqueColors++;\r\n     }\r\n     }\r\n     }\r\n  \r\n     if (!pruned) {\r\n     this.prunePal(keep);\r\n     }\r\n     }\r\n     }\r\n  \r\n     // TODO: check usage, not tested!\r\n     public prunePal(keep : number[]) {\r\n     var colors = this._pointArray.length;\r\n     for (var colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {\r\n     if (keep.indexOf(colorIndex) < 0) {\r\n  \r\n     if(colorIndex + 1 < colors) {\r\n     this._pointArray[ colorIndex ] = this._pointArray [ colors - 1 ];\r\n     }\r\n     --colors;\r\n     //this._pointArray[colorIndex] = null;\r\n     }\r\n     }\r\n     console.log(\"colors pruned: \" + (this._pointArray.length - colors));\r\n     this._pointArray.length = colors;\r\n     this._i32idx = {};\r\n     }\r\n     */\r\n    // TODO: group very low lum and very high lum colors\r\n    // TODO: pass custom sort order\r\n    // TODO: sort criteria function should be placed to HueStats class\r\n    sort() {\r\n        this._i32idx = {};\r\n        this._pointArray.sort((a, b) => {\r\n            const hslA = Object(_conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_1__[\"rgb2hsl\"])(a.r, a.g, a.b);\r\n            const hslB = Object(_conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_1__[\"rgb2hsl\"])(b.r, b.g, b.b);\r\n            // sort all grays + whites together\r\n            const hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + hueGroup(hslA.h, hueGroups);\r\n            const hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + hueGroup(hslB.h, hueGroups);\r\n            /*\r\n             var hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + Utils.hueGroup(hslA.h, hueGroups);\r\n             var hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + Utils.hueGroup(hslB.h, hueGroups);\r\n             */\r\n            const hueDiff = hueB - hueA;\r\n            if (hueDiff)\r\n                return -hueDiff;\r\n            /*\r\n             var lumDiff = Utils.lumGroup(+hslB.l.toFixed(2)) - Utils.lumGroup(+hslA.l.toFixed(2));\r\n             if (lumDiff) return -lumDiff;\r\n             */\r\n            const lA = a.getLuminosity(true);\r\n            const lB = b.getLuminosity(true);\r\n            if (lB - lA !== 0)\r\n                return lB - lA;\r\n            const satDiff = ((hslB.s * 100) | 0) - ((hslA.s * 100) | 0);\r\n            if (satDiff)\r\n                return -satDiff;\r\n            return 0;\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=palette.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/point.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/point.js ***!\n  \\******************************************************/\n/*! exports provided: Point */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return Point; });\n/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * point.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * v8 optimized class\r\n * 1) \"constructor\" should have initialization with worst types\r\n * 2) \"set\" should have |0 / >>> 0\r\n */\r\nclass Point {\r\n    // Lab : { L : number; a : number; b : number };\r\n    static createByQuadruplet(quadruplet) {\r\n        const point = new Point();\r\n        point.r = quadruplet[0] | 0;\r\n        point.g = quadruplet[1] | 0;\r\n        point.b = quadruplet[2] | 0;\r\n        point.a = quadruplet[3] | 0;\r\n        point._loadUINT32();\r\n        point._loadQuadruplet();\r\n        // point._loadLab();\r\n        return point;\r\n    }\r\n    static createByRGBA(red, green, blue, alpha) {\r\n        const point = new Point();\r\n        point.r = red | 0;\r\n        point.g = green | 0;\r\n        point.b = blue | 0;\r\n        point.a = alpha | 0;\r\n        point._loadUINT32();\r\n        point._loadQuadruplet();\r\n        // point._loadLab();\r\n        return point;\r\n    }\r\n    static createByUint32(uint32) {\r\n        const point = new Point();\r\n        point.uint32 = uint32 >>> 0;\r\n        point._loadRGBA();\r\n        point._loadQuadruplet();\r\n        // point._loadLab();\r\n        return point;\r\n    }\r\n    constructor() {\r\n        this.uint32 = -1 >>> 0;\r\n        this.r = this.g = this.b = this.a = 0;\r\n        this.rgba = new Array(4);\r\n        this.rgba[0] = 0;\r\n        this.rgba[1] = 0;\r\n        this.rgba[2] = 0;\r\n        this.rgba[3] = 0;\r\n        /*\r\n         this.Lab = {\r\n         L : 0.0,\r\n         a : 0.0,\r\n         b : 0.0\r\n         };\r\n         */\r\n    }\r\n    from(point) {\r\n        this.r = point.r;\r\n        this.g = point.g;\r\n        this.b = point.b;\r\n        this.a = point.a;\r\n        this.uint32 = point.uint32;\r\n        this.rgba[0] = point.r;\r\n        this.rgba[1] = point.g;\r\n        this.rgba[2] = point.b;\r\n        this.rgba[3] = point.a;\r\n        /*\r\n         this.Lab.L = point.Lab.L;\r\n         this.Lab.a = point.Lab.a;\r\n         this.Lab.b = point.Lab.b;\r\n         */\r\n    }\r\n    /*\r\n     * TODO:\r\n     Luminance from RGB:\r\n  \r\n     Luminance (standard for certain colour spaces): (0.2126*R + 0.7152*G + 0.0722*B) [1]\r\n     Luminance (perceived option 1): (0.299*R + 0.587*G + 0.114*B) [2]\r\n     Luminance (perceived option 2, slower to calculate):  sqrt( 0.241*R^2 + 0.691*G^2 + 0.068*B^2 ) ? sqrt( 0.299*R^2 + 0.587*G^2 + 0.114*B^2 ) (thanks to @MatthewHerbst) [http://alienryderflex.com/hsp.html]\r\n     */\r\n    getLuminosity(useAlphaChannel) {\r\n        let r = this.r;\r\n        let g = this.g;\r\n        let b = this.b;\r\n        if (useAlphaChannel) {\r\n            r = Math.min(255, 255 - this.a + this.a * r / 255);\r\n            g = Math.min(255, 255 - this.a + this.a * g / 255);\r\n            b = Math.min(255, 255 - this.a + this.a * b / 255);\r\n        }\r\n        // var luma = this.r * Point._RED_COEFFICIENT + this.g * Point._GREEN_COEFFICIENT + this.b * Point._BLUE_COEFFICIENT;\r\n        /*\r\n         if(useAlphaChannel) {\r\n         luma = (luma * (255 - this.a)) / 255;\r\n         }\r\n         */\r\n        return r * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].RED + g * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].GREEN + b * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].BLUE;\r\n    }\r\n    _loadUINT32() {\r\n        this.uint32 = (this.a << 24 | this.b << 16 | this.g << 8 | this.r) >>> 0;\r\n    }\r\n    _loadRGBA() {\r\n        this.r = this.uint32 & 0xff;\r\n        this.g = (this.uint32 >>> 8) & 0xff;\r\n        this.b = (this.uint32 >>> 16) & 0xff;\r\n        this.a = (this.uint32 >>> 24) & 0xff;\r\n    }\r\n    _loadQuadruplet() {\r\n        this.rgba[0] = this.r;\r\n        this.rgba[1] = this.g;\r\n        this.rgba[2] = this.b;\r\n        this.rgba[3] = this.a;\r\n        /*\r\n         var xyz = rgb2xyz(this.r, this.g, this.b);\r\n         var lab = xyz2lab(xyz.x, xyz.y, xyz.z);\r\n         this.lab.l = lab.l;\r\n         this.lab.a = lab.a;\r\n         this.lab.b = lab.b;\r\n         */\r\n    }\r\n}\r\n//# sourceMappingURL=point.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/pointContainer.js\":\n/*!***************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/pointContainer.js ***!\n  \\***************************************************************/\n/*! exports provided: PointContainer */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointContainer\", function() { return PointContainer; });\n/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * pointContainer.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * v8 optimizations done.\r\n * fromXXX methods are static to move out polymorphic code from class instance itself.\r\n */\r\nclass PointContainer {\r\n    constructor() {\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this._pointArray = [];\r\n    }\r\n    getWidth() {\r\n        return this._width;\r\n    }\r\n    getHeight() {\r\n        return this._height;\r\n    }\r\n    setWidth(width) {\r\n        this._width = width;\r\n    }\r\n    setHeight(height) {\r\n        this._height = height;\r\n    }\r\n    getPointArray() {\r\n        return this._pointArray;\r\n    }\r\n    clone() {\r\n        const clone = new PointContainer();\r\n        clone._width = this._width;\r\n        clone._height = this._height;\r\n        for (let i = 0, l = this._pointArray.length; i < l; i++) {\r\n            clone._pointArray[i] = _point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"].createByUint32(this._pointArray[i].uint32 | 0); // \"| 0\" is added for v8 optimization\r\n        }\r\n        return clone;\r\n    }\r\n    toUint32Array() {\r\n        const l = this._pointArray.length;\r\n        const uint32Array = new Uint32Array(l);\r\n        for (let i = 0; i < l; i++) {\r\n            uint32Array[i] = this._pointArray[i].uint32;\r\n        }\r\n        return uint32Array;\r\n    }\r\n    toUint8Array() {\r\n        return new Uint8Array(this.toUint32Array().buffer);\r\n    }\r\n    static fromHTMLImageElement(img) {\r\n        const width = img.naturalWidth;\r\n        const height = img.naturalHeight;\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        const ctx = canvas.getContext('2d'); // tslint:disable-line:no-non-null-assertion\r\n        ctx.drawImage(img, 0, 0, width, height, 0, 0, width, height);\r\n        return PointContainer.fromHTMLCanvasElement(canvas);\r\n    }\r\n    static fromHTMLCanvasElement(canvas) {\r\n        const width = canvas.width;\r\n        const height = canvas.height;\r\n        const ctx = canvas.getContext('2d'); // tslint:disable-line:no-non-null-assertion\r\n        const imgData = ctx.getImageData(0, 0, width, height);\r\n        return PointContainer.fromImageData(imgData);\r\n    }\r\n    static fromImageData(imageData) {\r\n        const width = imageData.width;\r\n        const height = imageData.height;\r\n        return PointContainer.fromUint8Array(imageData.data, width, height);\r\n    }\r\n    static fromUint8Array(uint8Array, width, height) {\r\n        switch (Object.prototype.toString.call(uint8Array)) {\r\n            case '[object Uint8ClampedArray]':\r\n            case '[object Uint8Array]':\r\n                break;\r\n            default:\r\n                uint8Array = new Uint8Array(uint8Array);\r\n        }\r\n        const uint32Array = new Uint32Array(uint8Array.buffer);\r\n        return PointContainer.fromUint32Array(uint32Array, width, height);\r\n    }\r\n    static fromUint32Array(uint32Array, width, height) {\r\n        const container = new PointContainer();\r\n        container._width = width;\r\n        container._height = height;\r\n        for (let i = 0, l = uint32Array.length; i < l; i++) {\r\n            container._pointArray[i] = _point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"].createByUint32(uint32Array[i] | 0); // \"| 0\" is added for v8 optimization\r\n        }\r\n        return container;\r\n    }\r\n    static fromBuffer(buffer, width, height) {\r\n        const uint32Array = new Uint32Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint32Array.BYTES_PER_ELEMENT);\r\n        return PointContainer.fromUint32Array(uint32Array, width, height);\r\n    }\r\n}\r\n//# sourceMappingURL=pointContainer.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\":\n/*!****************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/progressTracker.js ***!\n  \\****************************************************************/\n/*! exports provided: ProgressTracker */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ProgressTracker\", function() { return ProgressTracker; });\nclass ProgressTracker {\r\n    constructor(valueRange, progressRange) {\r\n        this._range = valueRange;\r\n        this._progressRange = progressRange;\r\n        this._step = Math.max(1, this._range / (ProgressTracker.steps + 1) | 0);\r\n        this._last = -this._step;\r\n        this.progress = 0;\r\n    }\r\n    shouldNotify(current) {\r\n        if (current - this._last >= this._step) {\r\n            this._last = current;\r\n            this.progress = Math.min(this._progressRange * this._last / this._range, this._progressRange);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nProgressTracker.steps = 100;\r\n//# sourceMappingURL=progressTracker.js.map\n\n/***/ }),\n\n/***/ \"./src/Animated_GIF.worker.js\":\n/*!************************************!*\\\n  !*** ./src/Animated_GIF.worker.js ***!\n  \\************************************/\n/*! no exports provided */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var image_q__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! image-q */ \"./node_modules/image-q/dist/esm/image-q.js\");\n\n\n/**\n * Searches for an unused colour in the image data so it can be used as a unique colour\n * for transparent pixels. Builds up a set of all known colours then searches from\n * 0x000000 to 0xFFFFFF for a colour not in the set. They're is probably a much more effecient\n * way of doing this. There is also a possibilty all colours are used, but that's probably\n * just a test image.\n * @param {*} data\n * @param {*} width\n * @param {*} height\n */\nfunction searchForUnusedColour(data, width, height) {\n  let i = 0\n  const length = width * height * 4\n  const knownColours = new Set()\n\n  while (i < length) {\n    const r = data[i++]\n    const g = data[i++]\n    const b = data[i++]\n    i++ // don't track the transparency here just the rgb values\n    const pixelColour = (r << 16) | (g << 8) | b\n    knownColours.add(pixelColour)\n  }\n\n  let unusedColour = 0x00\n  while (unusedColour < 0xffffff) {\n    if (!knownColours.has(unusedColour)) break\n    unusedColour++\n  }\n\n  return unusedColour\n}\n\nfunction dataToRGBANormalized(\n  data,\n  width,\n  height,\n  unusedColour,\n  transparencyCutOff = 0.7\n) {\n  let i = 0\n  const length = width * height * 4\n  const rgba = []\n  const transparencyCutOffValue = Math.trunc(255 * transparencyCutOff)\n  let hasTransparency = false\n\n  const unusedColourR = (unusedColour & 0xff0000) >> 16\n  const unusedColourG = (unusedColour & 0x00ff00) >> 8\n  const unusedColourB = unusedColour & 0x0000ff\n\n  while (i < length) {\n    const r = data[i++]\n    const g = data[i++]\n    const b = data[i++]\n    let a = data[i++]\n    a = a >= transparencyCutOffValue ? 0xff : 0x00\n\n    if (unusedColour !== undefined && a === 0) {\n      rgba.push(unusedColourR)\n      rgba.push(unusedColourG)\n      rgba.push(unusedColourB)\n      rgba.push(0x00)\n      hasTransparency = true\n    } else {\n      rgba.push(r)\n      rgba.push(g)\n      rgba.push(b)\n      rgba.push(0xff)\n    }\n  }\n\n  return { rgba, hasTransparency }\n}\n\n/**\n * Takes an array of points from image-q and converts them to an array of sorted rgb values\n * @param {Array[Points]} points\n * returns {Array}\n */\nfunction pointsToRgb(points) {\n  return points.map(point => (point.r << 16) | (point.g << 8) | point.b)\n}\n\n/**\n * @param {Uint32Array} pixels\n * @param {Uint32Array} palette\n * @returns {Uint8Array}\n */\nfunction indexPixelsWithPalette(pixels, palette) {\n  return Uint8Array.from(pixels.map(pixel => palette.indexOf(pixel)))\n}\n\nfunction processFrameWithQuantizer(\n  imageData,\n  width,\n  height,\n  transparencyCutOff,\n  dithering\n) {\n  const unusedColour = searchForUnusedColour(imageData, width, height)\n  const { rgba, hasTransparency } = dataToRGBANormalized(\n    imageData,\n    width,\n    height,\n    unusedColour,\n    transparencyCutOff\n  )\n\n  const pointContainer = image_q__WEBPACK_IMPORTED_MODULE_0__[\"utils\"].PointContainer.fromUint8Array(\n    new Uint8Array(rgba),\n    width,\n    height\n  )\n  const palette = Object(image_q__WEBPACK_IMPORTED_MODULE_0__[\"buildPaletteSync\"])([pointContainer], {\n    paletteQuantization: 'rgbquant',\n    colors: hasTransparency && unusedColour ? 255 : 256, // leave one for transparency\n  })\n  if (hasTransparency && unusedColour) {\n    palette.add(image_q__WEBPACK_IMPORTED_MODULE_0__[\"utils\"].Point.createByUint32(unusedColour))\n  }\n  const outPointContainer = Object(image_q__WEBPACK_IMPORTED_MODULE_0__[\"applyPaletteSync\"])(pointContainer, palette, {\n    imageQuantization: dithering,\n  })\n  const paletteRgbArray = pointsToRgb(\n    palette.getPointContainer().getPointArray()\n  )\n  paletteRgbArray.sort((a, b) => a - b)\n  const transparencyIndex = paletteRgbArray.indexOf(unusedColour)\n\n  const indexedPixels = indexPixelsWithPalette(\n    pointsToRgb(outPointContainer.getPointArray()),\n    paletteRgbArray\n  )\n\n  return {\n    pixels: indexedPixels,\n    palette: Array.from(paletteRgbArray),\n    transparencyIndex: transparencyIndex > -1 ? transparencyIndex : undefined,\n  }\n}\n\n// ~~~\n\nfunction run(frame) {\n  const { width, height, data, dithering, transparencyCutOff } = frame\n\n  return processFrameWithQuantizer(\n    data,\n    width,\n    height,\n    transparencyCutOff,\n    dithering\n  )\n}\n\nself.onmessage = function(ev) {\n  var data = ev.data\n  var response = run(data)\n  postMessage(response)\n}\n\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,", null);
};

/***/ }),

/***/ 0:
/*!*************************************************************************************!*\
  !*** multi (webpack)-dev-server/client?http://localhost:9000 ./src/Animated_GIF.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /mnt/c/Users/Adrian/Projects/Animated_GIF/node_modules/webpack-dev-server/client/index.js?http://localhost:9000 */"./node_modules/webpack-dev-server/client/index.js?http://localhost:9000");
module.exports = __webpack_require__(/*! /mnt/c/Users/Adrian/Projects/Animated_GIF/src/Animated_GIF.js */"./src/Animated_GIF.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
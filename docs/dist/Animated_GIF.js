(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Animated_GIF"] = factory();
	else
		root["Animated_GIF"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Animated_GIF.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/omggif/omggif.js":
/*!***************************************!*\
  !*** ./node_modules/omggif/omggif.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// (c) Dean McNamee <dean@gmail.com>, 2013.
//
// https://github.com/deanm/omggif
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
// including animation and compression.  It does not rely on any specific
// underlying system, so should run in the browser, Node, or Plask.



function GifWriter(buf, width, height, gopts) {
  var p = 0;

  var gopts = gopts === undefined ? { } : gopts;
  var loop_count = gopts.loop === undefined ? null : gopts.loop;
  var global_palette = gopts.palette === undefined ? null : gopts.palette;

  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)
    throw new Error("Width/Height invalid.");

  function check_palette_and_num_colors(palette) {
    var num_colors = palette.length;
    if (num_colors < 2 || num_colors > 256 ||  num_colors & (num_colors-1)) {
      throw new Error(
          "Invalid code/color length, must be power of 2 and 2 .. 256.");
    }
    return num_colors;
  }

  // - Header.
  buf[p++] = 0x47; buf[p++] = 0x49; buf[p++] = 0x46;  // GIF
  buf[p++] = 0x38; buf[p++] = 0x39; buf[p++] = 0x61;  // 89a

  // Handling of Global Color Table (palette) and background index.
  var gp_num_colors_pow2 = 0;
  var background = 0;
  if (global_palette !== null) {
    var gp_num_colors = check_palette_and_num_colors(global_palette);
    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;
    gp_num_colors = 1 << gp_num_colors_pow2;
    --gp_num_colors_pow2;
    if (gopts.background !== undefined) {
      background = gopts.background;
      if (background >= gp_num_colors)
        throw new Error("Background index out of range.");
      // The GIF spec states that a background index of 0 should be ignored, so
      // this is probably a mistake and you really want to set it to another
      // slot in the palette.  But actually in the end most browsers, etc end
      // up ignoring this almost completely (including for dispose background).
      if (background === 0)
        throw new Error("Background index explicitly passed as 0.");
    }
  }

  // - Logical Screen Descriptor.
  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.
  buf[p++] = width & 0xff; buf[p++] = width >> 8 & 0xff;
  buf[p++] = height & 0xff; buf[p++] = height >> 8 & 0xff;
  // NOTE: Indicates 0-bpp original color resolution (unused?).
  buf[p++] = (global_palette !== null ? 0x80 : 0) |  // Global Color Table Flag.
             gp_num_colors_pow2;  // NOTE: No sort flag (unused?).
  buf[p++] = background;  // Background Color Index.
  buf[p++] = 0;  // Pixel aspect ratio (unused?).

  // - Global Color Table
  if (global_palette !== null) {
    for (var i = 0, il = global_palette.length; i < il; ++i) {
      var rgb = global_palette[i];
      buf[p++] = rgb >> 16 & 0xff;
      buf[p++] = rgb >> 8 & 0xff;
      buf[p++] = rgb & 0xff;
    }
  }

  if (loop_count !== null) {  // Netscape block for looping.
    if (loop_count < 0 || loop_count > 65535)
      throw new Error("Loop count invalid.")
    // Extension code, label, and length.
    buf[p++] = 0x21; buf[p++] = 0xff; buf[p++] = 0x0b;
    // NETSCAPE2.0
    buf[p++] = 0x4e; buf[p++] = 0x45; buf[p++] = 0x54; buf[p++] = 0x53;
    buf[p++] = 0x43; buf[p++] = 0x41; buf[p++] = 0x50; buf[p++] = 0x45;
    buf[p++] = 0x32; buf[p++] = 0x2e; buf[p++] = 0x30;
    // Sub-block
    buf[p++] = 0x03; buf[p++] = 0x01;
    buf[p++] = loop_count & 0xff; buf[p++] = loop_count >> 8 & 0xff;
    buf[p++] = 0x00;  // Terminator.
  }


  var ended = false;

  this.addFrame = function(x, y, w, h, indexed_pixels, opts) {
    if (ended === true) { --p; ended = false; }  // Un-end.

    opts = opts === undefined ? { } : opts;

    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual
    // canvas width/height, I imagine?
    if (x < 0 || y < 0 || x > 65535 || y > 65535)
      throw new Error("x/y invalid.")

    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)
      throw new Error("Width/Height invalid.")

    if (indexed_pixels.length < w * h)
      throw new Error("Not enough pixels for the frame size.");

    var using_local_palette = true;
    var palette = opts.palette;
    if (palette === undefined || palette === null) {
      using_local_palette = false;
      palette = global_palette;
    }

    if (palette === undefined || palette === null)
      throw new Error("Must supply either a local or global palette.");

    var num_colors = check_palette_and_num_colors(palette);

    // Compute the min_code_size (power of 2), destroying num_colors.
    var min_code_size = 0;
    while (num_colors >>= 1) ++min_code_size;
    num_colors = 1 << min_code_size;  // Now we can easily get it back.

    var delay = opts.delay === undefined ? 0 : opts.delay;

    // From the spec:
    //     0 -   No disposal specified. The decoder is
    //           not required to take any action.
    //     1 -   Do not dispose. The graphic is to be left
    //           in place.
    //     2 -   Restore to background color. The area used by the
    //           graphic must be restored to the background color.
    //     3 -   Restore to previous. The decoder is required to
    //           restore the area overwritten by the graphic with
    //           what was there prior to rendering the graphic.
    //  4-7 -    To be defined.
    // NOTE(deanm): Dispose background doesn't really work, apparently most
    // browsers ignore the background palette index and clear to transparency.
    var disposal = opts.disposal === undefined ? 0 : opts.disposal;
    if (disposal < 0 || disposal > 3)  // 4-7 is reserved.
      throw new Error("Disposal out of range.");

    var use_transparency = false;
    var transparent_index = 0;
    if (opts.transparent !== undefined && opts.transparent !== null) {
      use_transparency = true;
      transparent_index = opts.transparent;
      if (transparent_index < 0 || transparent_index >= num_colors)
        throw new Error("Transparent color index.");
    }

    if (disposal !== 0 || use_transparency || delay !== 0) {
      // - Graphics Control Extension
      buf[p++] = 0x21; buf[p++] = 0xf9;  // Extension / Label.
      buf[p++] = 4;  // Byte size.

      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);
      buf[p++] = delay & 0xff; buf[p++] = delay >> 8 & 0xff;
      buf[p++] = transparent_index;  // Transparent color index.
      buf[p++] = 0;  // Block Terminator.
    }

    // - Image Descriptor
    buf[p++] = 0x2c;  // Image Seperator.
    buf[p++] = x & 0xff; buf[p++] = x >> 8 & 0xff;  // Left.
    buf[p++] = y & 0xff; buf[p++] = y >> 8 & 0xff;  // Top.
    buf[p++] = w & 0xff; buf[p++] = w >> 8 & 0xff;
    buf[p++] = h & 0xff; buf[p++] = h >> 8 & 0xff;
    // NOTE: No sort flag (unused?).
    // TODO(deanm): Support interlace.
    buf[p++] = using_local_palette === true ? (0x80 | (min_code_size-1)) : 0;

    // - Local Color Table
    if (using_local_palette === true) {
      for (var i = 0, il = palette.length; i < il; ++i) {
        var rgb = palette[i];
        buf[p++] = rgb >> 16 & 0xff;
        buf[p++] = rgb >> 8 & 0xff;
        buf[p++] = rgb & 0xff;
      }
    }

    p = GifWriterOutputLZWCodeStream(
            buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);

    return p;
  };

  this.end = function() {
    if (ended === false) {
      buf[p++] = 0x3b;  // Trailer.
      ended = true;
    }
    return p;
  };

  this.getOutputBuffer = function() { return buf; };
  this.setOutputBuffer = function(v) { buf = v; };
  this.getOutputBufferPosition = function() { return p; };
  this.setOutputBufferPosition = function(v) { p = v; };
}

// Main compression routine, palette indexes -> LZW code stream.
// |index_stream| must have at least one entry.
function GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {
  buf[p++] = min_code_size;
  var cur_subblock = p++;  // Pointing at the length field.

  var clear_code = 1 << min_code_size;
  var code_mask = clear_code - 1;
  var eoi_code = clear_code + 1;
  var next_code = eoi_code + 1;

  var cur_code_size = min_code_size + 1;  // Number of bits per code.
  var cur_shift = 0;
  // We have at most 12-bit codes, so we should have to hold a max of 19
  // bits here (and then we would write out).
  var cur = 0;

  function emit_bytes_to_buffer(bit_block_size) {
    while (cur_shift >= bit_block_size) {
      buf[p++] = cur & 0xff;
      cur >>= 8; cur_shift -= 8;
      if (p === cur_subblock + 256) {  // Finished a subblock.
        buf[cur_subblock] = 255;
        cur_subblock = p++;
      }
    }
  }

  function emit_code(c) {
    cur |= c << cur_shift;
    cur_shift += cur_code_size;
    emit_bytes_to_buffer(8);
  }

  // I am not an expert on the topic, and I don't want to write a thesis.
  // However, it is good to outline here the basic algorithm and the few data
  // structures and optimizations here that make this implementation fast.
  // The basic idea behind LZW is to build a table of previously seen runs
  // addressed by a short id (herein called output code).  All data is
  // referenced by a code, which represents one or more values from the
  // original input stream.  All input bytes can be referenced as the same
  // value as an output code.  So if you didn't want any compression, you
  // could more or less just output the original bytes as codes (there are
  // some details to this, but it is the idea).  In order to achieve
  // compression, values greater then the input range (codes can be up to
  // 12-bit while input only 8-bit) represent a sequence of previously seen
  // inputs.  The decompressor is able to build the same mapping while
  // decoding, so there is always a shared common knowledge between the
  // encoding and decoder, which is also important for "timing" aspects like
  // how to handle variable bit width code encoding.
  //
  // One obvious but very important consequence of the table system is there
  // is always a unique id (at most 12-bits) to map the runs.  'A' might be
  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship
  // can be used for an effecient lookup strategy for the code mapping.  We
  // need to know if a run has been seen before, and be able to map that run
  // to the output code.  Since we start with known unique ids (input bytes),
  // and then from those build more unique ids (table entries), we can
  // continue this chain (almost like a linked list) to always have small
  // integer values that represent the current byte chains in the encoder.
  // This means instead of tracking the input bytes (AAAABCD) to know our
  // current state, we can track the table entry for AAAABC (it is guaranteed
  // to exist by the nature of the algorithm) and the next character D.
  // Therefor the tuple of (table_entry, byte) is guaranteed to also be
  // unique.  This allows us to create a simple lookup key for mapping input
  // sequences to codes (table indices) without having to store or search
  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the
  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our
  // key.  This leads to a integer value at most 20-bits, which can always
  // fit in an SMI value and be used as a fast sparse array / object key.

  // Output code for the current contents of the index buffer.
  var ib_code = index_stream[0] & code_mask;  // Load first input index.
  var code_table = { };  // Key'd on our 20-bit "tuple".

  emit_code(clear_code);  // Spec says first code should be a clear code.

  // First index already loaded, process the rest of the stream.
  for (var i = 1, il = index_stream.length; i < il; ++i) {
    var k = index_stream[i] & code_mask;
    var cur_key = ib_code << 8 | k;  // (prev, k) unique tuple.
    var cur_code = code_table[cur_key];  // buffer + k.

    // Check if we have to create a new code table entry.
    if (cur_code === undefined) {  // We don't have buffer + k.
      // Emit index buffer (without k).
      // This is an inline version of emit_code, because this is the core
      // writing routine of the compressor (and V8 cannot inline emit_code
      // because it is a closure here in a different context).  Additionally
      // we can call emit_byte_to_buffer less often, because we can have
      // 30-bits (from our 31-bit signed SMI), and we know our codes will only
      // be 12-bits, so can safely have 18-bits there without overflow.
      // emit_code(ib_code);
      cur |= ib_code << cur_shift;
      cur_shift += cur_code_size;
      while (cur_shift >= 8) {
        buf[p++] = cur & 0xff;
        cur >>= 8; cur_shift -= 8;
        if (p === cur_subblock + 256) {  // Finished a subblock.
          buf[cur_subblock] = 255;
          cur_subblock = p++;
        }
      }

      if (next_code === 4096) {  // Table full, need a clear.
        emit_code(clear_code);
        next_code = eoi_code + 1;
        cur_code_size = min_code_size + 1;
        code_table = { };
      } else {  // Table not full, insert a new entry.
        // Increase our variable bit code sizes if necessary.  This is a bit
        // tricky as it is based on "timing" between the encoding and
        // decoder.  From the encoders perspective this should happen after
        // we've already emitted the index buffer and are about to create the
        // first table entry that would overflow our current code bit size.
        if (next_code >= (1 << cur_code_size)) ++cur_code_size;
        code_table[cur_key] = next_code++;  // Insert into code table.
      }

      ib_code = k;  // Index buffer to single input k.
    } else {
      ib_code = cur_code;  // Index buffer to sequence in code table.
    }
  }

  emit_code(ib_code);  // There will still be something in the index buffer.
  emit_code(eoi_code);  // End Of Information.

  // Flush / finalize the sub-blocks stream to the buffer.
  emit_bytes_to_buffer(1);

  // Finish the sub-blocks, writing out any unfinished lengths and
  // terminating with a sub-block of length 0.  If we have already started
  // but not yet used a sub-block it can just become the terminator.
  if (cur_subblock + 1 === p) {  // Started but unused.
    buf[cur_subblock] = 0;
  } else {  // Started and used, write length and additional terminator block.
    buf[cur_subblock] = p - cur_subblock - 1;
    buf[p++] = 0;
  }
  return p;
}

function GifReader(buf) {
  var p = 0;

  // - Header (GIF87a or GIF89a).
  if (buf[p++] !== 0x47 ||            buf[p++] !== 0x49 || buf[p++] !== 0x46 ||
      buf[p++] !== 0x38 || (buf[p++]+1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {
    throw new Error("Invalid GIF 87a/89a header.");
  }

  // - Logical Screen Descriptor.
  var width = buf[p++] | buf[p++] << 8;
  var height = buf[p++] | buf[p++] << 8;
  var pf0 = buf[p++];  // <Packed Fields>.
  var global_palette_flag = pf0 >> 7;
  var num_global_colors_pow2 = pf0 & 0x7;
  var num_global_colors = 1 << (num_global_colors_pow2 + 1);
  var background = buf[p++];
  buf[p++];  // Pixel aspect ratio (unused?).

  var global_palette_offset = null;
  var global_palette_size   = null;

  if (global_palette_flag) {
    global_palette_offset = p;
    global_palette_size = num_global_colors;
    p += num_global_colors * 3;  // Seek past palette.
  }

  var no_eof = true;

  var frames = [ ];

  var delay = 0;
  var transparent_index = null;
  var disposal = 0;  // 0 - No disposal specified.
  var loop_count = null;

  this.width = width;
  this.height = height;

  while (no_eof && p < buf.length) {
    switch (buf[p++]) {
      case 0x21:  // Graphics Control Extension Block
        switch (buf[p++]) {
          case 0xff:  // Application specific block
            // Try if it's a Netscape block (with animation loop counter).
            if (buf[p   ] !== 0x0b ||  // 21 FF already read, check block size.
                // NETSCAPE2.0
                buf[p+1 ] == 0x4e && buf[p+2 ] == 0x45 && buf[p+3 ] == 0x54 &&
                buf[p+4 ] == 0x53 && buf[p+5 ] == 0x43 && buf[p+6 ] == 0x41 &&
                buf[p+7 ] == 0x50 && buf[p+8 ] == 0x45 && buf[p+9 ] == 0x32 &&
                buf[p+10] == 0x2e && buf[p+11] == 0x30 &&
                // Sub-block
                buf[p+12] == 0x03 && buf[p+13] == 0x01 && buf[p+16] == 0) {
              p += 14;
              loop_count = buf[p++] | buf[p++] << 8;
              p++;  // Skip terminator.
            } else {  // We don't know what it is, just try to get past it.
              p += 12;
              while (true) {  // Seek through subblocks.
                var block_size = buf[p++];
                // Bad block size (ex: undefined from an out of bounds read).
                if (!(block_size >= 0)) throw Error("Invalid block size");
                if (block_size === 0) break;  // 0 size is terminator
                p += block_size;
              }
            }
            break;

          case 0xf9:  // Graphics Control Extension
            if (buf[p++] !== 0x4 || buf[p+4] !== 0)
              throw new Error("Invalid graphics extension block.");
            var pf1 = buf[p++];
            delay = buf[p++] | buf[p++] << 8;
            transparent_index = buf[p++];
            if ((pf1 & 1) === 0) transparent_index = null;
            disposal = pf1 >> 2 & 0x7;
            p++;  // Skip terminator.
            break;

          case 0xfe:  // Comment Extension.
            while (true) {  // Seek through subblocks.
              var block_size = buf[p++];
              // Bad block size (ex: undefined from an out of bounds read).
              if (!(block_size >= 0)) throw Error("Invalid block size");
              if (block_size === 0) break;  // 0 size is terminator
              // console.log(buf.slice(p, p+block_size).toString('ascii'));
              p += block_size;
            }
            break;

          default:
            throw new Error(
                "Unknown graphic control label: 0x" + buf[p-1].toString(16));
        }
        break;

      case 0x2c:  // Image Descriptor.
        var x = buf[p++] | buf[p++] << 8;
        var y = buf[p++] | buf[p++] << 8;
        var w = buf[p++] | buf[p++] << 8;
        var h = buf[p++] | buf[p++] << 8;
        var pf2 = buf[p++];
        var local_palette_flag = pf2 >> 7;
        var interlace_flag = pf2 >> 6 & 1;
        var num_local_colors_pow2 = pf2 & 0x7;
        var num_local_colors = 1 << (num_local_colors_pow2 + 1);
        var palette_offset = global_palette_offset;
        var palette_size = global_palette_size;
        var has_local_palette = false;
        if (local_palette_flag) {
          var has_local_palette = true;
          palette_offset = p;  // Override with local palette.
          palette_size = num_local_colors;
          p += num_local_colors * 3;  // Seek past palette.
        }

        var data_offset = p;

        p++;  // codesize
        while (true) {
          var block_size = buf[p++];
          // Bad block size (ex: undefined from an out of bounds read).
          if (!(block_size >= 0)) throw Error("Invalid block size");
          if (block_size === 0) break;  // 0 size is terminator
          p += block_size;
        }

        frames.push({x: x, y: y, width: w, height: h,
                     has_local_palette: has_local_palette,
                     palette_offset: palette_offset,
                     palette_size: palette_size,
                     data_offset: data_offset,
                     data_length: p - data_offset,
                     transparent_index: transparent_index,
                     interlaced: !!interlace_flag,
                     delay: delay,
                     disposal: disposal});
        break;

      case 0x3b:  // Trailer Marker (end of file).
        no_eof = false;
        break;

      default:
        throw new Error("Unknown gif block: 0x" + buf[p-1].toString(16));
        break;
    }
  }

  this.numFrames = function() {
    return frames.length;
  };

  this.loopCount = function() {
    return loop_count;
  };

  this.frameInfo = function(frame_num) {
    if (frame_num < 0 || frame_num >= frames.length)
      throw new Error("Frame index out of range.");
    return frames[frame_num];
  }

  this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {
    var frame = this.frameInfo(frame_num);
    var num_pixels = frame.width * frame.height;
    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.
    GifReaderLZWOutputIndexStream(
        buf, frame.data_offset, index_stream, num_pixels);
    var palette_offset = frame.palette_offset;

    // NOTE(deanm): It seems to be much faster to compare index to 256 than
    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in
    // the profile, not sure if it's related to using a Uint8Array.
    var trans = frame.transparent_index;
    if (trans === null) trans = 256;

    // We are possibly just blitting to a portion of the entire frame.
    // That is a subrect within the framerect, so the additional pixels
    // must be skipped over after we finished a scanline.
    var framewidth  = frame.width;
    var framestride = width - framewidth;
    var xleft       = framewidth;  // Number of subrect pixels left in scanline.

    // Output indicies of the top left and bottom right corners of the subrect.
    var opbeg = ((frame.y * width) + frame.x) * 4;
    var opend = ((frame.y + frame.height) * width + frame.x) * 4;
    var op    = opbeg;

    var scanstride = framestride * 4;

    // Use scanstride to skip past the rows when interlacing.  This is skipping
    // 7 rows for the first two passes, then 3 then 1.
    if (frame.interlaced === true) {
      scanstride += width * 4 * 7;  // Pass 1.
    }

    var interlaceskip = 8;  // Tracking the row interval in the current pass.

    for (var i = 0, il = index_stream.length; i < il; ++i) {
      var index = index_stream[i];

      if (xleft === 0) {  // Beginning of new scan line
        op += scanstride;
        xleft = framewidth;
        if (op >= opend) { // Catch the wrap to switch passes when interlacing.
          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);
          // interlaceskip / 2 * 4 is interlaceskip << 1.
          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
          interlaceskip >>= 1;
        }
      }

      if (index === trans) {
        op += 4;
      } else {
        var r = buf[palette_offset + index * 3];
        var g = buf[palette_offset + index * 3 + 1];
        var b = buf[palette_offset + index * 3 + 2];
        pixels[op++] = b;
        pixels[op++] = g;
        pixels[op++] = r;
        pixels[op++] = 255;
      }
      --xleft;
    }
  };

  // I will go to copy and paste hell one day...
  this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {
    var frame = this.frameInfo(frame_num);
    var num_pixels = frame.width * frame.height;
    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.
    GifReaderLZWOutputIndexStream(
        buf, frame.data_offset, index_stream, num_pixels);
    var palette_offset = frame.palette_offset;

    // NOTE(deanm): It seems to be much faster to compare index to 256 than
    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in
    // the profile, not sure if it's related to using a Uint8Array.
    var trans = frame.transparent_index;
    if (trans === null) trans = 256;

    // We are possibly just blitting to a portion of the entire frame.
    // That is a subrect within the framerect, so the additional pixels
    // must be skipped over after we finished a scanline.
    var framewidth  = frame.width;
    var framestride = width - framewidth;
    var xleft       = framewidth;  // Number of subrect pixels left in scanline.

    // Output indicies of the top left and bottom right corners of the subrect.
    var opbeg = ((frame.y * width) + frame.x) * 4;
    var opend = ((frame.y + frame.height) * width + frame.x) * 4;
    var op    = opbeg;

    var scanstride = framestride * 4;

    // Use scanstride to skip past the rows when interlacing.  This is skipping
    // 7 rows for the first two passes, then 3 then 1.
    if (frame.interlaced === true) {
      scanstride += width * 4 * 7;  // Pass 1.
    }

    var interlaceskip = 8;  // Tracking the row interval in the current pass.

    for (var i = 0, il = index_stream.length; i < il; ++i) {
      var index = index_stream[i];

      if (xleft === 0) {  // Beginning of new scan line
        op += scanstride;
        xleft = framewidth;
        if (op >= opend) { // Catch the wrap to switch passes when interlacing.
          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);
          // interlaceskip / 2 * 4 is interlaceskip << 1.
          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
          interlaceskip >>= 1;
        }
      }

      if (index === trans) {
        op += 4;
      } else {
        var r = buf[palette_offset + index * 3];
        var g = buf[palette_offset + index * 3 + 1];
        var b = buf[palette_offset + index * 3 + 2];
        pixels[op++] = r;
        pixels[op++] = g;
        pixels[op++] = b;
        pixels[op++] = 255;
      }
      --xleft;
    }
  };
}

function GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {
  var min_code_size = code_stream[p++];

  var clear_code = 1 << min_code_size;
  var eoi_code = clear_code + 1;
  var next_code = eoi_code + 1;

  var cur_code_size = min_code_size + 1;  // Number of bits per code.
  // NOTE: This shares the same name as the encoder, but has a different
  // meaning here.  Here this masks each code coming from the code stream.
  var code_mask = (1 << cur_code_size) - 1;
  var cur_shift = 0;
  var cur = 0;

  var op = 0;  // Output pointer.

  var subblock_size = code_stream[p++];

  // TODO(deanm): Would using a TypedArray be any faster?  At least it would
  // solve the fast mode / backing store uncertainty.
  // var code_table = Array(4096);
  var code_table = new Int32Array(4096);  // Can be signed, we only use 20 bits.

  var prev_code = null;  // Track code-1.

  while (true) {
    // Read up to two bytes, making sure we always 12-bits for max sized code.
    while (cur_shift < 16) {
      if (subblock_size === 0) break;  // No more data to be read.

      cur |= code_stream[p++] << cur_shift;
      cur_shift += 8;

      if (subblock_size === 1) {  // Never let it get to 0 to hold logic above.
        subblock_size = code_stream[p++];  // Next subblock.
      } else {
        --subblock_size;
      }
    }

    // TODO(deanm): We should never really get here, we should have received
    // and EOI.
    if (cur_shift < cur_code_size)
      break;

    var code = cur & code_mask;
    cur >>= cur_code_size;
    cur_shift -= cur_code_size;

    // TODO(deanm): Maybe should check that the first code was a clear code,
    // at least this is what you're supposed to do.  But actually our encoder
    // now doesn't emit a clear code first anyway.
    if (code === clear_code) {
      // We don't actually have to clear the table.  This could be a good idea
      // for greater error checking, but we don't really do any anyway.  We
      // will just track it with next_code and overwrite old entries.

      next_code = eoi_code + 1;
      cur_code_size = min_code_size + 1;
      code_mask = (1 << cur_code_size) - 1;

      // Don't update prev_code ?
      prev_code = null;
      continue;
    } else if (code === eoi_code) {
      break;
    }

    // We have a similar situation as the decoder, where we want to store
    // variable length entries (code table entries), but we want to do in a
    // faster manner than an array of arrays.  The code below stores sort of a
    // linked list within the code table, and then "chases" through it to
    // construct the dictionary entries.  When a new entry is created, just the
    // last byte is stored, and the rest (prefix) of the entry is only
    // referenced by its table entry.  Then the code chases through the
    // prefixes until it reaches a single byte code.  We have to chase twice,
    // first to compute the length, and then to actually copy the data to the
    // output (backwards, since we know the length).  The alternative would be
    // storing something in an intermediate stack, but that doesn't make any
    // more sense.  I implemented an approach where it also stored the length
    // in the code table, although it's a bit tricky because you run out of
    // bits (12 + 12 + 8), but I didn't measure much improvements (the table
    // entries are generally not the long).  Even when I created benchmarks for
    // very long table entries the complexity did not seem worth it.
    // The code table stores the prefix entry in 12 bits and then the suffix
    // byte in 8 bits, so each entry is 20 bits.

    var chase_code = code < next_code ? code : prev_code;

    // Chase what we will output, either {CODE} or {CODE-1}.
    var chase_length = 0;
    var chase = chase_code;
    while (chase > clear_code) {
      chase = code_table[chase] >> 8;
      ++chase_length;
    }

    var k = chase;

    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);
    if (op_end > output_length) {
      console.log("Warning, gif stream longer than expected.");
      return;
    }

    // Already have the first byte from the chase, might as well write it fast.
    output[op++] = k;

    op += chase_length;
    var b = op;  // Track pointer, writing backwards.

    if (chase_code !== code)  // The case of emitting {CODE-1} + k.
      output[op++] = k;

    chase = chase_code;
    while (chase_length--) {
      chase = code_table[chase];
      output[--b] = chase & 0xff;  // Write backwards.
      chase >>= 8;  // Pull down to the prefix code.
    }

    if (prev_code !== null && next_code < 4096) {
      code_table[next_code++] = prev_code << 8 | k;
      // TODO(deanm): Figure out this clearing vs code growth logic better.  I
      // have an feeling that it should just happen somewhere else, for now it
      // is awkward between when we grow past the max and then hit a clear code.
      // For now just check if we hit the max 12-bits (then a clear code should
      // follow, also of course encoded in 12-bits).
      if (next_code >= code_mask+1 && cur_code_size < 12) {
        ++cur_code_size;
        code_mask = code_mask << 1 | 1;
      }
    }

    prev_code = code;
  }

  if (op !== output_length) {
    console.log("Warning, gif stream shorter than expected.");
  }

  return output;
}

// CommonJS.
try { exports.GifWriter = GifWriter; exports.GifReader = GifReader } catch(e) {}


/***/ }),

/***/ "./node_modules/worker-loader/dist/workers/InlineWorker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/worker-loader/dist/workers/InlineWorker.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string

var URL = window.URL || window.webkitURL;

module.exports = function (content, url) {
  try {
    try {
      var blob;

      try {
        // BlobBuilder = Deprecated, but widely implemented
        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;

        blob = new BlobBuilder();

        blob.append(content);

        blob = blob.getBlob();
      } catch (e) {
        // The proposed API
        blob = new Blob([content]);
      }

      return new Worker(URL.createObjectURL(blob));
    } catch (e) {
      return new Worker('data:application/javascript,' + encodeURIComponent(content));
    }
  } catch (e) {
    if (!url) {
      throw Error('Inline worker is not supported');
    }

    return new Worker(url);
  }
};

/***/ }),

/***/ "./src/Animated_GIF.js":
/*!*****************************!*\
  !*** ./src/Animated_GIF.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var omggif__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! omggif */ "./node_modules/omggif/omggif.js");
/* harmony import */ var omggif__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(omggif__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Animated_GIF_worker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Animated_GIF.worker */ "./src/Animated_GIF.worker.js");
/* harmony import */ var _Animated_GIF_worker__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Animated_GIF_worker__WEBPACK_IMPORTED_MODULE_1__);


// A library/utility for generating GIF files
// Uses Dean McNamee's omggif library
// and image-q's RGBQuant quantizer
//
// @author sole / http://soledadpenades.com
// Updated by Adrian De Lisle to support transparency & slight modernization
const Animated_GIF = function Animated_GIF(globalOptions) {
  'use strict'

  globalOptions = globalOptions || {}

  let globalWidth = globalOptions.width || 160
  let globalHeight = globalOptions.height || 120
  const globalDithering = globalOptions.dithering || undefined
  const globalPalette = globalOptions.palette || null
  const globalDisposal = globalOptions.disposal || 0
  const globalTransparencyCutOff = globalOptions.transparencyCutOff || 0.7 // used for normalizing pixels to be full transparent or opaque
  let canvas = null,
    ctx = null,
    repeat = 0,
    delay = 250
  const frames = []
  let numRenderedFrames = 0
  let onRenderCompleteCallback = function() {}
  let onRenderProgressCallback = function() {}
  let workers = [],
    availableWorkers = [],
    numWorkers
  let generatingGIF = false

  // We'll try to be a little lenient with the palette so as to make the library easy to use
  // The only thing we can't cope with is having a non-array so we'll bail on that one.
  if (globalPalette) {
    if (!(globalPalette instanceof Array)) {
      throw ('Palette MUST be an array but it is: ', globalPalette)
    } else {
      // Now there are other two constraints that we will warn about
      // and silently fix them... somehow:

      // a) Must contain between 2 and 256 colours
      if (globalPalette.length < 2 || globalPalette.length > 256) {
        console.error('Palette must hold only between 2 and 256 colours')

        while (globalPalette.length < 2) {
          globalPalette.push(0x000000)
        }

        if (globalPalette.length > 256) {
          globalPalette = globalPalette.slice(0, 256)
        }
      }

      // b) Must be power of 2
      if (!powerOfTwo(globalPalette.length)) {
        console.error('Palette must have a power of two number of colours')

        while (!powerOfTwo(globalPalette.length)) {
          globalPalette.splice(globalPalette.length - 1, 1)
        }
      }
    }
  }

  globalOptions = globalOptions || {}
  numWorkers = globalOptions.numWorkers || 2

  for (let i = 0; i < numWorkers; i++) {
    const w = new _Animated_GIF_worker__WEBPACK_IMPORTED_MODULE_1___default.a()
    workers.push(w)
    availableWorkers.push(w)
  }

  // ---

  // Return a worker for processing a frame
  function getWorker() {
    if (availableWorkers.length === 0) {
      throw 'No workers left!'
    }

    return availableWorkers.pop()
  }

  // Restore a worker to the pool
  function freeWorker(worker) {
    availableWorkers.push(worker)
  }

  // Faster/closurized bufferToString function
  // (caching the String.fromCharCode values)
  const bufferToString = (function() {
    let byteMap = []
    for (let i = 0; i < 256; i++) {
      byteMap[i] = String.fromCharCode(i)
    }

    return function(buffer) {
      const numberValues = buffer.length
      let str = ''

      for (let i = 0; i < numberValues; i++) {
        str += byteMap[buffer[i]]
      }

      return str
    }
  })()

  function startRendering(completeCallback) {
    onRenderCompleteCallback = completeCallback

    for (let i = 0; i < numWorkers && i < frames.length; i++) {
      processFrame(i)
    }
  }

  function processFrame(position) {
    let frame
    let worker

    frame = frames[position]

    if (frame.beingProcessed || frame.done) {
      console.error('Frame already being processed or done!', frame.position)
      onFrameFinished()
      return
    }

    frame.beingProcessed = true

    worker = getWorker()

    worker.onmessage = function(ev) {
      const data = ev.data

      // Delete original data, and free memory
      delete frame.data

      // TODO grrr... HACK for object -> Array
      frame.pixels = Array.prototype.slice.call(data.pixels)
      frame.palette = Array.prototype.slice.call(data.palette)
      frame.transparencyIndex = data.transparencyIndex
      frame.done = true
      frame.beingProcessed = false

      freeWorker(worker)

      onFrameFinished()
    }

    worker.postMessage(frame)
  }

  function processNextFrame() {
    let position = -1

    for (let i = 0; i < frames.length; i++) {
      var frame = frames[i]
      if (!frame.done && !frame.beingProcessed) {
        position = i
        break
      }
    }

    if (position >= 0) {
      processFrame(position)
    }
  }

  function onFrameFinished() {
    // ~~~ taskFinished

    // The GIF is not written until we're done with all the frames
    // because they might not be processed in the same order
    const allDone = frames.every(function(frame) {
      return !frame.beingProcessed && frame.done
    })

    numRenderedFrames++
    onRenderProgressCallback((numRenderedFrames * 0.75) / frames.length)

    if (allDone) {
      if (!generatingGIF) {
        generateGIF(frames, onRenderCompleteCallback)
      }
    } else {
      setTimeout(processNextFrame, 1)
    }
  }

  // Takes the already processed data in frames and feeds it to a new
  // GifWriter instance in order to get the binary GIF file
  function generateGIF(frames, callback) {
    // TODO: Weird: using a simple JS array instead of a typed array,
    // the files are WAY smaller o_o. Patches/explanations welcome!
    const buffer = [] // new Uint8Array(width * height * frames.length * 5);
    const gifOptions = { loop: repeat }

    // Using global palette but only if we're also using dithering
    if (globalDithering !== null && globalPalette !== null) {
      gifOptions.palette = globalPalette
    }

    const gifWriter = new omggif__WEBPACK_IMPORTED_MODULE_0__["GifWriter"](
      buffer,
      globalWidth,
      globalHeight,
      gifOptions
    )

    generatingGIF = true

    frames.forEach(function(frame) {
      let framePalette = globalPalette ? globalPalette : frame.palette

      onRenderProgressCallback(
        0.75 + (0.25 * frame.position * 1.0) / frames.length
      )

      while (!powerOfTwo(framePalette.length) && framePalette.length < 256) {
        framePalette.push(0x000000)
      }

      gifWriter.addFrame(0, 0, globalWidth, globalHeight, frame.pixels, {
        palette: framePalette,
        delay: delay,
        transparent: frame.transparencyIndex,
        disposal: frame.disposal,
      })
    })

    gifWriter.end()
    onRenderProgressCallback(1.0)

    frames = []
    generatingGIF = false

    callback(buffer)
  }

  function powerOfTwo(value) {
    return value !== 0 && (value & (value - 1)) === 0
  }

  // ---

  this.setSize = function(w, h) {
    globalWidth = w
    globalHeight = h
    canvas = document.createElement('canvas')
    canvas.width = w
    canvas.height = h
    ctx = canvas.getContext('2d')
  }

  // Internally, GIF uses tenths of seconds to store the delay
  this.setDelay = function(seconds) {
    delay = seconds * 0.1
  }

  // From GIF: 0 = loop forever, null = not looping, n > 0 = loop n times and stop
  this.setRepeat = function(r) {
    repeat = r
  }

  this.addFrame = function(element, options = {}) {
    if (ctx === null) {
      this.setSize(globalWidth, globalHeight)
    }
    // clear the canvas because drawing over other frames breaks transparency
    ctx.clearRect(0, 0, globalWidth, globalHeight)
    ctx.drawImage(element, 0, 0, globalWidth, globalHeight)
    const imageData = ctx.getImageData(0, 0, globalWidth, globalHeight)

    this.addFrameImageData(imageData, options)
  }

  this.addFrameImageData = function(imageData, options = {}) {
    const imageDataArray = new Uint8Array(imageData.data)

    frames.push({
      data: imageDataArray,
      width: imageData.width,
      height: imageData.height,
      palette: options.palette || globalPalette,
      dithering: options.dithering || globalDithering,
      disposal: options.disposal || globalDisposal,
      transparencyCutOff:
        options.transparencyCutOff || globalTransparencyCutOff,
      done: false,
      beingProcessed: false,
      position: frames.length,
    })
  }

  this.onRenderProgress = function(callback) {
    onRenderProgressCallback = callback
  }

  this.isRendering = function() {
    return generatingGIF
  }

  this.getBase64GIF = function(completeCallback) {
    const onRenderComplete = function(buffer) {
      const str = bufferToString(buffer)
      const gif = 'data:image/gif;base64,' + btoa(str)
      completeCallback(gif)
    }

    startRendering(onRenderComplete)
  }

  this.getBlobGIF = function(completeCallback) {
    const onRenderComplete = function(buffer) {
      const array = new Uint8Array(buffer)
      const blob = new Blob([array], { type: 'image/gif' })
      completeCallback(blob)
    }

    startRendering(onRenderComplete)
  }

  // Once this function is called, the object becomes unusable
  // and you'll need to create a new one.
  this.destroy = function() {
    // Explicitly ask web workers to die so they are explicitly GC'ed
    workers.forEach(function(w) {
      w.terminate()
    })
  }
}

window.Animated_GIF = Animated_GIF
/* harmony default export */ __webpack_exports__["default"] = (Animated_GIF);


/***/ }),

/***/ "./src/Animated_GIF.worker.js":
/*!************************************!*\
  !*** ./src/Animated_GIF.worker.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return __webpack_require__(/*! !./node_modules/worker-loader/dist/workers/InlineWorker.js */ "./node_modules/worker-loader/dist/workers/InlineWorker.js")("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/Animated_GIF.worker.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/core-js/fn/set-immediate.js\":\n/*!**************************************************!*\\\n  !*** ./node_modules/core-js/fn/set-immediate.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(/*! ../modules/web.immediate */ \"./node_modules/core-js/modules/web.immediate.js\");\nmodule.exports = __webpack_require__(/*! ../modules/_core */ \"./node_modules/core-js/modules/_core.js\").setImmediate;\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_a-function.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_a-function.js ***!\n  \\*****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_an-object.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_an-object.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(/*! ./_is-object */ \"./node_modules/core-js/modules/_is-object.js\");\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_cof.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/core-js/modules/_cof.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_core.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/core-js/modules/_core.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar core = module.exports = { version: '2.5.2' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_ctx.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/core-js/modules/_ctx.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n// optional / simple context binding\nvar aFunction = __webpack_require__(/*! ./_a-function */ \"./node_modules/core-js/modules/_a-function.js\");\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_descriptors.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/core-js/modules/_descriptors.js ***!\n  \\******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(/*! ./_fails */ \"./node_modules/core-js/modules/_fails.js\")(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_dom-create.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_dom-create.js ***!\n  \\*****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(/*! ./_is-object */ \"./node_modules/core-js/modules/_is-object.js\");\nvar document = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\").document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_export.js\":\n/*!*************************************************!*\\\n  !*** ./node_modules/core-js/modules/_export.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\");\nvar core = __webpack_require__(/*! ./_core */ \"./node_modules/core-js/modules/_core.js\");\nvar hide = __webpack_require__(/*! ./_hide */ \"./node_modules/core-js/modules/_hide.js\");\nvar redefine = __webpack_require__(/*! ./_redefine */ \"./node_modules/core-js/modules/_redefine.js\");\nvar ctx = __webpack_require__(/*! ./_ctx */ \"./node_modules/core-js/modules/_ctx.js\");\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_fails.js\":\n/*!************************************************!*\\\n  !*** ./node_modules/core-js/modules/_fails.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_global.js\":\n/*!*************************************************!*\\\n  !*** ./node_modules/core-js/modules/_global.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_has.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/core-js/modules/_has.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_hide.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/core-js/modules/_hide.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(/*! ./_object-dp */ \"./node_modules/core-js/modules/_object-dp.js\");\nvar createDesc = __webpack_require__(/*! ./_property-desc */ \"./node_modules/core-js/modules/_property-desc.js\");\nmodule.exports = __webpack_require__(/*! ./_descriptors */ \"./node_modules/core-js/modules/_descriptors.js\") ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_html.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/core-js/modules/_html.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar document = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\").document;\nmodule.exports = document && document.documentElement;\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_ie8-dom-define.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = !__webpack_require__(/*! ./_descriptors */ \"./node_modules/core-js/modules/_descriptors.js\") && !__webpack_require__(/*! ./_fails */ \"./node_modules/core-js/modules/_fails.js\")(function () {\n  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ \"./node_modules/core-js/modules/_dom-create.js\")('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_invoke.js\":\n/*!*************************************************!*\\\n  !*** ./node_modules/core-js/modules/_invoke.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_is-object.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_is-object.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_object-dp.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/core-js/modules/_object-dp.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(/*! ./_an-object */ \"./node_modules/core-js/modules/_an-object.js\");\nvar IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ \"./node_modules/core-js/modules/_ie8-dom-define.js\");\nvar toPrimitive = __webpack_require__(/*! ./_to-primitive */ \"./node_modules/core-js/modules/_to-primitive.js\");\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(/*! ./_descriptors */ \"./node_modules/core-js/modules/_descriptors.js\") ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_property-desc.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/core-js/modules/_property-desc.js ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_redefine.js\":\n/*!***************************************************!*\\\n  !*** ./node_modules/core-js/modules/_redefine.js ***!\n  \\***************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\");\nvar hide = __webpack_require__(/*! ./_hide */ \"./node_modules/core-js/modules/_hide.js\");\nvar has = __webpack_require__(/*! ./_has */ \"./node_modules/core-js/modules/_has.js\");\nvar SRC = __webpack_require__(/*! ./_uid */ \"./node_modules/core-js/modules/_uid.js\")('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n__webpack_require__(/*! ./_core */ \"./node_modules/core-js/modules/_core.js\").inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_task.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/core-js/modules/_task.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ctx = __webpack_require__(/*! ./_ctx */ \"./node_modules/core-js/modules/_ctx.js\");\nvar invoke = __webpack_require__(/*! ./_invoke */ \"./node_modules/core-js/modules/_invoke.js\");\nvar html = __webpack_require__(/*! ./_html */ \"./node_modules/core-js/modules/_html.js\");\nvar cel = __webpack_require__(/*! ./_dom-create */ \"./node_modules/core-js/modules/_dom-create.js\");\nvar global = __webpack_require__(/*! ./_global */ \"./node_modules/core-js/modules/_global.js\");\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (__webpack_require__(/*! ./_cof */ \"./node_modules/core-js/modules/_cof.js\")(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_to-primitive.js\":\n/*!*******************************************************!*\\\n  !*** ./node_modules/core-js/modules/_to-primitive.js ***!\n  \\*******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(/*! ./_is-object */ \"./node_modules/core-js/modules/_is-object.js\");\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/_uid.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/core-js/modules/_uid.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n/***/ }),\n\n/***/ \"./node_modules/core-js/modules/web.immediate.js\":\n/*!*******************************************************!*\\\n  !*** ./node_modules/core-js/modules/web.immediate.js ***!\n  \\*******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(/*! ./_export */ \"./node_modules/core-js/modules/_export.js\");\nvar $task = __webpack_require__(/*! ./_task */ \"./node_modules/core-js/modules/_task.js\");\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/basicAPI.js\":\n/*!***************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/basicAPI.js ***!\n  \\***************************************************/\n/*! exports provided: buildPaletteSync, buildPalette, applyPaletteSync, applyPalette */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildPaletteSync\", function() { return buildPaletteSync; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildPalette\", function() { return buildPalette; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyPaletteSync\", function() { return applyPaletteSync; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyPalette\", function() { return applyPalette; });\n/* harmony import */ var core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/fn/set-immediate */ \"./node_modules/core-js/fn/set-immediate.js\");\n/* harmony import */ var core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./distance */ \"./node_modules/image-q/dist/esm/distance/index.js\");\n/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./image */ \"./node_modules/image-q/dist/esm/image/index.js\");\n/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./palette */ \"./node_modules/image-q/dist/esm/palette/index.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * helper.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\nfunction buildPaletteSync(images, { colorDistanceFormula, paletteQuantization, colors } = {}) {\r\n    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\r\n    const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);\r\n    images.forEach(image => paletteQuantizer.sample(image));\r\n    return paletteQuantizer.quantizeSync();\r\n}\r\nasync function buildPalette(images, { colorDistanceFormula, paletteQuantization, colors, onProgress } = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\r\n        const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);\r\n        images.forEach(image => paletteQuantizer.sample(image));\r\n        let palette;\r\n        let timerId;\r\n        const iterator = paletteQuantizer.quantize();\r\n        const next = () => {\r\n            try {\r\n                const result = iterator.next();\r\n                if (result.done) {\r\n                    resolve(palette);\r\n                }\r\n                else {\r\n                    if (result.value.palette)\r\n                        palette = result.value.palette;\r\n                    if (onProgress)\r\n                        onProgress(result.value.progress);\r\n                    timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);\r\n                }\r\n            }\r\n            catch (error) {\r\n                clearTimeout(timerId);\r\n                reject(error);\r\n            }\r\n        };\r\n        timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);\r\n    });\r\n}\r\nfunction applyPaletteSync(image, palette, { colorDistanceFormula, imageQuantization } = {}) {\r\n    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\r\n    const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);\r\n    return imageQuantizer.quantizeSync(image, palette);\r\n}\r\nasync function applyPalette(image, palette, { colorDistanceFormula, imageQuantization, onProgress } = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\r\n        const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);\r\n        let outPointContainer;\r\n        let timerId;\r\n        const iterator = imageQuantizer.quantize(image, palette);\r\n        const next = () => {\r\n            try {\r\n                const result = iterator.next();\r\n                if (result.done) {\r\n                    resolve(outPointContainer);\r\n                }\r\n                else {\r\n                    if (result.value.pointContainer)\r\n                        outPointContainer = result.value.pointContainer;\r\n                    if (onProgress)\r\n                        onProgress(result.value.progress);\r\n                    timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);\r\n                }\r\n            }\r\n            catch (error) {\r\n                clearTimeout(timerId);\r\n                reject(error);\r\n            }\r\n        };\r\n        timerId = core_js_fn_set_immediate__WEBPACK_IMPORTED_MODULE_0__(next);\r\n    });\r\n}\r\nfunction colorDistanceFormulaToColorDistance(colorDistanceFormula = 'euclidean-bt709') {\r\n    switch (colorDistanceFormula) {\r\n        case 'cie94-graphic-arts': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"CIE94GraphicArts\"]();\r\n        case 'cie94-textiles': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"CIE94Textiles\"]();\r\n        case 'ciede2000': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"CIEDE2000\"]();\r\n        case 'color-metric': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"CMetric\"]();\r\n        case 'euclidean': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"Euclidean\"]();\r\n        case 'euclidean-bt709': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"EuclideanBT709\"]();\r\n        case 'euclidean-bt709-noalpha': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"EuclideanBT709NoAlpha\"]();\r\n        case 'manhattan': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"Manhattan\"]();\r\n        case 'manhattan-bt709': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"ManhattanBT709\"]();\r\n        case 'manhattan-nommyde': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"ManhattanNommyde\"]();\r\n        case 'pngquant': return new _distance__WEBPACK_IMPORTED_MODULE_1__[\"PNGQuant\"]();\r\n        default: throw new Error(`Unknown colorDistanceFormula ${colorDistanceFormula}`);\r\n    }\r\n}\r\nfunction imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization = 'floyd-steinberg') {\r\n    switch (imageQuantization) {\r\n        case 'nearest': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"NearestColor\"](distanceCalculator);\r\n        case 'riemersma': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionRiemersma\"](distanceCalculator);\r\n        case 'floyd-steinberg': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].FloydSteinberg);\r\n        case 'false-floyd-steinberg': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].FalseFloydSteinberg);\r\n        case 'stucki': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Stucki);\r\n        case 'atkinson': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Atkinson);\r\n        case 'jarvis': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Jarvis);\r\n        case 'burkes': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Burkes);\r\n        case 'sierra': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].Sierra);\r\n        case 'two-sierra': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].TwoSierra);\r\n        case 'sierra-lite': return new _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"](distanceCalculator, _image__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"].SierraLite);\r\n        default: throw new Error(`Unknown imageQuantization ${imageQuantization}`);\r\n    }\r\n}\r\nfunction paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization = 'wuquant', colors = 256) {\r\n    switch (paletteQuantization) {\r\n        case 'neuquant': return new _palette__WEBPACK_IMPORTED_MODULE_3__[\"NeuQuant\"](distanceCalculator, colors);\r\n        case 'rgbquant': return new _palette__WEBPACK_IMPORTED_MODULE_3__[\"RGBQuant\"](distanceCalculator, colors);\r\n        case 'wuquant': return new _palette__WEBPACK_IMPORTED_MODULE_3__[\"WuQuant\"](distanceCalculator, colors);\r\n        case 'neuquant-float': return new _palette__WEBPACK_IMPORTED_MODULE_3__[\"NeuQuantFloat\"](distanceCalculator, colors);\r\n        default: throw new Error(`Unknown paletteQuantization ${paletteQuantization}`);\r\n    }\r\n}\r\n//# sourceMappingURL=basicAPI.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/constants/bt709.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/constants/bt709.js ***!\n  \\**********************************************************/\n/*! exports provided: Y, x, y */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y\", function() { return Y; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return x; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return y; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * constants.ts - part of Image Quantization Library\r\n */\r\n/**\r\n * sRGB (based on ITU-R Recommendation BT.709)\r\n * http://en.wikipedia.org/wiki/SRGB\r\n */\r\nvar Y;\r\n(function (Y) {\r\n    Y[Y[\"RED\"] = 0.2126] = \"RED\";\r\n    Y[Y[\"GREEN\"] = 0.7152] = \"GREEN\";\r\n    Y[Y[\"BLUE\"] = 0.0722] = \"BLUE\";\r\n    Y[Y[\"WHITE\"] = 1] = \"WHITE\";\r\n})(Y || (Y = {}));\r\n// tslint:disable-next-line:naming-convention\r\nvar x;\r\n(function (x) {\r\n    x[x[\"RED\"] = 0.64] = \"RED\";\r\n    x[x[\"GREEN\"] = 0.3] = \"GREEN\";\r\n    x[x[\"BLUE\"] = 0.15] = \"BLUE\";\r\n    x[x[\"WHITE\"] = 0.3127] = \"WHITE\";\r\n})(x || (x = {}));\r\n// tslint:disable-next-line:naming-convention\r\nvar y;\r\n(function (y) {\r\n    y[y[\"RED\"] = 0.33] = \"RED\";\r\n    y[y[\"GREEN\"] = 0.6] = \"GREEN\";\r\n    y[y[\"BLUE\"] = 0.06] = \"BLUE\";\r\n    y[y[\"WHITE\"] = 0.329] = \"WHITE\";\r\n})(y || (y = {}));\r\n//# sourceMappingURL=bt709.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/constants/index.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/constants/index.js ***!\n  \\**********************************************************/\n/*! exports provided: bt709 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bt709__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"bt709\", function() { return _bt709__WEBPACK_IMPORTED_MODULE_0__; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * constants.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/index.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/index.js ***!\n  \\***********************************************************/\n/*! exports provided: rgb2xyz, rgb2hsl, rgb2lab, lab2xyz, lab2rgb, xyz2lab, xyz2rgb */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _rgb2xyz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rgb2xyz */ \"./node_modules/image-q/dist/esm/conversion/rgb2xyz.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rgb2xyz\", function() { return _rgb2xyz__WEBPACK_IMPORTED_MODULE_0__[\"rgb2xyz\"]; });\n\n/* harmony import */ var _rgb2hsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rgb2hsl */ \"./node_modules/image-q/dist/esm/conversion/rgb2hsl.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rgb2hsl\", function() { return _rgb2hsl__WEBPACK_IMPORTED_MODULE_1__[\"rgb2hsl\"]; });\n\n/* harmony import */ var _rgb2lab__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rgb2lab */ \"./node_modules/image-q/dist/esm/conversion/rgb2lab.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rgb2lab\", function() { return _rgb2lab__WEBPACK_IMPORTED_MODULE_2__[\"rgb2lab\"]; });\n\n/* harmony import */ var _lab2xyz__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lab2xyz */ \"./node_modules/image-q/dist/esm/conversion/lab2xyz.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lab2xyz\", function() { return _lab2xyz__WEBPACK_IMPORTED_MODULE_3__[\"lab2xyz\"]; });\n\n/* harmony import */ var _lab2rgb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lab2rgb */ \"./node_modules/image-q/dist/esm/conversion/lab2rgb.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lab2rgb\", function() { return _lab2rgb__WEBPACK_IMPORTED_MODULE_4__[\"lab2rgb\"]; });\n\n/* harmony import */ var _xyz2lab__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./xyz2lab */ \"./node_modules/image-q/dist/esm/conversion/xyz2lab.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"xyz2lab\", function() { return _xyz2lab__WEBPACK_IMPORTED_MODULE_5__[\"xyz2lab\"]; });\n\n/* harmony import */ var _xyz2rgb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./xyz2rgb */ \"./node_modules/image-q/dist/esm/conversion/xyz2rgb.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"xyz2rgb\", function() { return _xyz2rgb__WEBPACK_IMPORTED_MODULE_6__[\"xyz2rgb\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/lab2rgb.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/lab2rgb.js ***!\n  \\*************************************************************/\n/*! exports provided: lab2rgb */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lab2rgb\", function() { return lab2rgb; });\n/* harmony import */ var _lab2xyz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lab2xyz */ \"./node_modules/image-q/dist/esm/conversion/lab2xyz.js\");\n/* harmony import */ var _xyz2rgb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xyz2rgb */ \"./node_modules/image-q/dist/esm/conversion/xyz2rgb.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * lab2rgb.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n// tslint:disable-next-line:naming-convention\r\nfunction lab2rgb(L, a, b) {\r\n    const xyz = Object(_lab2xyz__WEBPACK_IMPORTED_MODULE_0__[\"lab2xyz\"])(L, a, b);\r\n    return Object(_xyz2rgb__WEBPACK_IMPORTED_MODULE_1__[\"xyz2rgb\"])(xyz.x, xyz.y, xyz.z);\r\n}\r\n//# sourceMappingURL=lab2rgb.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/lab2xyz.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/lab2xyz.js ***!\n  \\*************************************************************/\n/*! exports provided: lab2xyz */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lab2xyz\", function() { return lab2xyz; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * lab2xyz.ts - part of Image Quantization Library\r\n */\r\nconst refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant = D65\r\nconst refY = 1.00000; // ref_Y = 100.000\r\nconst refZ = 1.08883; // ref_Z = 108.883\r\nfunction pivot(n) {\r\n    return n > 0.206893034 ? Math.pow(n, 3) : (n - 16 / 116) / 7.787;\r\n}\r\n// tslint:disable-next-line:naming-convention\r\nfunction lab2xyz(L, a, b) {\r\n    const y = (L + 16) / 116;\r\n    const x = a / 500 + y;\r\n    const z = y - b / 200;\r\n    return {\r\n        x: refX * pivot(x),\r\n        y: refY * pivot(y),\r\n        z: refZ * pivot(z),\r\n    };\r\n}\r\n//# sourceMappingURL=lab2xyz.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/rgb2hsl.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/rgb2hsl.js ***!\n  \\*************************************************************/\n/*! exports provided: rgb2hsl */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgb2hsl\", function() { return rgb2hsl; });\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * rgb2hsl.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * Calculate HSL from RGB\r\n * Hue is in degrees [0..360]\r\n * Lightness: [0..1]\r\n * Saturation: [0..1]\r\n * http://web.archive.org/web/20060914040436/http://local.wasp.uwa.edu.au/~pbourke/colour/hsl/\r\n */\r\nfunction rgb2hsl(r, g, b) {\r\n    const min = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"min3\"])(r, g, b);\r\n    const max = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"max3\"])(r, g, b);\r\n    const delta = max - min;\r\n    const l = (min + max) / 510;\r\n    let s = 0;\r\n    if (l > 0 && l < 1)\r\n        s = delta / (l < 0.5 ? (max + min) : (510 - max - min));\r\n    let h = 0;\r\n    if (delta > 0) {\r\n        if (max === r) {\r\n            h = (g - b) / delta;\r\n        }\r\n        else if (max === g) {\r\n            h = (2 + (b - r) / delta);\r\n        }\r\n        else {\r\n            h = (4 + (r - g) / delta);\r\n        }\r\n        h *= 60;\r\n        if (h < 0)\r\n            h += 360;\r\n    }\r\n    return { h, s, l };\r\n}\r\n//# sourceMappingURL=rgb2hsl.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/rgb2lab.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/rgb2lab.js ***!\n  \\*************************************************************/\n/*! exports provided: rgb2lab */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgb2lab\", function() { return rgb2lab; });\n/* harmony import */ var _rgb2xyz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rgb2xyz */ \"./node_modules/image-q/dist/esm/conversion/rgb2xyz.js\");\n/* harmony import */ var _xyz2lab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xyz2lab */ \"./node_modules/image-q/dist/esm/conversion/xyz2lab.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * rgb2lab.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\nfunction rgb2lab(r, g, b) {\r\n    const xyz = Object(_rgb2xyz__WEBPACK_IMPORTED_MODULE_0__[\"rgb2xyz\"])(r, g, b);\r\n    return Object(_xyz2lab__WEBPACK_IMPORTED_MODULE_1__[\"xyz2lab\"])(xyz.x, xyz.y, xyz.z);\r\n}\r\n//# sourceMappingURL=rgb2lab.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/rgb2xyz.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/rgb2xyz.js ***!\n  \\*************************************************************/\n/*! exports provided: rgb2xyz */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgb2xyz\", function() { return rgb2xyz; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * rgb2xyz.ts - part of Image Quantization Library\r\n */\r\nfunction correctGamma(n) {\r\n    return n > 0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92;\r\n}\r\nfunction rgb2xyz(r, g, b) {\r\n    // gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\r\n    r = correctGamma(r / 255);\r\n    g = correctGamma(g / 255);\r\n    b = correctGamma(b / 255);\r\n    // Observer. = 2°, Illuminant = D65\r\n    return {\r\n        x: r * 0.4124 + g * 0.3576 + b * 0.1805,\r\n        y: r * 0.2126 + g * 0.7152 + b * 0.0722,\r\n        z: r * 0.0193 + g * 0.1192 + b * 0.9505,\r\n    };\r\n}\r\n//# sourceMappingURL=rgb2xyz.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/xyz2lab.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/xyz2lab.js ***!\n  \\*************************************************************/\n/*! exports provided: xyz2lab */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"xyz2lab\", function() { return xyz2lab; });\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * xyz2lab.ts - part of Image Quantization Library\r\n */\r\nconst refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant= D65\r\nconst refY = 1.00000; // ref_Y = 100.000\r\nconst refZ = 1.08883; // ref_Z = 108.883\r\nfunction pivot(n) {\r\n    return n > 0.008856 ? Math.pow(n, 1 / 3) : (7.787 * n + 16 / 116);\r\n}\r\nfunction xyz2lab(x, y, z) {\r\n    x = pivot(x / refX);\r\n    y = pivot(y / refY);\r\n    z = pivot(z / refZ);\r\n    if ((116 * y) - 16 < 0)\r\n        throw new Error('xxx');\r\n    return {\r\n        L: Math.max(0, (116 * y) - 16),\r\n        a: 500 * (x - y),\r\n        b: 200 * (y - z),\r\n    };\r\n}\r\n//# sourceMappingURL=xyz2lab.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/conversion/xyz2rgb.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/conversion/xyz2rgb.js ***!\n  \\*************************************************************/\n/*! exports provided: xyz2rgb */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"xyz2rgb\", function() { return xyz2rgb; });\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * xyz2rgb.ts - part of Image Quantization Library\r\n */\r\n\r\n// gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\r\nfunction correctGamma(n) {\r\n    return n > 0.0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - 0.055 : 12.92 * n;\r\n}\r\nfunction xyz2rgb(x, y, z) {\r\n    // Observer. = 2°, Illuminant = D65\r\n    const r = correctGamma(x * 3.2406 + y * -1.5372 + z * -0.4986);\r\n    const g = correctGamma(x * -0.9689 + y * 1.8758 + z * 0.0415);\r\n    const b = correctGamma(x * 0.0557 + y * -0.2040 + z * 1.0570);\r\n    return {\r\n        r: Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"inRange0to255Rounded\"])(r * 255),\r\n        g: Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"inRange0to255Rounded\"])(g * 255),\r\n        b: Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_0__[\"inRange0to255Rounded\"])(b * 255),\r\n    };\r\n}\r\n//# sourceMappingURL=xyz2rgb.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/cie94.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/cie94.js ***!\n  \\*********************************************************/\n/*! exports provided: AbstractCIE94, CIE94Textiles, CIE94GraphicArts */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractCIE94\", function() { return AbstractCIE94; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CIE94Textiles\", function() { return CIE94Textiles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CIE94GraphicArts\", function() { return CIE94GraphicArts; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony import */ var _conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conversion/rgb2lab */ \"./node_modules/image-q/dist/esm/conversion/rgb2lab.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * cie94.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n/**\r\n * CIE94 method of delta-e\r\n * http://en.wikipedia.org/wiki/Color_difference#CIE94\r\n */\r\nclass AbstractCIE94 extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const lab1 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__[\"rgb2lab\"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(r1 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(g1 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(b1 * this._whitePoint.b));\r\n        const lab2 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__[\"rgb2lab\"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(r2 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(g2 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(b2 * this._whitePoint.b));\r\n        const dL = lab1.L - lab2.L;\r\n        const dA = lab1.a - lab2.a;\r\n        const dB = lab1.b - lab2.b;\r\n        const c1 = Math.sqrt(lab1.a * lab1.a + lab1.b * lab1.b);\r\n        const c2 = Math.sqrt(lab2.a * lab2.a + lab2.b * lab2.b);\r\n        const dC = c1 - c2;\r\n        let deltaH = dA * dA + dB * dB - dC * dC;\r\n        deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\r\n        const dAlpha = (a2 - a1) * this._whitePoint.a * this._kA;\r\n        // TODO: add alpha channel support\r\n        return Math.sqrt(Math.pow(dL / this._Kl, 2) +\r\n            Math.pow(dC / (1.0 + this._K1 * c1), 2) +\r\n            Math.pow(deltaH / (1.0 + this._K2 * c1), 2) +\r\n            Math.pow(dAlpha, 2));\r\n    }\r\n}\r\nclass CIE94Textiles extends AbstractCIE94 {\r\n    _setDefaults() {\r\n        this._Kl = 2.0;\r\n        this._K1 = 0.048;\r\n        this._K2 = 0.014;\r\n        this._kA = 0.25 * 50 / 255;\r\n    }\r\n}\r\nclass CIE94GraphicArts extends AbstractCIE94 {\r\n    _setDefaults() {\r\n        this._Kl = 1.0;\r\n        this._K1 = 0.045;\r\n        this._K2 = 0.015;\r\n        this._kA = 0.25 * 100 / 255;\r\n    }\r\n}\r\n//# sourceMappingURL=cie94.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/ciede2000.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/ciede2000.js ***!\n  \\*************************************************************/\n/*! exports provided: CIEDE2000 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CIEDE2000\", function() { return CIEDE2000; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony import */ var _conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conversion/rgb2lab */ \"./node_modules/image-q/dist/esm/conversion/rgb2lab.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * ciede2000.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n// tslint:disable:variable-name\r\n// tslint:disable:naming-convention\r\n/**\r\n * CIEDE2000 algorithm - Adapted from Sharma et al's MATLAB implementation at\r\n * http://www.ece.rochester.edu/~gsharma/ciede2000/\r\n */\r\nclass CIEDE2000 extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    _setDefaults() { }\r\n    static _calculatehp(b, ap) {\r\n        const hp = Math.atan2(b, ap);\r\n        if (hp >= 0)\r\n            return hp;\r\n        return hp + CIEDE2000._deg360InRad;\r\n    }\r\n    static _calculateRT(ahp, aCp) {\r\n        const aCp_to_7 = Math.pow(aCp, 7.0);\r\n        const R_C = 2.0 * Math.sqrt(aCp_to_7 / (aCp_to_7 + CIEDE2000._pow25to7)); // 25^7\r\n        const delta_theta = CIEDE2000._deg30InRad * Math.exp(-Math.pow((ahp - CIEDE2000._deg275InRad) / CIEDE2000._deg25InRad, 2.0));\r\n        return -Math.sin(2.0 * delta_theta) * R_C;\r\n    }\r\n    static _calculateT(ahp) {\r\n        return 1.0 - .17 * Math.cos(ahp - CIEDE2000._deg30InRad) + .24 * Math.cos(ahp * 2.0) + .32 * Math.cos(ahp * 3.0 + CIEDE2000._deg6InRad) - .2 * Math.cos(ahp * 4.0 - CIEDE2000._deg63InRad);\r\n    }\r\n    static _calculate_ahp(C1pC2p, h_bar, h1p, h2p) {\r\n        const hpSum = h1p + h2p;\r\n        if (C1pC2p === 0)\r\n            return hpSum;\r\n        if (h_bar <= CIEDE2000._deg180InRad)\r\n            return hpSum / 2.0;\r\n        if (hpSum < CIEDE2000._deg360InRad)\r\n            return (hpSum + CIEDE2000._deg360InRad) / 2.0;\r\n        return (hpSum - CIEDE2000._deg360InRad) / 2.0;\r\n    }\r\n    static _calculate_dHp(C1pC2p, h_bar, h2p, h1p) {\r\n        let dhp;\r\n        if (C1pC2p === 0) {\r\n            dhp = 0;\r\n        }\r\n        else if (h_bar <= CIEDE2000._deg180InRad) {\r\n            dhp = h2p - h1p;\r\n        }\r\n        else if (h2p <= h1p) {\r\n            dhp = h2p - h1p + CIEDE2000._deg360InRad;\r\n        }\r\n        else {\r\n            dhp = h2p - h1p - CIEDE2000._deg360InRad;\r\n        }\r\n        return 2.0 * Math.sqrt(C1pC2p) * Math.sin(dhp / 2.0);\r\n    }\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const lab1 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__[\"rgb2lab\"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(r1 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(g1 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(b1 * this._whitePoint.b));\r\n        const lab2 = Object(_conversion_rgb2lab__WEBPACK_IMPORTED_MODULE_1__[\"rgb2lab\"])(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(r2 * this._whitePoint.r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(g2 * this._whitePoint.g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255\"])(b2 * this._whitePoint.b));\r\n        const dA = (a2 - a1) * this._whitePoint.a * CIEDE2000._kA;\r\n        const dE2 = this.calculateRawInLab(lab1, lab2);\r\n        return Math.sqrt(dE2 + dA * dA);\r\n    }\r\n    calculateRawInLab(Lab1, Lab2) {\r\n        // Get L,a,b values for color 1\r\n        const L1 = Lab1.L;\r\n        const a1 = Lab1.a;\r\n        const b1 = Lab1.b;\r\n        // Get L,a,b values for color 2\r\n        const L2 = Lab2.L;\r\n        const a2 = Lab2.a;\r\n        const b2 = Lab2.b;\r\n        // Calculate Cprime1, Cprime2, Cabbar\r\n        const C1 = Math.sqrt(a1 * a1 + b1 * b1);\r\n        const C2 = Math.sqrt(a2 * a2 + b2 * b2);\r\n        const pow_a_C1_C2_to_7 = Math.pow((C1 + C2) / 2.0, 7.0);\r\n        const G = 0.5 * (1.0 - Math.sqrt(pow_a_C1_C2_to_7 / (pow_a_C1_C2_to_7 + CIEDE2000._pow25to7))); // 25^7\r\n        const a1p = (1.0 + G) * a1;\r\n        const a2p = (1.0 + G) * a2;\r\n        const C1p = Math.sqrt(a1p * a1p + b1 * b1);\r\n        const C2p = Math.sqrt(a2p * a2p + b2 * b2);\r\n        const C1pC2p = C1p * C2p;\r\n        // Angles in Degree.\r\n        const h1p = CIEDE2000._calculatehp(b1, a1p);\r\n        const h2p = CIEDE2000._calculatehp(b2, a2p);\r\n        const h_bar = Math.abs(h1p - h2p);\r\n        const dLp = L2 - L1;\r\n        const dCp = C2p - C1p;\r\n        const dHp = CIEDE2000._calculate_dHp(C1pC2p, h_bar, h2p, h1p);\r\n        const ahp = CIEDE2000._calculate_ahp(C1pC2p, h_bar, h1p, h2p);\r\n        const T = CIEDE2000._calculateT(ahp);\r\n        const aCp = (C1p + C2p) / 2.0;\r\n        const aLp_minus_50_square = Math.pow((L1 + L2) / 2.0 - 50.0, 2.0);\r\n        const S_L = 1.0 + (.015 * aLp_minus_50_square) / Math.sqrt(20.0 + aLp_minus_50_square);\r\n        const S_C = 1.0 + .045 * aCp;\r\n        const S_H = 1.0 + .015 * T * aCp;\r\n        const R_T = CIEDE2000._calculateRT(ahp, aCp);\r\n        const dLpSL = dLp / S_L; // S_L * kL, where kL is 1.0\r\n        const dCpSC = dCp / S_C; // S_C * kC, where kC is 1.0\r\n        const dHpSH = dHp / S_H; // S_H * kH, where kH is 1.0\r\n        return Math.pow(dLpSL, 2) + Math.pow(dCpSC, 2) + Math.pow(dHpSH, 2) + R_T * dCpSC * dHpSH;\r\n    }\r\n}\r\n/**\r\n * Weight in distance: 0.25\r\n * Max DeltaE: 100\r\n * Max DeltaA: 255\r\n */\r\nCIEDE2000._kA = 0.25 * 100 / 255;\r\nCIEDE2000._pow25to7 = Math.pow(25, 7);\r\nCIEDE2000._deg360InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(360);\r\nCIEDE2000._deg180InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(180);\r\nCIEDE2000._deg30InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(30);\r\nCIEDE2000._deg6InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(6);\r\nCIEDE2000._deg63InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(63);\r\nCIEDE2000._deg275InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(275);\r\nCIEDE2000._deg25InRad = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"degrees2radians\"])(25);\r\n//# sourceMappingURL=ciede2000.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/cmetric.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/cmetric.js ***!\n  \\***********************************************************/\n/*! exports provided: CMetric */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CMetric\", function() { return CMetric; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * cmetric.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * TODO: Name it: http://www.compuphase.com/cmetric.htm\r\n */\r\nclass CMetric extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const rmean = (r1 + r2) / 2 * this._whitePoint.r;\r\n        const r = (r1 - r2) * this._whitePoint.r;\r\n        const g = (g1 - g2) * this._whitePoint.g;\r\n        const b = (b1 - b2) * this._whitePoint.b;\r\n        const dE = ((((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8));\r\n        const dA = (a2 - a1) * this._whitePoint.a;\r\n        return Math.sqrt(dE + dA * dA);\r\n    }\r\n    _setDefaults() { }\r\n}\r\n//# sourceMappingURL=cmetric.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\":\n/*!**********************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/distanceCalculator.js ***!\n  \\**********************************************************************/\n/*! exports provided: AbstractDistanceCalculator */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractDistanceCalculator\", function() { return AbstractDistanceCalculator; });\nclass AbstractDistanceCalculator {\r\n    constructor() {\r\n        this._setDefaults();\r\n        // set default maximal color component deltas (255 - 0 = 255)\r\n        this.setWhitePoint(255, 255, 255, 255);\r\n    }\r\n    setWhitePoint(r, g, b, a) {\r\n        this._whitePoint = {\r\n            r: (r > 0) ? 255 / r : 0,\r\n            g: (g > 0) ? 255 / g : 0,\r\n            b: (b > 0) ? 255 / b : 0,\r\n            a: (a > 0) ? 255 / a : 0,\r\n        };\r\n        this._maxDistance = this.calculateRaw(r, g, b, a, 0, 0, 0, 0);\r\n    }\r\n    calculateNormalized(colorA, colorB) {\r\n        return this.calculateRaw(colorA.r, colorA.g, colorA.b, colorA.a, colorB.r, colorB.g, colorB.b, colorB.a) / this._maxDistance;\r\n    }\r\n}\r\n//# sourceMappingURL=distanceCalculator.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/euclidean.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/euclidean.js ***!\n  \\*************************************************************/\n/*! exports provided: AbstractEuclidean, Euclidean, EuclideanBT709, EuclideanBT709NoAlpha */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractEuclidean\", function() { return AbstractEuclidean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Euclidean\", function() { return Euclidean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EuclideanBT709\", function() { return EuclideanBT709; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EuclideanBT709NoAlpha\", function() { return EuclideanBT709NoAlpha; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * euclidean.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n/**\r\n * Euclidean color distance\r\n */\r\nclass AbstractEuclidean extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const dR = r2 - r1;\r\n        const dG = g2 - g1;\r\n        const dB = b2 - b1;\r\n        const dA = a2 - a1;\r\n        return Math.sqrt(this._kR * dR * dR + this._kG * dG * dG + this._kB * dB * dB + this._kA * dA * dA);\r\n    }\r\n}\r\nclass Euclidean extends AbstractEuclidean {\r\n    _setDefaults() {\r\n        this._kR = 1;\r\n        this._kG = 1;\r\n        this._kB = 1;\r\n        this._kA = 1;\r\n    }\r\n}\r\n/**\r\n * Euclidean color distance (RGBQuant modification w Alpha)\r\n */\r\nclass EuclideanBT709 extends AbstractEuclidean {\r\n    _setDefaults() {\r\n        this._kR = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].RED;\r\n        this._kG = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].GREEN;\r\n        this._kB = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].BLUE;\r\n        // TODO: what is the best coefficient below?\r\n        this._kA = 1;\r\n    }\r\n}\r\n/**\r\n * Euclidean color distance (RGBQuant modification w/o Alpha)\r\n */\r\nclass EuclideanBT709NoAlpha extends AbstractEuclidean {\r\n    _setDefaults() {\r\n        this._kR = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].RED;\r\n        this._kG = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].GREEN;\r\n        this._kB = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].BLUE;\r\n        this._kA = 0;\r\n    }\r\n}\r\n//# sourceMappingURL=euclidean.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/index.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/index.js ***!\n  \\*********************************************************/\n/*! exports provided: AbstractDistanceCalculator, CIE94Textiles, CIE94GraphicArts, CIEDE2000, CMetric, AbstractEuclidean, Euclidean, EuclideanBT709NoAlpha, EuclideanBT709, AbstractManhattan, Manhattan, ManhattanBT709, ManhattanNommyde, PNGQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractDistanceCalculator\", function() { return _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"]; });\n\n/* harmony import */ var _cie94__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cie94 */ \"./node_modules/image-q/dist/esm/distance/cie94.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CIE94Textiles\", function() { return _cie94__WEBPACK_IMPORTED_MODULE_1__[\"CIE94Textiles\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CIE94GraphicArts\", function() { return _cie94__WEBPACK_IMPORTED_MODULE_1__[\"CIE94GraphicArts\"]; });\n\n/* harmony import */ var _ciede2000__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ciede2000 */ \"./node_modules/image-q/dist/esm/distance/ciede2000.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CIEDE2000\", function() { return _ciede2000__WEBPACK_IMPORTED_MODULE_2__[\"CIEDE2000\"]; });\n\n/* harmony import */ var _cmetric__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cmetric */ \"./node_modules/image-q/dist/esm/distance/cmetric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CMetric\", function() { return _cmetric__WEBPACK_IMPORTED_MODULE_3__[\"CMetric\"]; });\n\n/* harmony import */ var _euclidean__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./euclidean */ \"./node_modules/image-q/dist/esm/distance/euclidean.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractEuclidean\", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__[\"AbstractEuclidean\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Euclidean\", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__[\"Euclidean\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EuclideanBT709NoAlpha\", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__[\"EuclideanBT709NoAlpha\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EuclideanBT709\", function() { return _euclidean__WEBPACK_IMPORTED_MODULE_4__[\"EuclideanBT709\"]; });\n\n/* harmony import */ var _manhattan__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./manhattan */ \"./node_modules/image-q/dist/esm/distance/manhattan.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractManhattan\", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__[\"AbstractManhattan\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Manhattan\", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__[\"Manhattan\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ManhattanBT709\", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__[\"ManhattanBT709\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ManhattanNommyde\", function() { return _manhattan__WEBPACK_IMPORTED_MODULE_5__[\"ManhattanNommyde\"]; });\n\n/* harmony import */ var _pngQuant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pngQuant */ \"./node_modules/image-q/dist/esm/distance/pngQuant.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PNGQuant\", function() { return _pngQuant__WEBPACK_IMPORTED_MODULE_6__[\"PNGQuant\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/manhattan.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/manhattan.js ***!\n  \\*************************************************************/\n/*! exports provided: AbstractManhattan, Manhattan, ManhattanNommyde, ManhattanBT709 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractManhattan\", function() { return AbstractManhattan; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Manhattan\", function() { return Manhattan; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ManhattanNommyde\", function() { return ManhattanNommyde; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ManhattanBT709\", function() { return ManhattanBT709; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * manhattanNeuQuant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n/**\r\n * Manhattan distance (NeuQuant modification) - w/o sRGB coefficients\r\n */\r\nclass AbstractManhattan extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        let dR = r2 - r1;\r\n        let dG = g2 - g1;\r\n        let dB = b2 - b1;\r\n        let dA = a2 - a1;\r\n        if (dR < 0)\r\n            dR = 0 - dR;\r\n        if (dG < 0)\r\n            dG = 0 - dG;\r\n        if (dB < 0)\r\n            dB = 0 - dB;\r\n        if (dA < 0)\r\n            dA = 0 - dA;\r\n        return this._kR * dR + this._kG * dG + this._kB * dB + this._kA * dA;\r\n    }\r\n}\r\nclass Manhattan extends AbstractManhattan {\r\n    _setDefaults() {\r\n        this._kR = 1;\r\n        this._kG = 1;\r\n        this._kB = 1;\r\n        this._kA = 1;\r\n    }\r\n}\r\n/**\r\n * Manhattan distance (Nommyde modification)\r\n * https://github.com/igor-bezkrovny/image-quantization/issues/4#issuecomment-235155320\r\n */\r\nclass ManhattanNommyde extends AbstractManhattan {\r\n    _setDefaults() {\r\n        this._kR = 0.4984;\r\n        this._kG = 0.8625;\r\n        this._kB = 0.2979;\r\n        // TODO: what is the best coefficient below?\r\n        this._kA = 1;\r\n    }\r\n}\r\n/**\r\n * Manhattan distance (sRGB coefficients)\r\n */\r\nclass ManhattanBT709 extends AbstractManhattan {\r\n    _setDefaults() {\r\n        this._kR = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].RED;\r\n        this._kG = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].GREEN;\r\n        this._kB = _constants_bt709__WEBPACK_IMPORTED_MODULE_1__[\"Y\"].BLUE;\r\n        // TODO: what is the best coefficient below?\r\n        this._kA = 1;\r\n    }\r\n}\r\n//# sourceMappingURL=manhattan.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/distance/pngQuant.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/distance/pngQuant.js ***!\n  \\************************************************************/\n/*! exports provided: PNGQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PNGQuant\", function() { return PNGQuant; });\n/* harmony import */ var _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceCalculator */ \"./node_modules/image-q/dist/esm/distance/distanceCalculator.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * pngQuant.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * TODO: check quality of this distance equation\r\n * TODO: ask author for usage rights\r\n * taken from:\r\n * {@link http://stackoverflow.com/questions/4754506/color-similarity-distance-in-rgba-color-space/8796867#8796867}\r\n * {@link https://github.com/pornel/pngquant/blob/cc39b47799a7ff2ef17b529f9415ff6e6b213b8f/lib/pam.h#L148}\r\n */\r\nclass PNGQuant extends _distanceCalculator__WEBPACK_IMPORTED_MODULE_0__[\"AbstractDistanceCalculator\"] {\r\n    /**\r\n     * Author's comments\r\n     * px_b.rgb = px.rgb + 0*(1-px.a) // blend px on black\r\n     * px_b.a   = px.a   + 1*(1-px.a)\r\n     * px_w.rgb = px.rgb + 1*(1-px.a) // blend px on white\r\n     * px_w.a   = px.a   + 1*(1-px.a)\r\n     *\r\n     * px_b.rgb = px.rgb              // difference same as in opaque RGB\r\n     * px_b.a   = 1\r\n     * px_w.rgb = px.rgb - px.a       // difference simplifies to formula below\r\n     * px_w.a   = 1\r\n     *\r\n     * (px.rgb - px.a) - (py.rgb - py.a)\r\n     * (px.rgb - py.rgb) + (py.a - px.a)\r\n     *\r\n     */\r\n    calculateRaw(r1, g1, b1, a1, r2, g2, b2, a2) {\r\n        const alphas = (a2 - a1) * this._whitePoint.a;\r\n        return this._colordifferenceCh(r1 * this._whitePoint.r, r2 * this._whitePoint.r, alphas) +\r\n            this._colordifferenceCh(g1 * this._whitePoint.g, g2 * this._whitePoint.g, alphas) +\r\n            this._colordifferenceCh(b1 * this._whitePoint.b, b2 * this._whitePoint.b, alphas);\r\n    }\r\n    _colordifferenceCh(x, y, alphas) {\r\n        // maximum of channel blended on white, and blended on black\r\n        // premultiplied alpha and backgrounds 0/1 shorten the formula\r\n        const black = x - y;\r\n        const white = black + alphas;\r\n        return black * black + white * white;\r\n    }\r\n    _setDefaults() { }\r\n}\r\n//# sourceMappingURL=pngQuant.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image-q.js\":\n/*!**************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image-q.js ***!\n  \\**************************************************/\n/*! exports provided: buildPalette, buildPaletteSync, applyPalette, applyPaletteSync, constants, conversion, distance, palette, image, quality, utils */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/image-q/dist/esm/constants/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"constants\", function() { return _constants__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _conversion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conversion */ \"./node_modules/image-q/dist/esm/conversion/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"conversion\", function() { return _conversion__WEBPACK_IMPORTED_MODULE_1__; });\n/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./distance */ \"./node_modules/image-q/dist/esm/distance/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return _distance__WEBPACK_IMPORTED_MODULE_2__; });\n/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./palette */ \"./node_modules/image-q/dist/esm/palette/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"palette\", function() { return _palette__WEBPACK_IMPORTED_MODULE_3__; });\n/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./image */ \"./node_modules/image-q/dist/esm/image/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"image\", function() { return _image__WEBPACK_IMPORTED_MODULE_4__; });\n/* harmony import */ var _quality__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./quality */ \"./node_modules/image-q/dist/esm/quality/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"quality\", function() { return _quality__WEBPACK_IMPORTED_MODULE_5__; });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"utils\", function() { return _utils__WEBPACK_IMPORTED_MODULE_6__; });\n/* harmony import */ var _basicAPI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./basicAPI */ \"./node_modules/image-q/dist/esm/basicAPI.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildPalette\", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__[\"buildPalette\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildPaletteSync\", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__[\"buildPaletteSync\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"applyPalette\", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__[\"applyPalette\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"applyPaletteSync\", function() { return _basicAPI__WEBPACK_IMPORTED_MODULE_7__[\"applyPaletteSync\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=image-q.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/array.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/array.js ***!\n  \\******************************************************/\n/*! exports provided: ErrorDiffusionArrayKernel, ErrorDiffusionArray */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionArrayKernel\", function() { return ErrorDiffusionArrayKernel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionArray\", function() { return ErrorDiffusionArray; });\n/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/* harmony import */ var _utils_progressTracker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/progressTracker */ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * ditherErrorDiffusionArray.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n// TODO: is it the best name for this enum \"kernel\"?\r\nvar ErrorDiffusionArrayKernel;\r\n(function (ErrorDiffusionArrayKernel) {\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"FloydSteinberg\"] = 0] = \"FloydSteinberg\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"FalseFloydSteinberg\"] = 1] = \"FalseFloydSteinberg\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Stucki\"] = 2] = \"Stucki\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Atkinson\"] = 3] = \"Atkinson\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Jarvis\"] = 4] = \"Jarvis\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Burkes\"] = 5] = \"Burkes\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"Sierra\"] = 6] = \"Sierra\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"TwoSierra\"] = 7] = \"TwoSierra\";\r\n    ErrorDiffusionArrayKernel[ErrorDiffusionArrayKernel[\"SierraLite\"] = 8] = \"SierraLite\";\r\n})(ErrorDiffusionArrayKernel || (ErrorDiffusionArrayKernel = {}));\r\n// http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/\r\nclass ErrorDiffusionArray extends _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractImageQuantizer\"] {\r\n    constructor(colorDistanceCalculator, kernel, serpentine = true, minimumColorDistanceToDither = 0, calculateErrorLikeGIMP = false) {\r\n        super();\r\n        this._setKernel(kernel);\r\n        this._distance = colorDistanceCalculator;\r\n        this._minColorDistance = minimumColorDistanceToDither;\r\n        this._serpentine = serpentine;\r\n        this._calculateErrorLikeGIMP = calculateErrorLikeGIMP;\r\n    }\r\n    /**\r\n     * adapted from http://jsbin.com/iXofIji/2/edit by PAEz\r\n     * fixed version. it doesn't use image pixels as error storage, also it doesn't have 0.3 + 0.3 + 0.3 + 0.3 = 0 error\r\n     * Mutates pointContainer\r\n     */\r\n    *quantize(pointContainer, palette) {\r\n        const pointArray = pointContainer.getPointArray();\r\n        const originalPoint = new _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"]();\r\n        const width = pointContainer.getWidth();\r\n        const height = pointContainer.getHeight();\r\n        const errorLines = [];\r\n        let dir = 1;\r\n        let maxErrorLines = 1;\r\n        // initial error lines (number is taken from dithering kernel)\r\n        for (const kernel of this._kernel) {\r\n            const kernelErrorLines = kernel[2] + 1;\r\n            if (maxErrorLines < kernelErrorLines)\r\n                maxErrorLines = kernelErrorLines;\r\n        }\r\n        for (let i = 0; i < maxErrorLines; i++) {\r\n            this._fillErrorLine(errorLines[i] = [], width);\r\n        }\r\n        const tracker = new _utils_progressTracker__WEBPACK_IMPORTED_MODULE_3__[\"ProgressTracker\"](height, 99);\r\n        for (let y = 0; y < height; y++) {\r\n            if (tracker.shouldNotify(y)) {\r\n                yield {\r\n                    progress: tracker.progress,\r\n                };\r\n            }\r\n            // always serpentine\r\n            if (this._serpentine)\r\n                dir = dir * -1;\r\n            const lni = y * width;\r\n            const xStart = dir === 1 ? 0 : width - 1;\r\n            const xEnd = dir === 1 ? width : -1;\r\n            // cyclic shift with erasing\r\n            this._fillErrorLine(errorLines[0], width);\r\n            // TODO: why it is needed to cast types here?\r\n            errorLines.push(errorLines.shift());\r\n            const errorLine = errorLines[0];\r\n            for (let x = xStart, idx = lni + xStart; x !== xEnd; x += dir, idx += dir) {\r\n                // Image pixel\r\n                const point = pointArray[idx];\r\n                // originalPoint = new Utils.Point(),\r\n                const error = errorLine[x];\r\n                originalPoint.from(point);\r\n                const correctedPoint = _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByRGBA(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255Rounded\"])(point.r + error[0]), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255Rounded\"])(point.g + error[1]), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255Rounded\"])(point.b + error[2]), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_2__[\"inRange0to255Rounded\"])(point.a + error[3]));\r\n                // Reduced pixel\r\n                const palettePoint = palette.getNearestColor(this._distance, correctedPoint);\r\n                point.from(palettePoint);\r\n                // dithering strength\r\n                if (this._minColorDistance) {\r\n                    const dist = this._distance.calculateNormalized(point, palettePoint);\r\n                    if (dist < this._minColorDistance)\r\n                        continue;\r\n                }\r\n                // Component distance\r\n                let er;\r\n                let eg;\r\n                let eb;\r\n                let ea;\r\n                if (this._calculateErrorLikeGIMP) {\r\n                    er = correctedPoint.r - palettePoint.r;\r\n                    eg = correctedPoint.g - palettePoint.g;\r\n                    eb = correctedPoint.b - palettePoint.b;\r\n                    ea = correctedPoint.a - palettePoint.a;\r\n                }\r\n                else {\r\n                    er = originalPoint.r - palettePoint.r;\r\n                    eg = originalPoint.g - palettePoint.g;\r\n                    eb = originalPoint.b - palettePoint.b;\r\n                    ea = originalPoint.a - palettePoint.a;\r\n                }\r\n                const dStart = dir === 1 ? 0 : this._kernel.length - 1;\r\n                const dEnd = dir === 1 ? this._kernel.length : -1;\r\n                for (let i = dStart; i !== dEnd; i += dir) {\r\n                    const x1 = this._kernel[i][1] * dir;\r\n                    const y1 = this._kernel[i][2];\r\n                    if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\r\n                        const d = this._kernel[i][0];\r\n                        const e = errorLines[y1][x1 + x];\r\n                        e[0] = e[0] + er * d;\r\n                        e[1] = e[1] + eg * d;\r\n                        e[2] = e[2] + eb * d;\r\n                        e[3] = e[3] + ea * d;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        yield {\r\n            pointContainer,\r\n            progress: 100,\r\n        };\r\n    }\r\n    _fillErrorLine(errorLine, width) {\r\n        // shrink\r\n        if (errorLine.length > width) {\r\n            errorLine.length = width;\r\n        }\r\n        // reuse existing arrays\r\n        const l = errorLine.length;\r\n        for (let i = 0; i < l; i++) {\r\n            const error = errorLine[i];\r\n            error[0] = error[1] = error[2] = error[3] = 0;\r\n        }\r\n        // create missing arrays\r\n        for (let i = l; i < width; i++) {\r\n            errorLine[i] = [0.0, 0.0, 0.0, 0.0];\r\n        }\r\n    }\r\n    _setKernel(kernel) {\r\n        switch (kernel) {\r\n            case ErrorDiffusionArrayKernel.FloydSteinberg:\r\n                this._kernel = [\r\n                    [7 / 16, 1, 0],\r\n                    [3 / 16, -1, 1],\r\n                    [5 / 16, 0, 1],\r\n                    [1 / 16, 1, 1],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.FalseFloydSteinberg:\r\n                this._kernel = [\r\n                    [3 / 8, 1, 0],\r\n                    [3 / 8, 0, 1],\r\n                    [2 / 8, 1, 1],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Stucki:\r\n                this._kernel = [\r\n                    [8 / 42, 1, 0],\r\n                    [4 / 42, 2, 0],\r\n                    [2 / 42, -2, 1],\r\n                    [4 / 42, -1, 1],\r\n                    [8 / 42, 0, 1],\r\n                    [4 / 42, 1, 1],\r\n                    [2 / 42, 2, 1],\r\n                    [1 / 42, -2, 2],\r\n                    [2 / 42, -1, 2],\r\n                    [4 / 42, 0, 2],\r\n                    [2 / 42, 1, 2],\r\n                    [1 / 42, 2, 2],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Atkinson:\r\n                this._kernel = [\r\n                    [1 / 8, 1, 0],\r\n                    [1 / 8, 2, 0],\r\n                    [1 / 8, -1, 1],\r\n                    [1 / 8, 0, 1],\r\n                    [1 / 8, 1, 1],\r\n                    [1 / 8, 0, 2],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Jarvis:\r\n                this._kernel = [\r\n                    [7 / 48, 1, 0],\r\n                    [5 / 48, 2, 0],\r\n                    [3 / 48, -2, 1],\r\n                    [5 / 48, -1, 1],\r\n                    [7 / 48, 0, 1],\r\n                    [5 / 48, 1, 1],\r\n                    [3 / 48, 2, 1],\r\n                    [1 / 48, -2, 2],\r\n                    [3 / 48, -1, 2],\r\n                    [5 / 48, 0, 2],\r\n                    [3 / 48, 1, 2],\r\n                    [1 / 48, 2, 2],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Burkes:\r\n                this._kernel = [\r\n                    [8 / 32, 1, 0],\r\n                    [4 / 32, 2, 0],\r\n                    [2 / 32, -2, 1],\r\n                    [4 / 32, -1, 1],\r\n                    [8 / 32, 0, 1],\r\n                    [4 / 32, 1, 1],\r\n                    [2 / 32, 2, 1],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.Sierra:\r\n                this._kernel = [\r\n                    [5 / 32, 1, 0],\r\n                    [3 / 32, 2, 0],\r\n                    [2 / 32, -2, 1],\r\n                    [4 / 32, -1, 1],\r\n                    [5 / 32, 0, 1],\r\n                    [4 / 32, 1, 1],\r\n                    [2 / 32, 2, 1],\r\n                    [2 / 32, -1, 2],\r\n                    [3 / 32, 0, 2],\r\n                    [2 / 32, 1, 2],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.TwoSierra:\r\n                this._kernel = [\r\n                    [4 / 16, 1, 0],\r\n                    [3 / 16, 2, 0],\r\n                    [1 / 16, -2, 1],\r\n                    [2 / 16, -1, 1],\r\n                    [3 / 16, 0, 1],\r\n                    [2 / 16, 1, 1],\r\n                    [1 / 16, 2, 1],\r\n                ];\r\n                break;\r\n            case ErrorDiffusionArrayKernel.SierraLite:\r\n                this._kernel = [\r\n                    [2 / 4, 1, 0],\r\n                    [1 / 4, -1, 1],\r\n                    [1 / 4, 0, 1],\r\n                ];\r\n                break;\r\n            default:\r\n                throw new Error('ErrorDiffusionArray: unknown kernel = ' + kernel);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=array.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\":\n/*!***************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/imageQuantizer.js ***!\n  \\***************************************************************/\n/*! exports provided: AbstractImageQuantizer */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractImageQuantizer\", function() { return AbstractImageQuantizer; });\nclass AbstractImageQuantizer {\r\n    quantizeSync(pointContainer, palette) {\r\n        for (const value of this.quantize(pointContainer, palette)) {\r\n            if (value.pointContainer) {\r\n                return value.pointContainer;\r\n            }\r\n        }\r\n        throw new Error('unreachable');\r\n    }\r\n}\r\n//# sourceMappingURL=imageQuantizer.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/index.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/index.js ***!\n  \\******************************************************/\n/*! exports provided: AbstractImageQuantizer, NearestColor, ErrorDiffusionArray, ErrorDiffusionArrayKernel, ErrorDiffusionRiemersma */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractImageQuantizer\", function() { return _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractImageQuantizer\"]; });\n\n/* harmony import */ var _nearestColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nearestColor */ \"./node_modules/image-q/dist/esm/image/nearestColor.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NearestColor\", function() { return _nearestColor__WEBPACK_IMPORTED_MODULE_1__[\"NearestColor\"]; });\n\n/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./array */ \"./node_modules/image-q/dist/esm/image/array.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionArray\", function() { return _array__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArray\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionArrayKernel\", function() { return _array__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDiffusionArrayKernel\"]; });\n\n/* harmony import */ var _riemersma__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./riemersma */ \"./node_modules/image-q/dist/esm/image/riemersma.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionRiemersma\", function() { return _riemersma__WEBPACK_IMPORTED_MODULE_3__[\"ErrorDiffusionRiemersma\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/nearestColor.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/nearestColor.js ***!\n  \\*************************************************************/\n/*! exports provided: NearestColor */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NearestColor\", function() { return NearestColor; });\n/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\");\n/* harmony import */ var _utils_progressTracker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/progressTracker */ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * nearestColor.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\nclass NearestColor extends _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractImageQuantizer\"] {\r\n    constructor(colorDistanceCalculator) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n    }\r\n    /**\r\n     * Mutates pointContainer\r\n     */\r\n    *quantize(pointContainer, palette) {\r\n        const pointArray = pointContainer.getPointArray();\r\n        const width = pointContainer.getWidth();\r\n        const height = pointContainer.getHeight();\r\n        const tracker = new _utils_progressTracker__WEBPACK_IMPORTED_MODULE_1__[\"ProgressTracker\"](height, 99);\r\n        for (let y = 0; y < height; y++) {\r\n            if (tracker.shouldNotify(y)) {\r\n                yield {\r\n                    progress: tracker.progress,\r\n                };\r\n            }\r\n            for (let x = 0, idx = y * width; x < width; x++, idx++) {\r\n                // Image pixel\r\n                const point = pointArray[idx];\r\n                // Reduced pixel\r\n                point.from(palette.getNearestColor(this._distance, point));\r\n            }\r\n        }\r\n        yield {\r\n            pointContainer,\r\n            progress: 100,\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=nearestColor.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/riemersma.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/riemersma.js ***!\n  \\**********************************************************/\n/*! exports provided: ErrorDiffusionRiemersma */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ErrorDiffusionRiemersma\", function() { return ErrorDiffusionRiemersma; });\n/* harmony import */ var _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageQuantizer */ \"./node_modules/image-q/dist/esm/image/imageQuantizer.js\");\n/* harmony import */ var _spaceFillingCurves_hilbertCurve__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spaceFillingCurves/hilbertCurve */ \"./node_modules/image-q/dist/esm/image/spaceFillingCurves/hilbertCurve.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/**\r\n * @preserve\r\n * MIT License\r\n *\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n *\r\n * riemersma.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\nclass ErrorDiffusionRiemersma extends _imageQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractImageQuantizer\"] {\r\n    constructor(colorDistanceCalculator, errorQueueSize = 16, errorPropagation = 1) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        this._errorQueueSize = errorQueueSize;\r\n        this._weights = ErrorDiffusionRiemersma._createWeights(errorPropagation, errorQueueSize);\r\n    }\r\n    /**\r\n     * Mutates pointContainer\r\n     */\r\n    *quantize(pointContainer, palette) {\r\n        const pointArray = pointContainer.getPointArray();\r\n        const width = pointContainer.getWidth();\r\n        const height = pointContainer.getHeight();\r\n        const errorQueue = [];\r\n        let head = 0;\r\n        for (let i = 0; i < this._errorQueueSize; i++) {\r\n            errorQueue[i] = { r: 0, g: 0, b: 0, a: 0 };\r\n        }\r\n        yield* Object(_spaceFillingCurves_hilbertCurve__WEBPACK_IMPORTED_MODULE_1__[\"hilbertCurve\"])(width, height, (x, y) => {\r\n            const p = pointArray[x + y * width];\r\n            let r = p.r;\r\n            let g = p.g;\r\n            let b = p.b;\r\n            let a = p.a;\r\n            for (let i = 0; i < this._errorQueueSize; i++) {\r\n                const weight = this._weights[i];\r\n                const e = errorQueue[(i + head) % this._errorQueueSize];\r\n                r += e.r * weight;\r\n                g += e.g * weight;\r\n                b += e.b * weight;\r\n                a += e.a * weight;\r\n            }\r\n            const correctedPoint = _utils_point__WEBPACK_IMPORTED_MODULE_2__[\"Point\"].createByRGBA(Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__[\"inRange0to255Rounded\"])(r), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__[\"inRange0to255Rounded\"])(g), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__[\"inRange0to255Rounded\"])(b), Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_3__[\"inRange0to255Rounded\"])(a));\r\n            const quantizedPoint = palette.getNearestColor(this._distance, correctedPoint);\r\n            // update head and calculate tail\r\n            head = (head + 1) % this._errorQueueSize;\r\n            const tail = (head + this._errorQueueSize - 1) % this._errorQueueSize;\r\n            // update error with new value\r\n            errorQueue[tail].r = p.r - quantizedPoint.r;\r\n            errorQueue[tail].g = p.g - quantizedPoint.g;\r\n            errorQueue[tail].b = p.b - quantizedPoint.b;\r\n            errorQueue[tail].a = p.a - quantizedPoint.a;\r\n            // update point\r\n            p.from(quantizedPoint);\r\n        });\r\n        yield {\r\n            pointContainer,\r\n            progress: 100,\r\n        };\r\n    }\r\n    static _createWeights(errorPropagation, errorQueueSize) {\r\n        const weights = [];\r\n        const multiplier = Math.exp(Math.log(errorQueueSize) / (errorQueueSize - 1));\r\n        for (let i = 0, next = 1; i < errorQueueSize; i++) {\r\n            weights[i] = (((next + 0.5) | 0) / errorQueueSize) * errorPropagation;\r\n            next *= multiplier;\r\n        }\r\n        return weights;\r\n    }\r\n}\r\n//# sourceMappingURL=riemersma.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/image/spaceFillingCurves/hilbertCurve.js\":\n/*!********************************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/image/spaceFillingCurves/hilbertCurve.js ***!\n  \\********************************************************************************/\n/*! exports provided: hilbertCurve */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hilbertCurve\", function() { return hilbertCurve; });\n/* harmony import */ var _utils_progressTracker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/progressTracker */ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\");\n\r\nvar Direction;\r\n(function (Direction) {\r\n    Direction[Direction[\"NONE\"] = 0] = \"NONE\";\r\n    Direction[Direction[\"UP\"] = 1] = \"UP\";\r\n    Direction[Direction[\"LEFT\"] = 2] = \"LEFT\";\r\n    Direction[Direction[\"RIGHT\"] = 3] = \"RIGHT\";\r\n    Direction[Direction[\"DOWN\"] = 4] = \"DOWN\";\r\n})(Direction || (Direction = {}));\r\nfunction* hilbertCurve(width, height, callback) {\r\n    const maxBound = Math.max(width, height);\r\n    const level = Math.floor(Math.log(maxBound) / Math.log(2) + 1);\r\n    const tracker = new _utils_progressTracker__WEBPACK_IMPORTED_MODULE_0__[\"ProgressTracker\"](width * height, 99);\r\n    const data = {\r\n        width,\r\n        height,\r\n        level,\r\n        callback,\r\n        tracker,\r\n        index: 0,\r\n        x: 0,\r\n        y: 0,\r\n    };\r\n    yield* walkHilbert(data, Direction.UP);\r\n    visit(data, Direction.NONE);\r\n}\r\nfunction* walkHilbert(data, direction) {\r\n    if (data.level < 1)\r\n        return;\r\n    if (data.tracker.shouldNotify(data.index))\r\n        yield { progress: data.tracker.progress };\r\n    data.level--;\r\n    switch (direction) {\r\n        case Direction.LEFT:\r\n            yield* walkHilbert(data, Direction.UP);\r\n            visit(data, Direction.RIGHT);\r\n            yield* walkHilbert(data, Direction.LEFT);\r\n            visit(data, Direction.DOWN);\r\n            yield* walkHilbert(data, Direction.LEFT);\r\n            visit(data, Direction.LEFT);\r\n            yield* walkHilbert(data, Direction.DOWN);\r\n            break;\r\n        case Direction.RIGHT:\r\n            yield* walkHilbert(data, Direction.DOWN);\r\n            visit(data, Direction.LEFT);\r\n            yield* walkHilbert(data, Direction.RIGHT);\r\n            visit(data, Direction.UP);\r\n            yield* walkHilbert(data, Direction.RIGHT);\r\n            visit(data, Direction.RIGHT);\r\n            yield* walkHilbert(data, Direction.UP);\r\n            break;\r\n        case Direction.UP:\r\n            yield* walkHilbert(data, Direction.LEFT);\r\n            visit(data, Direction.DOWN);\r\n            yield* walkHilbert(data, Direction.UP);\r\n            visit(data, Direction.RIGHT);\r\n            yield* walkHilbert(data, Direction.UP);\r\n            visit(data, Direction.UP);\r\n            yield* walkHilbert(data, Direction.RIGHT);\r\n            break;\r\n        case Direction.DOWN:\r\n            yield* walkHilbert(data, Direction.RIGHT);\r\n            visit(data, Direction.UP);\r\n            yield* walkHilbert(data, Direction.DOWN);\r\n            visit(data, Direction.LEFT);\r\n            yield* walkHilbert(data, Direction.DOWN);\r\n            visit(data, Direction.DOWN);\r\n            yield* walkHilbert(data, Direction.LEFT);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    data.level++;\r\n}\r\nfunction visit(data, direction) {\r\n    if (data.x >= 0 && data.x < data.width && data.y >= 0 && data.y < data.height) {\r\n        data.callback(data.x, data.y);\r\n        data.index++;\r\n    }\r\n    switch (direction) {\r\n        case Direction.LEFT:\r\n            data.x--;\r\n            break;\r\n        case Direction.RIGHT:\r\n            data.x++;\r\n            break;\r\n        case Direction.UP:\r\n            data.y--;\r\n            break;\r\n        case Direction.DOWN:\r\n            data.y++;\r\n            break;\r\n    }\r\n}\r\n//# sourceMappingURL=hilbertCurve.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/index.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/index.js ***!\n  \\********************************************************/\n/*! exports provided: AbstractPaletteQuantizer, NeuQuant, NeuQuantFloat, RGBQuant, ColorHistogram, WuQuant, WuColorCube */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AbstractPaletteQuantizer\", function() { return _paletteQuantizer__WEBPACK_IMPORTED_MODULE_0__[\"AbstractPaletteQuantizer\"]; });\n\n/* harmony import */ var _neuquant_neuquant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./neuquant/neuquant */ \"./node_modules/image-q/dist/esm/palette/neuquant/neuquant.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NeuQuant\", function() { return _neuquant_neuquant__WEBPACK_IMPORTED_MODULE_1__[\"NeuQuant\"]; });\n\n/* harmony import */ var _neuquant_neuquantFloat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./neuquant/neuquantFloat */ \"./node_modules/image-q/dist/esm/palette/neuquant/neuquantFloat.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NeuQuantFloat\", function() { return _neuquant_neuquantFloat__WEBPACK_IMPORTED_MODULE_2__[\"NeuQuantFloat\"]; });\n\n/* harmony import */ var _rgbquant_rgbquant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rgbquant/rgbquant */ \"./node_modules/image-q/dist/esm/palette/rgbquant/rgbquant.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RGBQuant\", function() { return _rgbquant_rgbquant__WEBPACK_IMPORTED_MODULE_3__[\"RGBQuant\"]; });\n\n/* harmony import */ var _rgbquant_colorHistogram__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rgbquant/colorHistogram */ \"./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ColorHistogram\", function() { return _rgbquant_colorHistogram__WEBPACK_IMPORTED_MODULE_4__[\"ColorHistogram\"]; });\n\n/* harmony import */ var _wu_wuQuant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wu/wuQuant */ \"./node_modules/image-q/dist/esm/palette/wu/wuQuant.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"WuQuant\", function() { return _wu_wuQuant__WEBPACK_IMPORTED_MODULE_5__[\"WuQuant\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"WuColorCube\", function() { return _wu_wuQuant__WEBPACK_IMPORTED_MODULE_5__[\"WuColorCube\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/neuquant/neuquant.js\":\n/*!********************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/neuquant/neuquant.js ***!\n  \\********************************************************************/\n/*! exports provided: NeuQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NeuQuant\", function() { return NeuQuant; });\n/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/*\r\n * NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\r\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\r\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\r\n * the algorithm.\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\r\n * this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons who\r\n * receive copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n */\r\n/**\r\n * @preserve TypeScript port:\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * neuquant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n// bias for colour values\r\nconst networkBiasShift = 3;\r\nclass Neuron {\r\n    constructor(defaultValue) {\r\n        this.r = this.g = this.b = this.a = defaultValue;\r\n    }\r\n    /**\r\n     * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\r\n     * @example\r\n     * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);\r\n     */\r\n    toPoint() {\r\n        return _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);\r\n    }\r\n    subtract(r, g, b, a) {\r\n        this.r -= r | 0;\r\n        this.g -= g | 0;\r\n        this.b -= b | 0;\r\n        this.a -= a | 0;\r\n    }\r\n}\r\nclass NeuQuant extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__[\"AbstractPaletteQuantizer\"] {\r\n    constructor(colorDistanceCalculator, colors = 256) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        this._pointArray = [];\r\n        this._sampleFactor = 1;\r\n        this._networkSize = colors;\r\n        this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);\r\n    }\r\n    sample(pointContainer) {\r\n        this._pointArray = this._pointArray.concat(pointContainer.getPointArray());\r\n    }\r\n    *quantize() {\r\n        this._init();\r\n        yield* this._learn();\r\n        yield {\r\n            palette: this._buildPalette(),\r\n            progress: 100,\r\n        };\r\n    }\r\n    _init() {\r\n        this._freq = [];\r\n        this._bias = [];\r\n        this._radPower = [];\r\n        this._network = [];\r\n        for (let i = 0; i < this._networkSize; i++) {\r\n            this._network[i] = new Neuron((i << (networkBiasShift + 8)) / this._networkSize | 0);\r\n            // 1/this._networkSize\r\n            this._freq[i] = NeuQuant._initialBias / this._networkSize | 0;\r\n            this._bias[i] = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Main Learning Loop\r\n     */\r\n    *_learn() {\r\n        let sampleFactor = this._sampleFactor;\r\n        const pointsNumber = this._pointArray.length;\r\n        if (pointsNumber < NeuQuant._minpicturebytes)\r\n            sampleFactor = 1;\r\n        const alphadec = 30 + (sampleFactor - 1) / 3 | 0;\r\n        const pointsToSample = pointsNumber / sampleFactor | 0;\r\n        let delta = pointsToSample / NeuQuant._nCycles | 0;\r\n        let alpha = NeuQuant._initAlpha;\r\n        let radius = (this._networkSize >> 3) * NeuQuant._radiusBias;\r\n        let rad = radius >> NeuQuant._radiusBiasShift;\r\n        if (rad <= 1)\r\n            rad = 0;\r\n        for (let i = 0; i < rad; i++) {\r\n            this._radPower[i] = alpha * (((rad * rad - i * i) * NeuQuant._radBias) / (rad * rad)) >>> 0;\r\n        }\r\n        let step;\r\n        if (pointsNumber < NeuQuant._minpicturebytes) {\r\n            step = 1;\r\n        }\r\n        else if (pointsNumber % NeuQuant._prime1 !== 0) {\r\n            step = NeuQuant._prime1;\r\n        }\r\n        else if ((pointsNumber % NeuQuant._prime2) !== 0) {\r\n            step = NeuQuant._prime2;\r\n        }\r\n        else if ((pointsNumber % NeuQuant._prime3) !== 0) {\r\n            step = NeuQuant._prime3;\r\n        }\r\n        else {\r\n            step = NeuQuant._prime4;\r\n        }\r\n        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_3__[\"ProgressTracker\"](pointsToSample, 99);\r\n        for (let i = 0, pointIndex = 0; i < pointsToSample;) {\r\n            if (tracker.shouldNotify(i)) {\r\n                yield {\r\n                    progress: tracker.progress,\r\n                };\r\n            }\r\n            const point = this._pointArray[pointIndex];\r\n            const b = point.b << networkBiasShift;\r\n            const g = point.g << networkBiasShift;\r\n            const r = point.r << networkBiasShift;\r\n            const a = point.a << networkBiasShift;\r\n            const neuronIndex = this._contest(b, g, r, a);\r\n            this._alterSingle(alpha, neuronIndex, b, g, r, a);\r\n            if (rad !== 0)\r\n                this._alterNeighbour(rad, neuronIndex, b, g, r, a);\r\n            /* alter neighbours */\r\n            pointIndex += step;\r\n            if (pointIndex >= pointsNumber)\r\n                pointIndex -= pointsNumber;\r\n            i++;\r\n            if (delta === 0)\r\n                delta = 1;\r\n            if (i % delta === 0) {\r\n                alpha -= (alpha / alphadec) | 0;\r\n                radius -= (radius / NeuQuant._radiusDecrease) | 0;\r\n                rad = radius >> NeuQuant._radiusBiasShift;\r\n                if (rad <= 1)\r\n                    rad = 0;\r\n                for (let j = 0; j < rad; j++)\r\n                    this._radPower[j] = alpha * (((rad * rad - j * j) * NeuQuant._radBias) / (rad * rad)) >>> 0;\r\n            }\r\n        }\r\n    }\r\n    _buildPalette() {\r\n        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__[\"Palette\"]();\r\n        this._network.forEach(neuron => {\r\n            palette.add(neuron.toPoint());\r\n        });\r\n        palette.sort();\r\n        return palette;\r\n    }\r\n    /**\r\n     * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]\r\n     */\r\n    _alterNeighbour(rad, i, b, g, r, al) {\r\n        let lo = i - rad;\r\n        if (lo < -1)\r\n            lo = -1;\r\n        let hi = i + rad;\r\n        if (hi > this._networkSize)\r\n            hi = this._networkSize;\r\n        let j = i + 1;\r\n        let k = i - 1;\r\n        let m = 1;\r\n        while (j < hi || k > lo) {\r\n            const a = this._radPower[m++] / NeuQuant._alphaRadBias;\r\n            if (j < hi) {\r\n                const p = this._network[j++];\r\n                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));\r\n            }\r\n            if (k > lo) {\r\n                const p = this._network[k--];\r\n                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Move neuron i towards biased (b,g,r) by factor alpha\r\n     */\r\n    _alterSingle(alpha, i, b, g, r, a) {\r\n        alpha /= NeuQuant._initAlpha;\r\n        /* alter hit neuron */\r\n        const n = this._network[i];\r\n        n.subtract(alpha * (n.r - r), alpha * (n.g - g), alpha * (n.b - b), alpha * (n.a - a));\r\n    }\r\n    /**\r\n     * Search for biased BGR values\r\n     * description:\r\n     *    finds closest neuron (min dist) and updates freq\r\n     *    finds best neuron (min dist-bias) and returns position\r\n     *    for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n     *    bias[i] = _gamma*((1/this._networkSize)-freq[i])\r\n     *\r\n     * Original distance equation:\r\n     *        dist = abs(dR) + abs(dG) + abs(dB)\r\n     */\r\n    _contest(b, g, r, a) {\r\n        const multiplier = (255 * 4) << networkBiasShift;\r\n        let bestd = ~(1 << 31);\r\n        let bestbiasd = bestd;\r\n        let bestpos = -1;\r\n        let bestbiaspos = bestpos;\r\n        for (let i = 0; i < this._networkSize; i++) {\r\n            const n = this._network[i];\r\n            const dist = this._distance.calculateNormalized(n, { r, g, b, a }) * multiplier | 0;\r\n            if (dist < bestd) {\r\n                bestd = dist;\r\n                bestpos = i;\r\n            }\r\n            const biasdist = dist - ((this._bias[i]) >> (NeuQuant._initialBiasShift - networkBiasShift));\r\n            if (biasdist < bestbiasd) {\r\n                bestbiasd = biasdist;\r\n                bestbiaspos = i;\r\n            }\r\n            const betafreq = (this._freq[i] >> NeuQuant._betaShift);\r\n            this._freq[i] -= betafreq;\r\n            this._bias[i] += (betafreq << NeuQuant._gammaShift);\r\n        }\r\n        this._freq[bestpos] += NeuQuant._beta;\r\n        this._bias[bestpos] -= NeuQuant._betaGamma;\r\n        return bestbiaspos;\r\n    }\r\n}\r\n/*\r\n four primes near 500 - assume no image has a length so large\r\n that it is divisible by all four primes\r\n */\r\nNeuQuant._prime1 = 499;\r\nNeuQuant._prime2 = 491;\r\nNeuQuant._prime3 = 487;\r\nNeuQuant._prime4 = 503;\r\nNeuQuant._minpicturebytes = NeuQuant._prime4;\r\n// no. of learning cycles\r\nNeuQuant._nCycles = 100;\r\n// defs for freq and bias\r\nNeuQuant._initialBiasShift = 16;\r\n// bias for fractions\r\nNeuQuant._initialBias = (1 << NeuQuant._initialBiasShift);\r\nNeuQuant._gammaShift = 10;\r\n// gamma = 1024\r\n// TODO: why gamma is never used?\r\n// private static _gamma : number     = (1 << NeuQuant._gammaShift);\r\nNeuQuant._betaShift = 10;\r\nNeuQuant._beta = (NeuQuant._initialBias >> NeuQuant._betaShift);\r\n// beta = 1/1024\r\nNeuQuant._betaGamma = (NeuQuant._initialBias << (NeuQuant._gammaShift - NeuQuant._betaShift));\r\n/*\r\n * for 256 cols, radius starts\r\n */\r\nNeuQuant._radiusBiasShift = 6;\r\n// at 32.0 biased by 6 bits\r\nNeuQuant._radiusBias = 1 << NeuQuant._radiusBiasShift;\r\n// and decreases by a factor of 1/30 each cycle\r\nNeuQuant._radiusDecrease = 30;\r\n/* defs for decreasing alpha factor */\r\n// alpha starts at 1.0\r\nNeuQuant._alphaBiasShift = 10;\r\n// biased by 10 bits\r\nNeuQuant._initAlpha = (1 << NeuQuant._alphaBiasShift);\r\n/* radBias and alphaRadBias used for radpower calculation */\r\nNeuQuant._radBiasShift = 8;\r\nNeuQuant._radBias = 1 << NeuQuant._radBiasShift;\r\nNeuQuant._alphaRadBiasShift = NeuQuant._alphaBiasShift + NeuQuant._radBiasShift;\r\nNeuQuant._alphaRadBias = 1 << NeuQuant._alphaRadBiasShift;\r\n//# sourceMappingURL=neuquant.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/neuquant/neuquantFloat.js\":\n/*!*************************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/neuquant/neuquantFloat.js ***!\n  \\*************************************************************************/\n/*! exports provided: NeuQuantFloat */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NeuQuantFloat\", function() { return NeuQuantFloat; });\n/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/*\r\n * NeuQuantFloat Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\r\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\r\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\r\n * the algorithm.\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\r\n * this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons who\r\n * receive copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n */\r\n/**\r\n * @preserve TypeScript port:\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * neuquant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n// bias for colour values\r\nconst networkBiasShift = 3;\r\nclass NeuronFloat {\r\n    constructor(defaultValue) {\r\n        this.r = this.g = this.b = this.a = defaultValue;\r\n    }\r\n    /**\r\n     * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\r\n     * @example\r\n     * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);\r\n     */\r\n    toPoint() {\r\n        return _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);\r\n    }\r\n    subtract(r, g, b, a) {\r\n        this.r -= r;\r\n        this.g -= g;\r\n        this.b -= b;\r\n        this.a -= a;\r\n    }\r\n}\r\nclass NeuQuantFloat extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__[\"AbstractPaletteQuantizer\"] {\r\n    constructor(colorDistanceCalculator, colors = 256) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        this._pointArray = [];\r\n        this._sampleFactor = 1;\r\n        this._networkSize = colors;\r\n        this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);\r\n    }\r\n    sample(pointContainer) {\r\n        this._pointArray = this._pointArray.concat(pointContainer.getPointArray());\r\n    }\r\n    *quantize() {\r\n        this._init();\r\n        yield* this._learn();\r\n        yield {\r\n            palette: this._buildPalette(),\r\n            progress: 100,\r\n        };\r\n    }\r\n    _init() {\r\n        this._freq = [];\r\n        this._bias = [];\r\n        this._radPower = [];\r\n        this._network = [];\r\n        for (let i = 0; i < this._networkSize; i++) {\r\n            this._network[i] = new NeuronFloat((i << (networkBiasShift + 8)) / this._networkSize);\r\n            // 1/this._networkSize\r\n            this._freq[i] = NeuQuantFloat._initialBias / this._networkSize;\r\n            this._bias[i] = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Main Learning Loop\r\n     */\r\n    *_learn() {\r\n        let sampleFactor = this._sampleFactor;\r\n        const pointsNumber = this._pointArray.length;\r\n        if (pointsNumber < NeuQuantFloat._minpicturebytes)\r\n            sampleFactor = 1;\r\n        const alphadec = 30 + (sampleFactor - 1) / 3;\r\n        const pointsToSample = pointsNumber / sampleFactor;\r\n        let delta = pointsToSample / NeuQuantFloat._nCycles | 0;\r\n        let alpha = NeuQuantFloat._initAlpha;\r\n        let radius = (this._networkSize >> 3) * NeuQuantFloat._radiusBias;\r\n        let rad = radius >> NeuQuantFloat._radiusBiasShift;\r\n        if (rad <= 1)\r\n            rad = 0;\r\n        for (let i = 0; i < rad; i++) {\r\n            this._radPower[i] = alpha * (((rad * rad - i * i) * NeuQuantFloat._radBias) / (rad * rad));\r\n        }\r\n        let step;\r\n        if (pointsNumber < NeuQuantFloat._minpicturebytes) {\r\n            step = 1;\r\n        }\r\n        else if (pointsNumber % NeuQuantFloat._prime1 !== 0) {\r\n            step = NeuQuantFloat._prime1;\r\n        }\r\n        else if ((pointsNumber % NeuQuantFloat._prime2) !== 0) {\r\n            step = NeuQuantFloat._prime2;\r\n        }\r\n        else if ((pointsNumber % NeuQuantFloat._prime3) !== 0) {\r\n            step = NeuQuantFloat._prime3;\r\n        }\r\n        else {\r\n            step = NeuQuantFloat._prime4;\r\n        }\r\n        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_3__[\"ProgressTracker\"](pointsToSample, 99);\r\n        for (let i = 0, pointIndex = 0; i < pointsToSample;) {\r\n            if (tracker.shouldNotify(i)) {\r\n                yield {\r\n                    progress: tracker.progress,\r\n                };\r\n            }\r\n            const point = this._pointArray[pointIndex];\r\n            const b = point.b << networkBiasShift;\r\n            const g = point.g << networkBiasShift;\r\n            const r = point.r << networkBiasShift;\r\n            const a = point.a << networkBiasShift;\r\n            const neuronIndex = this._contest(b, g, r, a);\r\n            this._alterSingle(alpha, neuronIndex, b, g, r, a);\r\n            if (rad !== 0)\r\n                this._alterNeighbour(rad, neuronIndex, b, g, r, a);\r\n            /* alter neighbours */\r\n            pointIndex += step;\r\n            if (pointIndex >= pointsNumber)\r\n                pointIndex -= pointsNumber;\r\n            i++;\r\n            if (delta === 0)\r\n                delta = 1;\r\n            if (i % delta === 0) {\r\n                alpha -= (alpha / alphadec);\r\n                radius -= (radius / NeuQuantFloat._radiusDecrease);\r\n                rad = radius >> NeuQuantFloat._radiusBiasShift;\r\n                if (rad <= 1)\r\n                    rad = 0;\r\n                for (let j = 0; j < rad; j++)\r\n                    this._radPower[j] = alpha * (((rad * rad - j * j) * NeuQuantFloat._radBias) / (rad * rad));\r\n            }\r\n        }\r\n    }\r\n    _buildPalette() {\r\n        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__[\"Palette\"]();\r\n        this._network.forEach(neuron => {\r\n            palette.add(neuron.toPoint());\r\n        });\r\n        palette.sort();\r\n        return palette;\r\n    }\r\n    /**\r\n     * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]\r\n     */\r\n    _alterNeighbour(rad, i, b, g, r, al) {\r\n        let lo = i - rad;\r\n        if (lo < -1)\r\n            lo = -1;\r\n        let hi = i + rad;\r\n        if (hi > this._networkSize)\r\n            hi = this._networkSize;\r\n        let j = i + 1;\r\n        let k = i - 1;\r\n        let m = 1;\r\n        while (j < hi || k > lo) {\r\n            const a = this._radPower[m++] / NeuQuantFloat._alphaRadBias;\r\n            if (j < hi) {\r\n                const p = this._network[j++];\r\n                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));\r\n            }\r\n            if (k > lo) {\r\n                const p = this._network[k--];\r\n                p.subtract(a * (p.r - r), a * (p.g - g), a * (p.b - b), a * (p.a - al));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Move neuron i towards biased (b,g,r) by factor alpha\r\n     */\r\n    _alterSingle(alpha, i, b, g, r, a) {\r\n        alpha /= NeuQuantFloat._initAlpha;\r\n        /* alter hit neuron */\r\n        const n = this._network[i];\r\n        n.subtract(alpha * (n.r - r), alpha * (n.g - g), alpha * (n.b - b), alpha * (n.a - a));\r\n    }\r\n    /**\r\n     * Search for biased BGR values\r\n     * description:\r\n     *    finds closest neuron (min dist) and updates freq\r\n     *    finds best neuron (min dist-bias) and returns position\r\n     *    for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n     *    bias[i] = _gamma*((1/this._networkSize)-freq[i])\r\n     *\r\n     * Original distance equation:\r\n     *        dist = abs(dR) + abs(dG) + abs(dB)\r\n     */\r\n    _contest(b, g, r, al) {\r\n        const multiplier = (255 * 4) << networkBiasShift;\r\n        let bestd = ~(1 << 31);\r\n        let bestbiasd = bestd;\r\n        let bestpos = -1;\r\n        let bestbiaspos = bestpos;\r\n        for (let i = 0; i < this._networkSize; i++) {\r\n            const n = this._network[i];\r\n            const dist = this._distance.calculateNormalized(n, { r, g, b, a: al }) * multiplier;\r\n            if (dist < bestd) {\r\n                bestd = dist;\r\n                bestpos = i;\r\n            }\r\n            const biasdist = dist - ((this._bias[i]) >> (NeuQuantFloat._initialBiasShift - networkBiasShift));\r\n            if (biasdist < bestbiasd) {\r\n                bestbiasd = biasdist;\r\n                bestbiaspos = i;\r\n            }\r\n            const betafreq = (this._freq[i] >> NeuQuantFloat._betaShift);\r\n            this._freq[i] -= betafreq;\r\n            this._bias[i] += (betafreq << NeuQuantFloat._gammaShift);\r\n        }\r\n        this._freq[bestpos] += NeuQuantFloat._beta;\r\n        this._bias[bestpos] -= NeuQuantFloat._betaGamma;\r\n        return bestbiaspos;\r\n    }\r\n}\r\n/*\r\n four primes near 500 - assume no image has a length so large\r\n that it is divisible by all four primes\r\n */\r\nNeuQuantFloat._prime1 = 499;\r\nNeuQuantFloat._prime2 = 491;\r\nNeuQuantFloat._prime3 = 487;\r\nNeuQuantFloat._prime4 = 503;\r\nNeuQuantFloat._minpicturebytes = NeuQuantFloat._prime4;\r\n// no. of learning cycles\r\nNeuQuantFloat._nCycles = 100;\r\n// defs for freq and bias\r\nNeuQuantFloat._initialBiasShift = 16;\r\n// bias for fractions\r\nNeuQuantFloat._initialBias = (1 << NeuQuantFloat._initialBiasShift);\r\nNeuQuantFloat._gammaShift = 10;\r\n// gamma = 1024\r\n// TODO: why gamma is never used?\r\n// private static _gamma : number     = (1 << NeuQuantFloat._gammaShift);\r\nNeuQuantFloat._betaShift = 10;\r\nNeuQuantFloat._beta = (NeuQuantFloat._initialBias >> NeuQuantFloat._betaShift);\r\n// beta = 1/1024\r\nNeuQuantFloat._betaGamma = (NeuQuantFloat._initialBias << (NeuQuantFloat._gammaShift - NeuQuantFloat._betaShift));\r\n/*\r\n * for 256 cols, radius starts\r\n */\r\nNeuQuantFloat._radiusBiasShift = 6;\r\n// at 32.0 biased by 6 bits\r\nNeuQuantFloat._radiusBias = 1 << NeuQuantFloat._radiusBiasShift;\r\n// and decreases by a factor of 1/30 each cycle\r\nNeuQuantFloat._radiusDecrease = 30;\r\n/* defs for decreasing alpha factor */\r\n// alpha starts at 1.0\r\nNeuQuantFloat._alphaBiasShift = 10;\r\n// biased by 10 bits\r\nNeuQuantFloat._initAlpha = (1 << NeuQuantFloat._alphaBiasShift);\r\n/* radBias and alphaRadBias used for radpower calculation */\r\nNeuQuantFloat._radBiasShift = 8;\r\nNeuQuantFloat._radBias = 1 << NeuQuantFloat._radBiasShift;\r\nNeuQuantFloat._alphaRadBiasShift = NeuQuantFloat._alphaBiasShift + NeuQuantFloat._radBiasShift;\r\nNeuQuantFloat._alphaRadBias = 1 << NeuQuantFloat._alphaRadBiasShift;\r\n//# sourceMappingURL=neuquantFloat.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\":\n/*!*******************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/paletteQuantizer.js ***!\n  \\*******************************************************************/\n/*! exports provided: AbstractPaletteQuantizer */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractPaletteQuantizer\", function() { return AbstractPaletteQuantizer; });\nclass AbstractPaletteQuantizer {\r\n    quantizeSync() {\r\n        for (const value of this.quantize()) {\r\n            if (value.palette) {\r\n                return value.palette;\r\n            }\r\n        }\r\n        throw new Error('unreachable');\r\n    }\r\n}\r\n//# sourceMappingURL=paletteQuantizer.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js\":\n/*!**************************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js ***!\n  \\**************************************************************************/\n/*! exports provided: ColorHistogram */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorHistogram\", function() { return ColorHistogram; });\n/* harmony import */ var _utils_hueStatistics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/hueStatistics */ \"./node_modules/image-q/dist/esm/utils/hueStatistics.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/*\r\n * Copyright (c) 2015, Leon Sorokin\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * ColorHistogram.js - an image quantization lib\r\n */\r\n/**\r\n * @preserve TypeScript port:\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * colorHistogram.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\nclass ColorHistogram {\r\n    constructor(method, colors) {\r\n        // 1 = by global population, 2 = subregion population threshold\r\n        this._method = method;\r\n        // if > 0, enables hues stats and min-color retention per group\r\n        this._minHueCols = colors << 2; // opts.minHueCols || 0;\r\n        // # of highest-frequency colors to start with for palette reduction\r\n        this._initColors = colors << 2;\r\n        // HueStatistics instance\r\n        this._hueStats = new _utils_hueStatistics__WEBPACK_IMPORTED_MODULE_0__[\"HueStatistics\"](ColorHistogram._hueGroups, this._minHueCols);\r\n        this._histogram = Object.create(null); // tslint:disable-line:no-null-keyword\r\n    }\r\n    sample(pointContainer) {\r\n        switch (this._method) {\r\n            case 1:\r\n                this._colorStats1D(pointContainer);\r\n                break;\r\n            case 2:\r\n                this._colorStats2D(pointContainer);\r\n                break;\r\n        }\r\n    }\r\n    getImportanceSortedColorsIDXI32() {\r\n        // TODO: fix typing issue in stableSort func\r\n        const sorted = Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_1__[\"stableSort\"])(Object.keys(this._histogram), (a, b) => this._histogram[b] - this._histogram[a]);\r\n        if (sorted.length === 0) {\r\n            return [];\r\n        }\r\n        let idxi32;\r\n        switch (this._method) {\r\n            case 1:\r\n                const initialColorsLimit = Math.min(sorted.length, this._initColors);\r\n                const last = sorted[initialColorsLimit - 1];\r\n                const freq = this._histogram[last];\r\n                idxi32 = sorted.slice(0, initialColorsLimit);\r\n                // add any cut off colors with same freq as last\r\n                let pos = initialColorsLimit;\r\n                const len = sorted.length;\r\n                while (pos < len && this._histogram[sorted[pos]] === freq) {\r\n                    idxi32.push(sorted[pos++]);\r\n                }\r\n                // inject min huegroup colors\r\n                this._hueStats.injectIntoArray(idxi32);\r\n                break;\r\n            case 2:\r\n                idxi32 = sorted;\r\n                break;\r\n            default:\r\n                // TODO: rethink errors\r\n                throw new Error('Incorrect method');\r\n        }\r\n        // int32-ify values\r\n        return idxi32.map(function (v) {\r\n            return +v;\r\n        });\r\n    }\r\n    // global top-population\r\n    _colorStats1D(pointContainer) {\r\n        const histG = this._histogram;\r\n        const pointArray = pointContainer.getPointArray();\r\n        const len = pointArray.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const col = pointArray[i].uint32;\r\n            // collect hue stats\r\n            this._hueStats.check(col);\r\n            if (col in histG) {\r\n                histG[col]++;\r\n            }\r\n            else {\r\n                histG[col] = 1;\r\n            }\r\n        }\r\n    }\r\n    // population threshold within subregions\r\n    // FIXME: this can over-reduce (few/no colors same?), need a way to keep\r\n    // important colors that dont ever reach local thresholds (gradients?)\r\n    _colorStats2D(pointContainer) {\r\n        const width = pointContainer.getWidth();\r\n        const height = pointContainer.getHeight();\r\n        const pointArray = pointContainer.getPointArray();\r\n        const boxW = ColorHistogram._boxSize[0];\r\n        const boxH = ColorHistogram._boxSize[1];\r\n        const area = boxW * boxH;\r\n        const boxes = this._makeBoxes(width, height, boxW, boxH);\r\n        const histG = this._histogram;\r\n        boxes.forEach(box => {\r\n            let effc = Math.round((box.w * box.h) / area) * ColorHistogram._boxPixels;\r\n            if (effc < 2)\r\n                effc = 2;\r\n            const histL = {};\r\n            this._iterateBox(box, width, (i) => {\r\n                const col = pointArray[i].uint32;\r\n                // collect hue stats\r\n                this._hueStats.check(col);\r\n                if (col in histG) {\r\n                    histG[col]++;\r\n                }\r\n                else if (col in histL) {\r\n                    if (++histL[col] >= effc) {\r\n                        histG[col] = histL[col];\r\n                    }\r\n                }\r\n                else {\r\n                    histL[col] = 1;\r\n                }\r\n            });\r\n        });\r\n        // inject min huegroup colors\r\n        this._hueStats.injectIntoDictionary(histG);\r\n    }\r\n    // iterates @bbox within a parent rect of width @wid; calls @fn, passing index within parent\r\n    _iterateBox(bbox, wid, fn) {\r\n        const b = bbox;\r\n        const i0 = b.y * wid + b.x;\r\n        const i1 = (b.y + b.h - 1) * wid + (b.x + b.w - 1);\r\n        const incr = wid - b.w + 1;\r\n        let cnt = 0;\r\n        let i = i0;\r\n        do {\r\n            fn.call(this, i);\r\n            i += (++cnt % b.w === 0) ? incr : 1;\r\n        } while (i <= i1);\r\n    }\r\n    /**\r\n     *    partitions a rectangle of width x height into\r\n     *    array of boxes stepX x stepY (or less)\r\n     */\r\n    _makeBoxes(width, height, stepX, stepY) {\r\n        const wrem = width % stepX;\r\n        const hrem = height % stepY;\r\n        const xend = width - wrem;\r\n        const yend = height - hrem;\r\n        const boxesArray = [];\r\n        for (let y = 0; y < height; y += stepY) {\r\n            for (let x = 0; x < width; x += stepX) {\r\n                boxesArray.push({ x, y, w: (x === xend ? wrem : stepX), h: (y === yend ? hrem : stepY) });\r\n            }\r\n        }\r\n        return boxesArray;\r\n    }\r\n}\r\nColorHistogram._boxSize = [64, 64];\r\nColorHistogram._boxPixels = 2;\r\nColorHistogram._hueGroups = 10;\r\n//# sourceMappingURL=colorHistogram.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/rgbquant/rgbquant.js\":\n/*!********************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/rgbquant/rgbquant.js ***!\n  \\********************************************************************/\n/*! exports provided: RGBQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBQuant\", function() { return RGBQuant; });\n/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _colorHistogram__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./colorHistogram */ \"./node_modules/image-q/dist/esm/palette/rgbquant/colorHistogram.js\");\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony import */ var _utils_arithmetic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/*\r\n * Copyright (c) 2015, Leon Sorokin\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * RGBQuant.js - an image quantization lib\r\n */\r\n/**\r\n * @preserve TypeScript port:\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * rgbquant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass RemovedColor {\r\n    constructor(index, color, distance) {\r\n        this.index = index;\r\n        this.color = color;\r\n        this.distance = distance;\r\n    }\r\n}\r\n// TODO: make input/output image and input/output palettes with instances of class Point only!\r\nclass RGBQuant extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_3__[\"AbstractPaletteQuantizer\"] {\r\n    constructor(colorDistanceCalculator, colors = 256, method = 2) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        // desired final palette size\r\n        this._colors = colors;\r\n        // histogram to accumulate\r\n        this._histogram = new _colorHistogram__WEBPACK_IMPORTED_MODULE_2__[\"ColorHistogram\"](method, colors);\r\n        this._initialDistance = 0.01;\r\n        this._distanceIncrement = 0.005;\r\n    }\r\n    // gathers histogram info\r\n    sample(image) {\r\n        /*\r\n         var pointArray = image.getPointArray(), max = [0, 0, 0, 0], min = [255, 255, 255, 255];\r\n    \r\n         for (var i = 0, l = pointArray.length; i < l; i++) {\r\n         var color = pointArray[i];\r\n         for (var componentIndex = 0; componentIndex < 4; componentIndex++) {\r\n         if (max[componentIndex] < color.rgba[componentIndex]) max[componentIndex] = color.rgba[componentIndex];\r\n         if (min[componentIndex] > color.rgba[componentIndex]) min[componentIndex] = color.rgba[componentIndex];\r\n         }\r\n         }\r\n         var rd = max[0] - min[0], gd = max[1] - min[1], bd = max[2] - min[2], ad = max[3] - min[3];\r\n         this._distance.setWhitePoint(rd, gd, bd, ad);\r\n    \r\n         this._initialDistance = (Math.sqrt(rd * rd + gd * gd + bd * bd + ad * ad) / Math.sqrt(255 * 255 + 255 * 255 + 255 * 255)) * 0.01;\r\n         */\r\n        this._histogram.sample(image);\r\n    }\r\n    // reduces histogram to palette, remaps & memoizes reduced colors\r\n    *quantize() {\r\n        const idxi32 = this._histogram.getImportanceSortedColorsIDXI32();\r\n        if (idxi32.length === 0) {\r\n            throw new Error('No colors in image');\r\n        }\r\n        yield* this._buildPalette(idxi32);\r\n    }\r\n    // reduces similar colors from an importance-sorted Uint32 rgba array\r\n    *_buildPalette(idxi32) {\r\n        // reduce histogram to create initial palette\r\n        // build full rgb palette\r\n        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__[\"Palette\"]();\r\n        const colorArray = palette.getPointContainer().getPointArray();\r\n        const usageArray = new Array(idxi32.length); // tslint:disable-line:prefer-array-literal\r\n        for (let i = 0; i < idxi32.length; i++) {\r\n            colorArray.push(_utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByUint32(idxi32[i]));\r\n            usageArray[i] = 1;\r\n        }\r\n        const len = colorArray.length;\r\n        const memDist = [];\r\n        let palLen = len;\r\n        let thold = this._initialDistance;\r\n        // palette already at or below desired length\r\n        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_5__[\"ProgressTracker\"](palLen - this._colors, 99);\r\n        while (palLen > this._colors) {\r\n            memDist.length = 0;\r\n            // iterate palette\r\n            for (let i = 0; i < len; i++) {\r\n                if (tracker.shouldNotify(len - palLen)) {\r\n                    yield {\r\n                        progress: tracker.progress,\r\n                    };\r\n                }\r\n                if (usageArray[i] === 0)\r\n                    continue;\r\n                const pxi = colorArray[i];\r\n                // if (!pxi) continue;\r\n                for (let j = i + 1; j < len; j++) {\r\n                    if (usageArray[j] === 0)\r\n                        continue;\r\n                    const pxj = colorArray[j];\r\n                    // if (!pxj) continue;\r\n                    const dist = this._distance.calculateNormalized(pxi, pxj);\r\n                    if (dist < thold) {\r\n                        // store index,rgb,dist\r\n                        memDist.push(new RemovedColor(j, pxj, dist));\r\n                        usageArray[j] = 0;\r\n                        palLen--;\r\n                    }\r\n                }\r\n            }\r\n            // palette reduction pass\r\n            // console.log(\"palette length: \" + palLen);\r\n            // if palette is still much larger than target, increment by larger initDist\r\n            thold += (palLen > this._colors * 3) ? this._initialDistance : this._distanceIncrement;\r\n        }\r\n        // if palette is over-reduced, re-add removed colors with largest distances from last round\r\n        if (palLen < this._colors) {\r\n            // sort descending\r\n            Object(_utils_arithmetic__WEBPACK_IMPORTED_MODULE_4__[\"stableSort\"])(memDist, function (a, b) {\r\n                return b.distance - a.distance;\r\n            });\r\n            let k = 0;\r\n            while (palLen < this._colors && k < memDist.length) {\r\n                const removedColor = memDist[k];\r\n                // re-inject rgb into final palette\r\n                usageArray[removedColor.index] = 1;\r\n                palLen++;\r\n                k++;\r\n            }\r\n        }\r\n        let colors = colorArray.length;\r\n        for (let colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {\r\n            if (usageArray[colorIndex] === 0) {\r\n                if (colorIndex !== colors - 1) {\r\n                    colorArray[colorIndex] = colorArray[colors - 1];\r\n                }\r\n                --colors;\r\n            }\r\n        }\r\n        colorArray.length = colors;\r\n        palette.sort();\r\n        yield {\r\n            palette,\r\n            progress: 100,\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=rgbquant.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/palette/wu/wuQuant.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/palette/wu/wuQuant.js ***!\n  \\*************************************************************/\n/*! exports provided: WuColorCube, WuQuant */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WuColorCube\", function() { return WuColorCube; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WuQuant\", function() { return WuQuant; });\n/* harmony import */ var _utils_palette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony import */ var _utils_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony import */ var _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../paletteQuantizer */ \"./node_modules/image-q/dist/esm/palette/paletteQuantizer.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ \"./node_modules/image-q/dist/esm/utils/index.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * wuQuant.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\nfunction createArray1D(dimension1) {\r\n    const a = [];\r\n    for (let k = 0; k < dimension1; k++) {\r\n        a[k] = 0;\r\n    }\r\n    return a;\r\n}\r\nfunction createArray4D(dimension1, dimension2, dimension3, dimension4) {\r\n    const a = new Array(dimension1);\r\n    for (let i = 0; i < dimension1; i++) {\r\n        a[i] = new Array(dimension2);\r\n        for (let j = 0; j < dimension2; j++) {\r\n            a[i][j] = new Array(dimension3);\r\n            for (let k = 0; k < dimension3; k++) {\r\n                a[i][j][k] = new Array(dimension4);\r\n                for (let l = 0; l < dimension4; l++) {\r\n                    a[i][j][k][l] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return a;\r\n}\r\nfunction createArray3D(dimension1, dimension2, dimension3) {\r\n    const a = new Array(dimension1);\r\n    for (let i = 0; i < dimension1; i++) {\r\n        a[i] = new Array(dimension2);\r\n        for (let j = 0; j < dimension2; j++) {\r\n            a[i][j] = new Array(dimension3);\r\n            for (let k = 0; k < dimension3; k++) {\r\n                a[i][j][k] = 0;\r\n            }\r\n        }\r\n    }\r\n    return a;\r\n}\r\nfunction fillArray3D(a, dimension1, dimension2, dimension3, value) {\r\n    for (let i = 0; i < dimension1; i++) {\r\n        a[i] = [];\r\n        for (let j = 0; j < dimension2; j++) {\r\n            a[i][j] = [];\r\n            for (let k = 0; k < dimension3; k++) {\r\n                a[i][j][k] = value;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction fillArray1D(a, dimension1, value) {\r\n    for (let i = 0; i < dimension1; i++) {\r\n        a[i] = value;\r\n    }\r\n}\r\nclass WuColorCube {\r\n}\r\nclass WuQuant extends _paletteQuantizer__WEBPACK_IMPORTED_MODULE_2__[\"AbstractPaletteQuantizer\"] {\r\n    constructor(colorDistanceCalculator, colors = 256, significantBitsPerChannel = 5) {\r\n        super();\r\n        this._distance = colorDistanceCalculator;\r\n        this._setQuality(significantBitsPerChannel);\r\n        this._initialize(colors);\r\n    }\r\n    sample(image) {\r\n        const pointArray = image.getPointArray();\r\n        for (let i = 0, l = pointArray.length; i < l; i++) {\r\n            this._addColor(pointArray[i]);\r\n        }\r\n        this._pixels = this._pixels.concat(pointArray);\r\n    }\r\n    *quantize() {\r\n        yield* this._preparePalette();\r\n        const palette = new _utils_palette__WEBPACK_IMPORTED_MODULE_0__[\"Palette\"]();\r\n        // generates palette\r\n        for (let paletteIndex = 0; paletteIndex < this._colors; paletteIndex++) {\r\n            if (this._sums[paletteIndex] > 0) {\r\n                const sum = this._sums[paletteIndex];\r\n                const r = this._reds[paletteIndex] / sum;\r\n                const g = this._greens[paletteIndex] / sum;\r\n                const b = this._blues[paletteIndex] / sum;\r\n                const a = this._alphas[paletteIndex] / sum;\r\n                const color = _utils_point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].createByRGBA(r | 0, g | 0, b | 0, a | 0);\r\n                palette.add(color);\r\n            }\r\n        }\r\n        palette.sort();\r\n        yield {\r\n            palette,\r\n            progress: 100,\r\n        };\r\n    }\r\n    *_preparePalette() {\r\n        // preprocess the colors\r\n        yield* this._calculateMoments();\r\n        let next = 0;\r\n        const volumeVariance = createArray1D(this._colors);\r\n        // processes the cubes\r\n        for (let cubeIndex = 1; cubeIndex < this._colors; ++cubeIndex) {\r\n            // if cut is possible; make it\r\n            if (this._cut(this._cubes[next], this._cubes[cubeIndex])) {\r\n                volumeVariance[next] = this._cubes[next].volume > 1 ? this._calculateVariance(this._cubes[next]) : 0.0;\r\n                volumeVariance[cubeIndex] = this._cubes[cubeIndex].volume > 1 ? this._calculateVariance(this._cubes[cubeIndex]) : 0.0;\r\n            }\r\n            else {\r\n                // the cut was not possible, revert the index\r\n                volumeVariance[next] = 0.0;\r\n                cubeIndex--;\r\n            }\r\n            next = 0;\r\n            let temp = volumeVariance[0];\r\n            for (let index = 1; index <= cubeIndex; ++index) {\r\n                if (volumeVariance[index] > temp) {\r\n                    temp = volumeVariance[index];\r\n                    next = index;\r\n                }\r\n            }\r\n            if (temp <= 0.0) {\r\n                this._colors = cubeIndex + 1;\r\n                break;\r\n            }\r\n        }\r\n        const lookupRed = [];\r\n        const lookupGreen = [];\r\n        const lookupBlue = [];\r\n        const lookupAlpha = [];\r\n        // precalculates lookup tables\r\n        for (let k = 0; k < this._colors; ++k) {\r\n            const weight = WuQuant._volume(this._cubes[k], this._weights);\r\n            if (weight > 0) {\r\n                lookupRed[k] = (WuQuant._volume(this._cubes[k], this._momentsRed) / weight) | 0;\r\n                lookupGreen[k] = (WuQuant._volume(this._cubes[k], this._momentsGreen) / weight) | 0;\r\n                lookupBlue[k] = (WuQuant._volume(this._cubes[k], this._momentsBlue) / weight) | 0;\r\n                lookupAlpha[k] = (WuQuant._volume(this._cubes[k], this._momentsAlpha) / weight) | 0;\r\n            }\r\n            else {\r\n                lookupRed[k] = 0;\r\n                lookupGreen[k] = 0;\r\n                lookupBlue[k] = 0;\r\n                lookupAlpha[k] = 0;\r\n            }\r\n        }\r\n        this._reds = createArray1D(this._colors + 1);\r\n        this._greens = createArray1D(this._colors + 1);\r\n        this._blues = createArray1D(this._colors + 1);\r\n        this._alphas = createArray1D(this._colors + 1);\r\n        this._sums = createArray1D(this._colors + 1);\r\n        // scans and adds colors\r\n        for (let index = 0, l = this._pixels.length; index < l; index++) {\r\n            const color = this._pixels[index];\r\n            const match = -1;\r\n            let bestMatch = match;\r\n            let bestDistance = Number.MAX_VALUE;\r\n            for (let lookup = 0; lookup < this._colors; lookup++) {\r\n                const foundRed = lookupRed[lookup];\r\n                const foundGreen = lookupGreen[lookup];\r\n                const foundBlue = lookupBlue[lookup];\r\n                const foundAlpha = lookupAlpha[lookup];\r\n                const distance = this._distance.calculateRaw(foundRed, foundGreen, foundBlue, foundAlpha, color.r, color.g, color.b, color.a);\r\n                if (distance < bestDistance) {\r\n                    bestDistance = distance;\r\n                    bestMatch = lookup;\r\n                }\r\n            }\r\n            this._reds[bestMatch] += color.r;\r\n            this._greens[bestMatch] += color.g;\r\n            this._blues[bestMatch] += color.b;\r\n            this._alphas[bestMatch] += color.a;\r\n            this._sums[bestMatch]++;\r\n        }\r\n    }\r\n    _addColor(color) {\r\n        const bitsToRemove = 8 - this._significantBitsPerChannel;\r\n        const indexRed = (color.r >> bitsToRemove) + 1;\r\n        const indexGreen = (color.g >> bitsToRemove) + 1;\r\n        const indexBlue = (color.b >> bitsToRemove) + 1;\r\n        const indexAlpha = (color.a >> bitsToRemove) + 1;\r\n        // if(color.a > 10) {\r\n        this._weights[indexAlpha][indexRed][indexGreen][indexBlue]++;\r\n        this._momentsRed[indexAlpha][indexRed][indexGreen][indexBlue] += color.r;\r\n        this._momentsGreen[indexAlpha][indexRed][indexGreen][indexBlue] += color.g;\r\n        this._momentsBlue[indexAlpha][indexRed][indexGreen][indexBlue] += color.b;\r\n        this._momentsAlpha[indexAlpha][indexRed][indexGreen][indexBlue] += color.a;\r\n        this._moments[indexAlpha][indexRed][indexGreen][indexBlue] += this._table[color.r] + this._table[color.g] + this._table[color.b] + this._table[color.a];\r\n        // }\r\n    }\r\n    /**\r\n     * Converts the histogram to a series of _moments.\r\n     */\r\n    *_calculateMoments() {\r\n        const area = [];\r\n        const areaRed = [];\r\n        const areaGreen = [];\r\n        const areaBlue = [];\r\n        const areaAlpha = [];\r\n        const area2 = [];\r\n        const xarea = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xareaRed = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xareaGreen = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xareaBlue = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xareaAlpha = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        const xarea2 = createArray3D(this._sideSize, this._sideSize, this._sideSize);\r\n        let trackerProgress = 0;\r\n        const tracker = new _utils__WEBPACK_IMPORTED_MODULE_3__[\"ProgressTracker\"](this._alphaMaxSideIndex * this._maxSideIndex, 99);\r\n        for (let alphaIndex = 1; alphaIndex <= this._alphaMaxSideIndex; ++alphaIndex) {\r\n            fillArray3D(xarea, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xareaRed, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xareaGreen, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xareaBlue, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xareaAlpha, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            fillArray3D(xarea2, this._sideSize, this._sideSize, this._sideSize, 0);\r\n            for (let redIndex = 1; redIndex <= this._maxSideIndex; ++redIndex, ++trackerProgress) {\r\n                if (tracker.shouldNotify(trackerProgress)) {\r\n                    yield {\r\n                        progress: tracker.progress,\r\n                    };\r\n                }\r\n                fillArray1D(area, this._sideSize, 0);\r\n                fillArray1D(areaRed, this._sideSize, 0);\r\n                fillArray1D(areaGreen, this._sideSize, 0);\r\n                fillArray1D(areaBlue, this._sideSize, 0);\r\n                fillArray1D(areaAlpha, this._sideSize, 0);\r\n                fillArray1D(area2, this._sideSize, 0);\r\n                for (let greenIndex = 1; greenIndex <= this._maxSideIndex; ++greenIndex) {\r\n                    let line = 0;\r\n                    let lineRed = 0;\r\n                    let lineGreen = 0;\r\n                    let lineBlue = 0;\r\n                    let lineAlpha = 0;\r\n                    let line2 = 0.0;\r\n                    for (let blueIndex = 1; blueIndex <= this._maxSideIndex; ++blueIndex) {\r\n                        line += this._weights[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        lineRed += this._momentsRed[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        lineGreen += this._momentsGreen[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        lineBlue += this._momentsBlue[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        lineAlpha += this._momentsAlpha[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        line2 += this._moments[alphaIndex][redIndex][greenIndex][blueIndex];\r\n                        area[blueIndex] += line;\r\n                        areaRed[blueIndex] += lineRed;\r\n                        areaGreen[blueIndex] += lineGreen;\r\n                        areaBlue[blueIndex] += lineBlue;\r\n                        areaAlpha[blueIndex] += lineAlpha;\r\n                        area2[blueIndex] += line2;\r\n                        xarea[redIndex][greenIndex][blueIndex] = xarea[redIndex - 1][greenIndex][blueIndex] + area[blueIndex];\r\n                        xareaRed[redIndex][greenIndex][blueIndex] = xareaRed[redIndex - 1][greenIndex][blueIndex] + areaRed[blueIndex];\r\n                        xareaGreen[redIndex][greenIndex][blueIndex] = xareaGreen[redIndex - 1][greenIndex][blueIndex] + areaGreen[blueIndex];\r\n                        xareaBlue[redIndex][greenIndex][blueIndex] = xareaBlue[redIndex - 1][greenIndex][blueIndex] + areaBlue[blueIndex];\r\n                        xareaAlpha[redIndex][greenIndex][blueIndex] = xareaAlpha[redIndex - 1][greenIndex][blueIndex] + areaAlpha[blueIndex];\r\n                        xarea2[redIndex][greenIndex][blueIndex] = xarea2[redIndex - 1][greenIndex][blueIndex] + area2[blueIndex];\r\n                        this._weights[alphaIndex][redIndex][greenIndex][blueIndex] = this._weights[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xarea[redIndex][greenIndex][blueIndex];\r\n                        this._momentsRed[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsRed[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaRed[redIndex][greenIndex][blueIndex];\r\n                        this._momentsGreen[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsGreen[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaGreen[redIndex][greenIndex][blueIndex];\r\n                        this._momentsBlue[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsBlue[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaBlue[redIndex][greenIndex][blueIndex];\r\n                        this._momentsAlpha[alphaIndex][redIndex][greenIndex][blueIndex] = this._momentsAlpha[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xareaAlpha[redIndex][greenIndex][blueIndex];\r\n                        this._moments[alphaIndex][redIndex][greenIndex][blueIndex] = this._moments[alphaIndex - 1][redIndex][greenIndex][blueIndex] + xarea2[redIndex][greenIndex][blueIndex];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Computes the volume of the cube in a specific moment.\r\n     */\r\n    static _volumeFloat(cube, moment) {\r\n        return (moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] -\r\n            moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] -\r\n            moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] +\r\n            moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum] -\r\n            moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] +\r\n            moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] +\r\n            moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] -\r\n            moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n            (moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] -\r\n                moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] -\r\n                moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] -\r\n                moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +\r\n                moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +\r\n                moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum] -\r\n                moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n    }\r\n    /**\r\n     * Computes the volume of the cube in a specific moment.\r\n     */\r\n    static _volume(cube, moment) {\r\n        return WuQuant._volumeFloat(cube, moment) | 0;\r\n    }\r\n    /**\r\n     * Splits the cube in given position][and color direction.\r\n     */\r\n    static _top(cube, direction, position, moment) {\r\n        let result;\r\n        switch (direction) {\r\n            case WuQuant._alpha:\r\n                result = (moment[position][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] -\r\n                    moment[position][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] -\r\n                    moment[position][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] +\r\n                    moment[position][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (moment[position][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[position][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] -\r\n                        moment[position][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[position][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n                break;\r\n            case WuQuant._red:\r\n                result = (moment[cube.alphaMaximum][position][cube.greenMaximum][cube.blueMaximum] -\r\n                    moment[cube.alphaMaximum][position][cube.greenMinimum][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][position][cube.greenMaximum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][position][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (moment[cube.alphaMaximum][position][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[cube.alphaMaximum][position][cube.greenMinimum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][position][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][position][cube.greenMinimum][cube.blueMinimum]);\r\n                break;\r\n            case WuQuant._green:\r\n                result = (moment[cube.alphaMaximum][cube.redMaximum][position][cube.blueMaximum] -\r\n                    moment[cube.alphaMaximum][cube.redMinimum][position][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][cube.redMaximum][position][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMinimum][position][cube.blueMaximum]) -\r\n                    (moment[cube.alphaMaximum][cube.redMaximum][position][cube.blueMinimum] -\r\n                        moment[cube.alphaMaximum][cube.redMinimum][position][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMaximum][position][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][position][cube.blueMinimum]);\r\n                break;\r\n            case WuQuant._blue:\r\n                result = (moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][position] -\r\n                    moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][position] -\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][position] +\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][position]) -\r\n                    (moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][position] -\r\n                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][position] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][position] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][position]);\r\n                break;\r\n            default:\r\n                throw new Error('impossible');\r\n        }\r\n        return result | 0;\r\n    }\r\n    /**\r\n     * Splits the cube in a given color direction at its minimum.\r\n     */\r\n    static _bottom(cube, direction, moment) {\r\n        switch (direction) {\r\n            case WuQuant._alpha:\r\n                return (-moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (-moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n            case WuQuant._red:\r\n                return (-moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] +\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (-moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n            case WuQuant._green:\r\n                return (-moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] +\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum] +\r\n                    moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMaximum] -\r\n                    moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMaximum]) -\r\n                    (-moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n            case WuQuant._blue:\r\n                return (-moment[cube.alphaMaximum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] +\r\n                    moment[cube.alphaMaximum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -\r\n                    moment[cube.alphaMaximum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]) -\r\n                    (-moment[cube.alphaMinimum][cube.redMaximum][cube.greenMaximum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMaximum][cube.greenMinimum][cube.blueMinimum] +\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMaximum][cube.blueMinimum] -\r\n                        moment[cube.alphaMinimum][cube.redMinimum][cube.greenMinimum][cube.blueMinimum]);\r\n            default:\r\n                // TODO: why here is return 0, and in this._top there is no default at all (now it is throw error)?\r\n                return 0;\r\n        }\r\n    }\r\n    /**\r\n     * Calculates statistical variance for a given cube.\r\n     */\r\n    _calculateVariance(cube) {\r\n        const volumeRed = WuQuant._volume(cube, this._momentsRed);\r\n        const volumeGreen = WuQuant._volume(cube, this._momentsGreen);\r\n        const volumeBlue = WuQuant._volume(cube, this._momentsBlue);\r\n        const volumeAlpha = WuQuant._volume(cube, this._momentsAlpha);\r\n        const volumeMoment = WuQuant._volumeFloat(cube, this._moments);\r\n        const volumeWeight = WuQuant._volume(cube, this._weights);\r\n        const distance = volumeRed * volumeRed + volumeGreen * volumeGreen + volumeBlue * volumeBlue + volumeAlpha * volumeAlpha;\r\n        return volumeMoment - (distance / volumeWeight);\r\n    }\r\n    /**\r\n     * Finds the optimal (maximal) position for the cut.\r\n     */\r\n    _maximize(cube, direction, first, last, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight) {\r\n        const bottomRed = WuQuant._bottom(cube, direction, this._momentsRed) | 0;\r\n        const bottomGreen = WuQuant._bottom(cube, direction, this._momentsGreen) | 0;\r\n        const bottomBlue = WuQuant._bottom(cube, direction, this._momentsBlue) | 0;\r\n        const bottomAlpha = WuQuant._bottom(cube, direction, this._momentsAlpha) | 0;\r\n        const bottomWeight = WuQuant._bottom(cube, direction, this._weights) | 0;\r\n        let result = 0.0;\r\n        let cutPosition = -1;\r\n        for (let position = first; position < last; ++position) {\r\n            // determines the cube cut at a certain position\r\n            let halfRed = bottomRed + WuQuant._top(cube, direction, position, this._momentsRed);\r\n            let halfGreen = bottomGreen + WuQuant._top(cube, direction, position, this._momentsGreen);\r\n            let halfBlue = bottomBlue + WuQuant._top(cube, direction, position, this._momentsBlue);\r\n            let halfAlpha = bottomAlpha + WuQuant._top(cube, direction, position, this._momentsAlpha);\r\n            let halfWeight = bottomWeight + WuQuant._top(cube, direction, position, this._weights);\r\n            // the cube cannot be cut at bottom (this would lead to empty cube)\r\n            if (halfWeight !== 0) {\r\n                let halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;\r\n                let temp = halfDistance / halfWeight;\r\n                halfRed = wholeRed - halfRed;\r\n                halfGreen = wholeGreen - halfGreen;\r\n                halfBlue = wholeBlue - halfBlue;\r\n                halfAlpha = wholeAlpha - halfAlpha;\r\n                halfWeight = wholeWeight - halfWeight;\r\n                if (halfWeight !== 0) {\r\n                    halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;\r\n                    temp += halfDistance / halfWeight;\r\n                    if (temp > result) {\r\n                        result = temp;\r\n                        cutPosition = position;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return { max: result, position: cutPosition };\r\n    }\r\n    // Cuts a cube with another one.\r\n    _cut(first, second) {\r\n        let direction;\r\n        const wholeRed = WuQuant._volume(first, this._momentsRed);\r\n        const wholeGreen = WuQuant._volume(first, this._momentsGreen);\r\n        const wholeBlue = WuQuant._volume(first, this._momentsBlue);\r\n        const wholeAlpha = WuQuant._volume(first, this._momentsAlpha);\r\n        const wholeWeight = WuQuant._volume(first, this._weights);\r\n        const red = this._maximize(first, WuQuant._red, first.redMinimum + 1, first.redMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\r\n        const green = this._maximize(first, WuQuant._green, first.greenMinimum + 1, first.greenMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\r\n        const blue = this._maximize(first, WuQuant._blue, first.blueMinimum + 1, first.blueMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\r\n        const alpha = this._maximize(first, WuQuant._alpha, first.alphaMinimum + 1, first.alphaMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\r\n        if (alpha.max >= red.max && alpha.max >= green.max && alpha.max >= blue.max) {\r\n            direction = WuQuant._alpha;\r\n            // cannot split empty cube\r\n            if (alpha.position < 0)\r\n                return false;\r\n        }\r\n        else {\r\n            if (red.max >= alpha.max && red.max >= green.max && red.max >= blue.max) {\r\n                direction = WuQuant._red;\r\n            }\r\n            else if (green.max >= alpha.max && green.max >= red.max && green.max >= blue.max) {\r\n                direction = WuQuant._green;\r\n            }\r\n            else {\r\n                direction = WuQuant._blue;\r\n            }\r\n        }\r\n        second.redMaximum = first.redMaximum;\r\n        second.greenMaximum = first.greenMaximum;\r\n        second.blueMaximum = first.blueMaximum;\r\n        second.alphaMaximum = first.alphaMaximum;\r\n        // cuts in a certain direction\r\n        switch (direction) {\r\n            case WuQuant._red:\r\n                second.redMinimum = first.redMaximum = red.position;\r\n                second.greenMinimum = first.greenMinimum;\r\n                second.blueMinimum = first.blueMinimum;\r\n                second.alphaMinimum = first.alphaMinimum;\r\n                break;\r\n            case WuQuant._green:\r\n                second.greenMinimum = first.greenMaximum = green.position;\r\n                second.redMinimum = first.redMinimum;\r\n                second.blueMinimum = first.blueMinimum;\r\n                second.alphaMinimum = first.alphaMinimum;\r\n                break;\r\n            case WuQuant._blue:\r\n                second.blueMinimum = first.blueMaximum = blue.position;\r\n                second.redMinimum = first.redMinimum;\r\n                second.greenMinimum = first.greenMinimum;\r\n                second.alphaMinimum = first.alphaMinimum;\r\n                break;\r\n            case WuQuant._alpha:\r\n                second.alphaMinimum = first.alphaMaximum = alpha.position;\r\n                second.blueMinimum = first.blueMinimum;\r\n                second.redMinimum = first.redMinimum;\r\n                second.greenMinimum = first.greenMinimum;\r\n                break;\r\n        }\r\n        // determines the volumes after cut\r\n        first.volume = (first.redMaximum - first.redMinimum) * (first.greenMaximum - first.greenMinimum) * (first.blueMaximum - first.blueMinimum) * (first.alphaMaximum - first.alphaMinimum);\r\n        second.volume = (second.redMaximum - second.redMinimum) * (second.greenMaximum - second.greenMinimum) * (second.blueMaximum - second.blueMinimum) * (second.alphaMaximum - second.alphaMinimum);\r\n        // the cut was successful\r\n        return true;\r\n    }\r\n    _initialize(colors) {\r\n        this._colors = colors;\r\n        // creates all the _cubes\r\n        this._cubes = [];\r\n        // initializes all the _cubes\r\n        for (let cubeIndex = 0; cubeIndex < colors; cubeIndex++) {\r\n            this._cubes[cubeIndex] = new WuColorCube();\r\n        }\r\n        // resets the reference minimums\r\n        this._cubes[0].redMinimum = 0;\r\n        this._cubes[0].greenMinimum = 0;\r\n        this._cubes[0].blueMinimum = 0;\r\n        this._cubes[0].alphaMinimum = 0;\r\n        // resets the reference maximums\r\n        this._cubes[0].redMaximum = this._maxSideIndex;\r\n        this._cubes[0].greenMaximum = this._maxSideIndex;\r\n        this._cubes[0].blueMaximum = this._maxSideIndex;\r\n        this._cubes[0].alphaMaximum = this._alphaMaxSideIndex;\r\n        this._weights = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._momentsRed = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._momentsGreen = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._momentsBlue = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._momentsAlpha = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._moments = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\r\n        this._table = [];\r\n        for (let tableIndex = 0; tableIndex < 256; ++tableIndex) {\r\n            this._table[tableIndex] = tableIndex * tableIndex;\r\n        }\r\n        this._pixels = [];\r\n    }\r\n    _setQuality(significantBitsPerChannel = 5) {\r\n        this._significantBitsPerChannel = significantBitsPerChannel;\r\n        this._maxSideIndex = 1 << this._significantBitsPerChannel;\r\n        this._alphaMaxSideIndex = this._maxSideIndex;\r\n        this._sideSize = this._maxSideIndex + 1;\r\n        this._alphaSideSize = this._alphaMaxSideIndex + 1;\r\n    }\r\n}\r\nWuQuant._alpha = 3;\r\nWuQuant._red = 2;\r\nWuQuant._green = 1;\r\nWuQuant._blue = 0;\r\n//# sourceMappingURL=wuQuant.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/quality/index.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/quality/index.js ***!\n  \\********************************************************/\n/*! exports provided: ssim */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ssim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssim */ \"./node_modules/image-q/dist/esm/quality/ssim.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ssim\", function() { return _ssim__WEBPACK_IMPORTED_MODULE_0__[\"ssim\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/quality/ssim.js\":\n/*!*******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/quality/ssim.js ***!\n  \\*******************************************************/\n/*! exports provided: ssim */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ssim\", function() { return ssim; });\n/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n\r\n// based on https://github.com/rhys-e/structural-similarity\r\n// http://en.wikipedia.org/wiki/Structural_similarity\r\nconst K1 = 0.01; // tslint:disable-line:naming-convention\r\nconst K2 = 0.03; // tslint:disable-line:naming-convention\r\nfunction ssim(image1, image2) {\r\n    if (image1.getHeight() !== image2.getHeight() || image1.getWidth() !== image2.getWidth()) {\r\n        throw new Error('Images have different sizes!');\r\n    }\r\n    const bitsPerComponent = 8;\r\n    const L = (1 << bitsPerComponent) - 1; // tslint:disable-line:naming-convention\r\n    const c1 = Math.pow((K1 * L), 2);\r\n    const c2 = Math.pow((K2 * L), 2);\r\n    let numWindows = 0;\r\n    let mssim = 0.0;\r\n    // calculate ssim for each window\r\n    iterate(image1, image2, (lumaValues1, lumaValues2, averageLumaValue1, averageLumaValue2) => {\r\n        // calculate variance and covariance\r\n        let sigxy = 0.0;\r\n        let sigsqx = 0.0;\r\n        let sigsqy = 0.0;\r\n        for (let i = 0; i < lumaValues1.length; i++) {\r\n            sigsqx += Math.pow((lumaValues1[i] - averageLumaValue1), 2);\r\n            sigsqy += Math.pow((lumaValues2[i] - averageLumaValue2), 2);\r\n            sigxy += (lumaValues1[i] - averageLumaValue1) * (lumaValues2[i] - averageLumaValue2);\r\n        }\r\n        const numPixelsInWin = lumaValues1.length - 1;\r\n        sigsqx /= numPixelsInWin;\r\n        sigsqy /= numPixelsInWin;\r\n        sigxy /= numPixelsInWin;\r\n        // perform ssim calculation on window\r\n        const numerator = (2 * averageLumaValue1 * averageLumaValue2 + c1) * (2 * sigxy + c2);\r\n        const denominator = (Math.pow(averageLumaValue1, 2) + Math.pow(averageLumaValue2, 2) + c1) * (sigsqx + sigsqy + c2);\r\n        const ssim = numerator / denominator;\r\n        mssim += ssim;\r\n        numWindows++;\r\n    });\r\n    return mssim / numWindows;\r\n}\r\nfunction iterate(image1, image2, callback) {\r\n    const windowSize = 8;\r\n    const width = image1.getWidth();\r\n    const height = image1.getHeight();\r\n    for (let y = 0; y < height; y += windowSize) {\r\n        for (let x = 0; x < width; x += windowSize) {\r\n            // avoid out-of-width/height\r\n            const windowWidth = Math.min(windowSize, width - x);\r\n            const windowHeight = Math.min(windowSize, height - y);\r\n            const lumaValues1 = calculateLumaValuesForWindow(image1, x, y, windowWidth, windowHeight);\r\n            const lumaValues2 = calculateLumaValuesForWindow(image2, x, y, windowWidth, windowHeight);\r\n            const averageLuma1 = calculateAverageLuma(lumaValues1);\r\n            const averageLuma2 = calculateAverageLuma(lumaValues2);\r\n            callback(lumaValues1, lumaValues2, averageLuma1, averageLuma2);\r\n        }\r\n    }\r\n}\r\nfunction calculateLumaValuesForWindow(image, x, y, width, height) {\r\n    const pointArray = image.getPointArray();\r\n    const lumaValues = [];\r\n    let counter = 0;\r\n    for (let j = y; j < y + height; j++) {\r\n        const offset = j * image.getWidth();\r\n        for (let i = x; i < x + width; i++) {\r\n            const point = pointArray[offset + i];\r\n            lumaValues[counter] = point.r * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].RED + point.g * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].GREEN + point.b * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].BLUE;\r\n            counter++;\r\n        }\r\n    }\r\n    return lumaValues;\r\n}\r\nfunction calculateAverageLuma(lumaValues) {\r\n    let sumLuma = 0.0;\r\n    for (const luma of lumaValues) {\r\n        sumLuma += luma;\r\n    }\r\n    return sumLuma / lumaValues.length;\r\n}\r\n//# sourceMappingURL=ssim.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/arithmetic.js ***!\n  \\***********************************************************/\n/*! exports provided: degrees2radians, max3, min3, intInRange, inRange0to255Rounded, inRange0to255, stableSort */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"degrees2radians\", function() { return degrees2radians; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max3\", function() { return max3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min3\", function() { return min3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intInRange\", function() { return intInRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inRange0to255Rounded\", function() { return inRange0to255Rounded; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inRange0to255\", function() { return inRange0to255; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stableSort\", function() { return stableSort; });\nfunction degrees2radians(n) {\r\n    return n * (Math.PI / 180);\r\n}\r\nfunction max3(a, b, c) {\r\n    let m = a;\r\n    if (m < b)\r\n        m = b;\r\n    if (m < c)\r\n        m = c;\r\n    return m;\r\n}\r\nfunction min3(a, b, c) {\r\n    let m = a;\r\n    if (m > b)\r\n        m = b;\r\n    if (m > c)\r\n        m = c;\r\n    return m;\r\n}\r\nfunction intInRange(value, low, high) {\r\n    if (value > high)\r\n        value = high;\r\n    if (value < low)\r\n        value = low;\r\n    return value | 0;\r\n}\r\nfunction inRange0to255Rounded(n) {\r\n    n = Math.round(n);\r\n    if (n > 255)\r\n        n = 255;\r\n    else if (n < 0)\r\n        n = 0;\r\n    return n;\r\n}\r\nfunction inRange0to255(n) {\r\n    if (n > 255)\r\n        n = 255;\r\n    else if (n < 0)\r\n        n = 0;\r\n    return n;\r\n}\r\nfunction stableSort(arrayToSort, callback) {\r\n    const type = typeof arrayToSort[0];\r\n    let sorted;\r\n    if (type === 'number' || type === 'string') {\r\n        const ord = Object.create(null); // tslint:disable-line:no-null-keyword\r\n        for (let i = 0, l = arrayToSort.length; i < l; i++) {\r\n            const val = arrayToSort[i]; // tslint:disable-line:no-any\r\n            if (ord[val] || ord[val] === 0)\r\n                continue;\r\n            ord[val] = i;\r\n        }\r\n        sorted = arrayToSort.sort(function (a, b) {\r\n            return callback(a, b) || ord[a] - ord[b];\r\n        });\r\n    }\r\n    else {\r\n        const ord2 = arrayToSort.slice(0);\r\n        sorted = arrayToSort.sort(function (a, b) {\r\n            return callback(a, b) || ord2.indexOf(a) - ord2.indexOf(b);\r\n        });\r\n    }\r\n    return sorted;\r\n}\r\n//# sourceMappingURL=arithmetic.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/hueStatistics.js\":\n/*!**************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/hueStatistics.js ***!\n  \\**************************************************************/\n/*! exports provided: HueStatistics */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HueStatistics\", function() { return HueStatistics; });\n/* harmony import */ var _conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../conversion/rgb2hsl */ \"./node_modules/image-q/dist/esm/conversion/rgb2hsl.js\");\n/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * hueStatistics.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\nclass HueGroup {\r\n    constructor() {\r\n        this.num = 0;\r\n        this.cols = [];\r\n    }\r\n}\r\nclass HueStatistics {\r\n    constructor(numGroups, minCols) {\r\n        this._numGroups = numGroups;\r\n        this._minCols = minCols;\r\n        this._stats = [];\r\n        for (let i = 0; i <= numGroups; i++) {\r\n            this._stats[i] = new HueGroup();\r\n        }\r\n        this._groupsFull = 0;\r\n    }\r\n    check(i32) {\r\n        if (this._groupsFull === this._numGroups + 1) {\r\n            this.check = function () {\r\n            };\r\n        }\r\n        const r = (i32 & 0xff);\r\n        const g = (i32 >>> 8) & 0xff;\r\n        const b = (i32 >>> 16) & 0xff;\r\n        const hg = (r === g && g === b) ? 0 : 1 + Object(_palette__WEBPACK_IMPORTED_MODULE_1__[\"hueGroup\"])(Object(_conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_0__[\"rgb2hsl\"])(r, g, b).h, this._numGroups);\r\n        const gr = this._stats[hg];\r\n        const min = this._minCols;\r\n        gr.num++;\r\n        if (gr.num > min) {\r\n            return;\r\n        }\r\n        if (gr.num === min) {\r\n            this._groupsFull++;\r\n        }\r\n        if (gr.num <= min) {\r\n            this._stats[hg].cols.push(i32);\r\n        }\r\n    }\r\n    injectIntoDictionary(histG) {\r\n        for (let i = 0; i <= this._numGroups; i++) {\r\n            if (this._stats[i].num <= this._minCols) {\r\n                this._stats[i].cols.forEach((col) => {\r\n                    if (!histG[col]) {\r\n                        histG[col] = 1;\r\n                    }\r\n                    else {\r\n                        histG[col]++;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    injectIntoArray(histG) {\r\n        for (let i = 0; i <= this._numGroups; i++) {\r\n            if (this._stats[i].num <= this._minCols) {\r\n                this._stats[i].cols.forEach((col) => {\r\n                    if (histG.indexOf(col) === -1) {\r\n                        histG.push(col);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=hueStatistics.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/index.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/index.js ***!\n  \\******************************************************/\n/*! exports provided: Point, PointContainer, Palette, HueStatistics, ProgressTracker, arithmetic */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _arithmetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arithmetic */ \"./node_modules/image-q/dist/esm/utils/arithmetic.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"arithmetic\", function() { return _arithmetic__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _hueStatistics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hueStatistics */ \"./node_modules/image-q/dist/esm/utils/hueStatistics.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"HueStatistics\", function() { return _hueStatistics__WEBPACK_IMPORTED_MODULE_1__[\"HueStatistics\"]; });\n\n/* harmony import */ var _palette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./palette */ \"./node_modules/image-q/dist/esm/utils/palette.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Palette\", function() { return _palette__WEBPACK_IMPORTED_MODULE_2__[\"Palette\"]; });\n\n/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return _point__WEBPACK_IMPORTED_MODULE_3__[\"Point\"]; });\n\n/* harmony import */ var _pointContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pointContainer */ \"./node_modules/image-q/dist/esm/utils/pointContainer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PointContainer\", function() { return _pointContainer__WEBPACK_IMPORTED_MODULE_4__[\"PointContainer\"]; });\n\n/* harmony import */ var _progressTracker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./progressTracker */ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ProgressTracker\", function() { return _progressTracker__WEBPACK_IMPORTED_MODULE_5__[\"ProgressTracker\"]; });\n\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * iq.ts - Image Quantization Library\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/palette.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/palette.js ***!\n  \\********************************************************/\n/*! exports provided: hueGroup, Palette */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hueGroup\", function() { return hueGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Palette\", function() { return Palette; });\n/* harmony import */ var _pointContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointContainer */ \"./node_modules/image-q/dist/esm/utils/pointContainer.js\");\n/* harmony import */ var _conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conversion/rgb2hsl */ \"./node_modules/image-q/dist/esm/conversion/rgb2hsl.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * palette.ts - part of Image Quantization Library\r\n */\r\n\r\n\r\n// TODO: make paletteArray via pointContainer, so, export will be available via pointContainer.exportXXX\r\nconst hueGroups = 10;\r\nfunction hueGroup(hue, segmentsNumber) {\r\n    const maxHue = 360;\r\n    const seg = maxHue / segmentsNumber;\r\n    const half = seg / 2;\r\n    for (let i = 1, mid = seg - half; i < segmentsNumber; i++, mid += seg) {\r\n        if (hue >= mid && hue < mid + seg)\r\n            return i;\r\n    }\r\n    return 0;\r\n}\r\nclass Palette {\r\n    constructor() {\r\n        this._pointArray = [];\r\n        this._i32idx = {};\r\n        this._pointContainer = new _pointContainer__WEBPACK_IMPORTED_MODULE_0__[\"PointContainer\"]();\r\n        this._pointContainer.setHeight(1);\r\n        this._pointArray = this._pointContainer.getPointArray();\r\n    }\r\n    add(color) {\r\n        this._pointArray.push(color);\r\n        this._pointContainer.setWidth(this._pointArray.length);\r\n    }\r\n    has(color) {\r\n        for (let i = this._pointArray.length - 1; i >= 0; i--) {\r\n            if (color.uint32 === this._pointArray[i].uint32)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    // TOTRY: use HUSL - http://boronine.com/husl/ http://www.husl-colors.org/ https://github.com/husl-colors/husl\r\n    getNearestColor(colorDistanceCalculator, color) {\r\n        return this._pointArray[this._getNearestIndex(colorDistanceCalculator, color) | 0];\r\n    }\r\n    getPointContainer() {\r\n        return this._pointContainer;\r\n    }\r\n    // TOTRY: use HUSL - http://boronine.com/husl/\r\n    /*\r\n     public nearestIndexByUint32(i32) {\r\n     var idx : number = this._nearestPointFromCache(\"\" + i32);\r\n     if (idx >= 0) return idx;\r\n  \r\n     var min = 1000,\r\n     rgb = [\r\n     (i32 & 0xff),\r\n     (i32 >>> 8) & 0xff,\r\n     (i32 >>> 16) & 0xff,\r\n     (i32 >>> 24) & 0xff\r\n     ],\r\n     len = this._pointArray.length;\r\n  \r\n     idx = 0;\r\n     for (var i = 0; i < len; i++) {\r\n     var dist = Utils.distEuclidean(rgb, this._pointArray[i].rgba);\r\n  \r\n     if (dist < min) {\r\n     min = dist;\r\n     idx = i;\r\n     }\r\n     }\r\n  \r\n     this._i32idx[i32] = idx;\r\n     return idx;\r\n     }\r\n     */\r\n    _nearestPointFromCache(key) {\r\n        return typeof this._i32idx[key] === 'number' ? this._i32idx[key] : -1;\r\n    }\r\n    _getNearestIndex(colorDistanceCalculator, point) {\r\n        let idx = this._nearestPointFromCache('' + point.uint32);\r\n        if (idx >= 0)\r\n            return idx;\r\n        let minimalDistance = Number.MAX_VALUE;\r\n        idx = 0;\r\n        for (let i = 0, l = this._pointArray.length; i < l; i++) {\r\n            const p = this._pointArray[i];\r\n            const distance = colorDistanceCalculator.calculateRaw(point.r, point.g, point.b, point.a, p.r, p.g, p.b, p.a);\r\n            if (distance < minimalDistance) {\r\n                minimalDistance = distance;\r\n                idx = i;\r\n            }\r\n        }\r\n        this._i32idx[point.uint32] = idx;\r\n        return idx;\r\n    }\r\n    /*\r\n     public reduce(histogram : ColorHistogram, colors : number) {\r\n     if (this._pointArray.length > colors) {\r\n     var idxi32 = histogram.getImportanceSortedColorsIDXI32();\r\n  \r\n     // quantize histogram to existing palette\r\n     var keep = [], uniqueColors = 0, idx, pruned = false;\r\n  \r\n     for (var i = 0, len = idxi32.length; i < len; i++) {\r\n     // palette length reached, unset all remaining colors (sparse palette)\r\n     if (uniqueColors >= colors) {\r\n     this.prunePal(keep);\r\n     pruned = true;\r\n     break;\r\n     } else {\r\n     idx = this.nearestIndexByUint32(idxi32[i]);\r\n     if (keep.indexOf(idx) < 0) {\r\n     keep.push(idx);\r\n     uniqueColors++;\r\n     }\r\n     }\r\n     }\r\n  \r\n     if (!pruned) {\r\n     this.prunePal(keep);\r\n     }\r\n     }\r\n     }\r\n  \r\n     // TODO: check usage, not tested!\r\n     public prunePal(keep : number[]) {\r\n     var colors = this._pointArray.length;\r\n     for (var colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {\r\n     if (keep.indexOf(colorIndex) < 0) {\r\n  \r\n     if(colorIndex + 1 < colors) {\r\n     this._pointArray[ colorIndex ] = this._pointArray [ colors - 1 ];\r\n     }\r\n     --colors;\r\n     //this._pointArray[colorIndex] = null;\r\n     }\r\n     }\r\n     console.log(\"colors pruned: \" + (this._pointArray.length - colors));\r\n     this._pointArray.length = colors;\r\n     this._i32idx = {};\r\n     }\r\n     */\r\n    // TODO: group very low lum and very high lum colors\r\n    // TODO: pass custom sort order\r\n    // TODO: sort criteria function should be placed to HueStats class\r\n    sort() {\r\n        this._i32idx = {};\r\n        this._pointArray.sort((a, b) => {\r\n            const hslA = Object(_conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_1__[\"rgb2hsl\"])(a.r, a.g, a.b);\r\n            const hslB = Object(_conversion_rgb2hsl__WEBPACK_IMPORTED_MODULE_1__[\"rgb2hsl\"])(b.r, b.g, b.b);\r\n            // sort all grays + whites together\r\n            const hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + hueGroup(hslA.h, hueGroups);\r\n            const hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + hueGroup(hslB.h, hueGroups);\r\n            /*\r\n             var hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + Utils.hueGroup(hslA.h, hueGroups);\r\n             var hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + Utils.hueGroup(hslB.h, hueGroups);\r\n             */\r\n            const hueDiff = hueB - hueA;\r\n            if (hueDiff)\r\n                return -hueDiff;\r\n            /*\r\n             var lumDiff = Utils.lumGroup(+hslB.l.toFixed(2)) - Utils.lumGroup(+hslA.l.toFixed(2));\r\n             if (lumDiff) return -lumDiff;\r\n             */\r\n            const lA = a.getLuminosity(true);\r\n            const lB = b.getLuminosity(true);\r\n            if (lB - lA !== 0)\r\n                return lB - lA;\r\n            const satDiff = ((hslB.s * 100) | 0) - ((hslA.s * 100) | 0);\r\n            if (satDiff)\r\n                return -satDiff;\r\n            return 0;\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=palette.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/point.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/point.js ***!\n  \\******************************************************/\n/*! exports provided: Point */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return Point; });\n/* harmony import */ var _constants_bt709__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/bt709 */ \"./node_modules/image-q/dist/esm/constants/bt709.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * point.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * v8 optimized class\r\n * 1) \"constructor\" should have initialization with worst types\r\n * 2) \"set\" should have |0 / >>> 0\r\n */\r\nclass Point {\r\n    // Lab : { L : number; a : number; b : number };\r\n    static createByQuadruplet(quadruplet) {\r\n        const point = new Point();\r\n        point.r = quadruplet[0] | 0;\r\n        point.g = quadruplet[1] | 0;\r\n        point.b = quadruplet[2] | 0;\r\n        point.a = quadruplet[3] | 0;\r\n        point._loadUINT32();\r\n        point._loadQuadruplet();\r\n        // point._loadLab();\r\n        return point;\r\n    }\r\n    static createByRGBA(red, green, blue, alpha) {\r\n        const point = new Point();\r\n        point.r = red | 0;\r\n        point.g = green | 0;\r\n        point.b = blue | 0;\r\n        point.a = alpha | 0;\r\n        point._loadUINT32();\r\n        point._loadQuadruplet();\r\n        // point._loadLab();\r\n        return point;\r\n    }\r\n    static createByUint32(uint32) {\r\n        const point = new Point();\r\n        point.uint32 = uint32 >>> 0;\r\n        point._loadRGBA();\r\n        point._loadQuadruplet();\r\n        // point._loadLab();\r\n        return point;\r\n    }\r\n    constructor() {\r\n        this.uint32 = -1 >>> 0;\r\n        this.r = this.g = this.b = this.a = 0;\r\n        this.rgba = new Array(4);\r\n        this.rgba[0] = 0;\r\n        this.rgba[1] = 0;\r\n        this.rgba[2] = 0;\r\n        this.rgba[3] = 0;\r\n        /*\r\n         this.Lab = {\r\n         L : 0.0,\r\n         a : 0.0,\r\n         b : 0.0\r\n         };\r\n         */\r\n    }\r\n    from(point) {\r\n        this.r = point.r;\r\n        this.g = point.g;\r\n        this.b = point.b;\r\n        this.a = point.a;\r\n        this.uint32 = point.uint32;\r\n        this.rgba[0] = point.r;\r\n        this.rgba[1] = point.g;\r\n        this.rgba[2] = point.b;\r\n        this.rgba[3] = point.a;\r\n        /*\r\n         this.Lab.L = point.Lab.L;\r\n         this.Lab.a = point.Lab.a;\r\n         this.Lab.b = point.Lab.b;\r\n         */\r\n    }\r\n    /*\r\n     * TODO:\r\n     Luminance from RGB:\r\n  \r\n     Luminance (standard for certain colour spaces): (0.2126*R + 0.7152*G + 0.0722*B) [1]\r\n     Luminance (perceived option 1): (0.299*R + 0.587*G + 0.114*B) [2]\r\n     Luminance (perceived option 2, slower to calculate):  sqrt( 0.241*R^2 + 0.691*G^2 + 0.068*B^2 ) ? sqrt( 0.299*R^2 + 0.587*G^2 + 0.114*B^2 ) (thanks to @MatthewHerbst) [http://alienryderflex.com/hsp.html]\r\n     */\r\n    getLuminosity(useAlphaChannel) {\r\n        let r = this.r;\r\n        let g = this.g;\r\n        let b = this.b;\r\n        if (useAlphaChannel) {\r\n            r = Math.min(255, 255 - this.a + this.a * r / 255);\r\n            g = Math.min(255, 255 - this.a + this.a * g / 255);\r\n            b = Math.min(255, 255 - this.a + this.a * b / 255);\r\n        }\r\n        // var luma = this.r * Point._RED_COEFFICIENT + this.g * Point._GREEN_COEFFICIENT + this.b * Point._BLUE_COEFFICIENT;\r\n        /*\r\n         if(useAlphaChannel) {\r\n         luma = (luma * (255 - this.a)) / 255;\r\n         }\r\n         */\r\n        return r * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].RED + g * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].GREEN + b * _constants_bt709__WEBPACK_IMPORTED_MODULE_0__[\"Y\"].BLUE;\r\n    }\r\n    _loadUINT32() {\r\n        this.uint32 = (this.a << 24 | this.b << 16 | this.g << 8 | this.r) >>> 0;\r\n    }\r\n    _loadRGBA() {\r\n        this.r = this.uint32 & 0xff;\r\n        this.g = (this.uint32 >>> 8) & 0xff;\r\n        this.b = (this.uint32 >>> 16) & 0xff;\r\n        this.a = (this.uint32 >>> 24) & 0xff;\r\n    }\r\n    _loadQuadruplet() {\r\n        this.rgba[0] = this.r;\r\n        this.rgba[1] = this.g;\r\n        this.rgba[2] = this.b;\r\n        this.rgba[3] = this.a;\r\n        /*\r\n         var xyz = rgb2xyz(this.r, this.g, this.b);\r\n         var lab = xyz2lab(xyz.x, xyz.y, xyz.z);\r\n         this.lab.l = lab.l;\r\n         this.lab.a = lab.a;\r\n         this.lab.b = lab.b;\r\n         */\r\n    }\r\n}\r\n//# sourceMappingURL=point.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/pointContainer.js\":\n/*!***************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/pointContainer.js ***!\n  \\***************************************************************/\n/*! exports provided: PointContainer */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointContainer\", function() { return PointContainer; });\n/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point */ \"./node_modules/image-q/dist/esm/utils/point.js\");\n/**\r\n * @preserve\r\n * Copyright 2015-2018 Igor Bezkrovnyi\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * pointContainer.ts - part of Image Quantization Library\r\n */\r\n\r\n/**\r\n * v8 optimizations done.\r\n * fromXXX methods are static to move out polymorphic code from class instance itself.\r\n */\r\nclass PointContainer {\r\n    constructor() {\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this._pointArray = [];\r\n    }\r\n    getWidth() {\r\n        return this._width;\r\n    }\r\n    getHeight() {\r\n        return this._height;\r\n    }\r\n    setWidth(width) {\r\n        this._width = width;\r\n    }\r\n    setHeight(height) {\r\n        this._height = height;\r\n    }\r\n    getPointArray() {\r\n        return this._pointArray;\r\n    }\r\n    clone() {\r\n        const clone = new PointContainer();\r\n        clone._width = this._width;\r\n        clone._height = this._height;\r\n        for (let i = 0, l = this._pointArray.length; i < l; i++) {\r\n            clone._pointArray[i] = _point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"].createByUint32(this._pointArray[i].uint32 | 0); // \"| 0\" is added for v8 optimization\r\n        }\r\n        return clone;\r\n    }\r\n    toUint32Array() {\r\n        const l = this._pointArray.length;\r\n        const uint32Array = new Uint32Array(l);\r\n        for (let i = 0; i < l; i++) {\r\n            uint32Array[i] = this._pointArray[i].uint32;\r\n        }\r\n        return uint32Array;\r\n    }\r\n    toUint8Array() {\r\n        return new Uint8Array(this.toUint32Array().buffer);\r\n    }\r\n    static fromHTMLImageElement(img) {\r\n        const width = img.naturalWidth;\r\n        const height = img.naturalHeight;\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        const ctx = canvas.getContext('2d'); // tslint:disable-line:no-non-null-assertion\r\n        ctx.drawImage(img, 0, 0, width, height, 0, 0, width, height);\r\n        return PointContainer.fromHTMLCanvasElement(canvas);\r\n    }\r\n    static fromHTMLCanvasElement(canvas) {\r\n        const width = canvas.width;\r\n        const height = canvas.height;\r\n        const ctx = canvas.getContext('2d'); // tslint:disable-line:no-non-null-assertion\r\n        const imgData = ctx.getImageData(0, 0, width, height);\r\n        return PointContainer.fromImageData(imgData);\r\n    }\r\n    static fromImageData(imageData) {\r\n        const width = imageData.width;\r\n        const height = imageData.height;\r\n        return PointContainer.fromUint8Array(imageData.data, width, height);\r\n    }\r\n    static fromUint8Array(uint8Array, width, height) {\r\n        switch (Object.prototype.toString.call(uint8Array)) {\r\n            case '[object Uint8ClampedArray]':\r\n            case '[object Uint8Array]':\r\n                break;\r\n            default:\r\n                uint8Array = new Uint8Array(uint8Array);\r\n        }\r\n        const uint32Array = new Uint32Array(uint8Array.buffer);\r\n        return PointContainer.fromUint32Array(uint32Array, width, height);\r\n    }\r\n    static fromUint32Array(uint32Array, width, height) {\r\n        const container = new PointContainer();\r\n        container._width = width;\r\n        container._height = height;\r\n        for (let i = 0, l = uint32Array.length; i < l; i++) {\r\n            container._pointArray[i] = _point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"].createByUint32(uint32Array[i] | 0); // \"| 0\" is added for v8 optimization\r\n        }\r\n        return container;\r\n    }\r\n    static fromBuffer(buffer, width, height) {\r\n        const uint32Array = new Uint32Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint32Array.BYTES_PER_ELEMENT);\r\n        return PointContainer.fromUint32Array(uint32Array, width, height);\r\n    }\r\n}\r\n//# sourceMappingURL=pointContainer.js.map\n\n/***/ }),\n\n/***/ \"./node_modules/image-q/dist/esm/utils/progressTracker.js\":\n/*!****************************************************************!*\\\n  !*** ./node_modules/image-q/dist/esm/utils/progressTracker.js ***!\n  \\****************************************************************/\n/*! exports provided: ProgressTracker */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ProgressTracker\", function() { return ProgressTracker; });\nclass ProgressTracker {\r\n    constructor(valueRange, progressRange) {\r\n        this._range = valueRange;\r\n        this._progressRange = progressRange;\r\n        this._step = Math.max(1, this._range / (ProgressTracker.steps + 1) | 0);\r\n        this._last = -this._step;\r\n        this.progress = 0;\r\n    }\r\n    shouldNotify(current) {\r\n        if (current - this._last >= this._step) {\r\n            this._last = current;\r\n            this.progress = Math.min(this._progressRange * this._last / this._range, this._progressRange);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nProgressTracker.steps = 100;\r\n//# sourceMappingURL=progressTracker.js.map\n\n/***/ }),\n\n/***/ \"./src/Animated_GIF.worker.js\":\n/*!************************************!*\\\n  !*** ./src/Animated_GIF.worker.js ***!\n  \\************************************/\n/*! no exports provided */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var image_q__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! image-q */ \"./node_modules/image-q/dist/esm/image-q.js\");\n\n\n/**\n * Searches for an unused colour in the image data so it can be used as a unique colour\n * for transparent pixels. Builds up a set of all known colours then searches from\n * 0x000000 to 0xFFFFFF for a colour not in the set. They're is probably a much more effecient\n * way of doing this. There is also a possibilty all colours are used, but that's probably\n * just a test image.\n * @param {*} data\n * @param {*} width\n * @param {*} height\n */\nfunction searchForUnusedColour(data, width, height) {\n  let i = 0\n  const length = width * height * 4\n  const knownColours = new Set()\n\n  while (i < length) {\n    const r = data[i++]\n    const g = data[i++]\n    const b = data[i++]\n    i++ // don't track the transparency here just the rgb values\n    const pixelColour = (r << 16) | (g << 8) | b\n    knownColours.add(pixelColour)\n  }\n\n  let unusedColour = 0x00\n  while (unusedColour < 0xffffff) {\n    if (!knownColours.has(unusedColour)) break\n    unusedColour++\n  }\n\n  return unusedColour\n}\n\nfunction dataToRGBANormalized(\n  data,\n  width,\n  height,\n  unusedColour,\n  transparencyCutOff = 0.7\n) {\n  let i = 0\n  const length = width * height * 4\n  const rgba = []\n  const transparencyCutOffValue = Math.trunc(255 * transparencyCutOff)\n  let hasTransparency = false\n\n  const unusedColourR = (unusedColour & 0xff0000) >> 16\n  const unusedColourG = (unusedColour & 0x00ff00) >> 8\n  const unusedColourB = unusedColour & 0x0000ff\n\n  while (i < length) {\n    const r = data[i++]\n    const g = data[i++]\n    const b = data[i++]\n    let a = data[i++]\n    a = a >= transparencyCutOffValue ? 0xff : 0x00\n\n    if (unusedColour !== undefined && a === 0) {\n      rgba.push(unusedColourR)\n      rgba.push(unusedColourG)\n      rgba.push(unusedColourB)\n      rgba.push(0x00)\n      hasTransparency = true\n    } else {\n      rgba.push(r)\n      rgba.push(g)\n      rgba.push(b)\n      rgba.push(0xff)\n    }\n  }\n\n  return { rgba, hasTransparency }\n}\n\n/**\n * Takes an array of points from image-q and converts them to an array of sorted rgb values\n * @param {Array[Points]} points\n * returns {Array}\n */\nfunction pointsToRgb(points) {\n  return points.map(point => (point.r << 16) | (point.g << 8) | point.b)\n}\n\n/**\n * @param {Uint32Array} pixels\n * @param {Uint32Array} palette\n * @returns {Uint8Array}\n */\nfunction indexPixelsWithPalette(pixels, palette) {\n  return Uint8Array.from(pixels.map(pixel => palette.indexOf(pixel)))\n}\n\nfunction processFrameWithQuantizer(\n  imageData,\n  width,\n  height,\n  transparencyCutOff,\n  dithering\n) {\n  const unusedColour = searchForUnusedColour(imageData, width, height)\n  const { rgba, hasTransparency } = dataToRGBANormalized(\n    imageData,\n    width,\n    height,\n    unusedColour,\n    transparencyCutOff\n  )\n\n  const pointContainer = image_q__WEBPACK_IMPORTED_MODULE_0__[\"utils\"].PointContainer.fromUint8Array(\n    new Uint8Array(rgba),\n    width,\n    height\n  )\n  const palette = Object(image_q__WEBPACK_IMPORTED_MODULE_0__[\"buildPaletteSync\"])([pointContainer], {\n    paletteQuantization: 'rgbquant',\n    colors: hasTransparency && unusedColour ? 255 : 256, // leave one for transparency\n  })\n  if (hasTransparency && unusedColour) {\n    palette.add(image_q__WEBPACK_IMPORTED_MODULE_0__[\"utils\"].Point.createByUint32(unusedColour))\n  }\n  const outPointContainer = Object(image_q__WEBPACK_IMPORTED_MODULE_0__[\"applyPaletteSync\"])(pointContainer, palette, {\n    imageQuantization: dithering,\n  })\n  const paletteRgbArray = pointsToRgb(\n    palette.getPointContainer().getPointArray()\n  )\n  paletteRgbArray.sort((a, b) => a - b)\n  const transparencyIndex = paletteRgbArray.indexOf(unusedColour)\n\n  const indexedPixels = indexPixelsWithPalette(\n    pointsToRgb(outPointContainer.getPointArray()),\n    paletteRgbArray\n  )\n\n  return {\n    pixels: indexedPixels,\n    palette: Array.from(paletteRgbArray),\n    transparencyIndex: transparencyIndex > -1 ? transparencyIndex : undefined,\n  }\n}\n\n// ~~~\n\nfunction run(frame) {\n  const { width, height, data, dithering, transparencyCutOff } = frame\n\n  return processFrameWithQuantizer(\n    data,\n    width,\n    height,\n    transparencyCutOff,\n    dithering\n  )\n}\n\nself.onmessage = function(ev) {\n  var data = ev.data\n  var response = run(data)\n  postMessage(response)\n}\n\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,", null);
};

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,